<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stormhouse</title><link>http://stormhouse.github.io/</link><description></description><atom:link href="http://stormhouse.github.io/feeds/animation.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 08 Dec 2013 16:27:00 +0800</lastBuildDate><item><title>Easing Functions in CSS3（译）</title><link>http://stormhouse.github.io/posts/2013/easing-functions-in-css3yi/</link><description>&lt;p&gt;thanks [kirupa][24] &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当你创建一个animation或transition的动画，动画运行过程中属性发生的变化与在终止状态时发生的变化同等重要。比如，属性值随时间线性变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在这个例子里，动画看起来不会加速也不会减速。动画以固定单调的速率移动。你可以通过更多的一些属性风格变化把动画提高一个档次：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，开始时属性值变化的比较快，接近终止时变慢。&lt;/p&gt;
&lt;p&gt;上面两个例子中，最终结果是相同的。起始状态，确定一个属性初始值。终止状态，经过指定的时延后，变为终止值。如果只在动画起始和终止状态睁开眼，而在动画运行过程中闭上眼，你看不到两个动画的区别。唯一不同的是，在动画生命过程中不同时间段属性值变化的速率，一个是线性的另一个是非线性的。&lt;/p&gt;
&lt;p&gt;动画属性如何从初始值到终止值变化的速率有个名字。这个名字是&lt;strong&gt;easing function&lt;/strong&gt;，该内容将贯穿本章始终。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h2&gt;Making Sense of Easing Functions&lt;/h2&gt;
&lt;p&gt;在前面小节中，谈到缓动函数时，两种不同颜色图表展示属性如何变化。其中一个颜色的线性缓动函数没做太多的东西。另一个颜色的非线性缓动函数，在你的动画运行后，速率减慢。在本节中，让我们转换下视角，关注于缓动函数而不去关注实际属性值的变化和时延。在该部分里，你将看到一些可爱的图表包括lines, labels, numbers和其它你在学校没有见过的东西。噢耶！&lt;/p&gt;
&lt;h4&gt;Meet the Easing Function Curve&lt;/h4&gt;
&lt;p&gt;无论是谁在什么时候谈论缓动函数，它仅是关于时间的一个图表，就是众所周知的&lt;strong&gt;缓动函数曲线图&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;掌握缓动函数非常重要的一部分就是怎样绘制和理解这个曲线图，那么让我们看看怎样定义该图表吧。我们需要一个羔羊（实例）来帮助我们理解。这里有一个例子。&lt;/p&gt;
&lt;h6&gt;The Example&lt;/h6&gt;
&lt;p&gt;这个例子比较简单。我们使用linear缓动函数将元素的&lt;code&gt;opacity&lt;/code&gt;属性值&lt;strong&gt;线性的&lt;/strong&gt;在2秒内从1改变到0。这可使用animation也可使用transition--这真没什么关系。&lt;/p&gt;
&lt;p&gt;该例的曲线图是绘制时延（2秒）和opacity值，如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;通过这个图表，很简单的看出，在2秒内的任意时间点&lt;code&gt;opacity&lt;/code&gt;属性值是多少。在&lt;strong&gt;1&lt;/strong&gt;秒的位置，&lt;code&gt;opacity&lt;/code&gt;属性值为&lt;strong&gt;.5&lt;/strong&gt;。在&lt;strong&gt;1.5&lt;/strong&gt;秒的位置&lt;code&gt;opacity&lt;/code&gt;属性值为&lt;strong&gt;.25&lt;/strong&gt;，等等。&lt;/p&gt;
&lt;h6&gt;Visualizing Easing Functions&lt;/h6&gt;
&lt;p&gt;在这里，事情变得有趣起来。缓动函数定义属性改变的速率。给定时间点的属性值是多少 和动画属性从初始值到终止值如何改变一样不重要。意思是上面绘制的图表不是最好的。让我们扩展一下，使用百分比绘制一个缓动函数曲线图。&lt;/p&gt;
&lt;p&gt;不使用具体的属性值和时延绘制它们，而用&lt;strong&gt;比率&lt;/strong&gt;代替它们。相比于动画属性值实际变化了多少，我们使用百分比表示当前值与终止值的比率。把前面的图表转化为我们期望的图表看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;尽管看起来与前面的图表不同，但之前的细节仍能在这里表现出来。你需更深入一些。在这个例子里，&lt;code&gt;opacity&lt;/code&gt;属性值从开始的1变化为结束时的0。起始状态动画完成了0%，&lt;code&gt;opacity&lt;/code&gt;属性值是到达终止值0的0%:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;蓝线就是开始于属性值的0%处。&lt;/p&gt;
&lt;p&gt;当你的动画完成后，你的opacity属性值是0——即终止值。另一种说法是它需要达到100%的那个地方，动画已经完成：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;就像你所看到的一样，蓝线的属性在100%处结束，因为它的变化是线性的，你得到的一条直线从左下角(0%，0%)到右上角(100%，100%)。&lt;/p&gt;
&lt;p&gt;随着这个具有代表性的动画，要注意的是，在开始和结束时关注的属性实际值已不再那么重要。opacity属性值可以是0和1之间的其他值，color属性值可以是#FFFFF 和 #00000 之间的值，可以是一些正值和负值，还可以是一些更多的东西。动画可以是0.2秒的时延或者600秒的时延已不再重要。在这一点上，将全部讨论的细节放到完成的比率。&lt;strong&gt;最重要的是动画生命周期中任意点与最终值的比率是多少&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;Visualizing Easing Functions...for Real This Time!&lt;/h4&gt;
&lt;p&gt;本小节的标题含义没有太多的戏剧性。上节看到的基于百分比的图表包含缓动函数。我并没有强调它们，是因为还不是时候：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;蓝色的曲线表示笼统的缓动函数。现在你知道了这一点，那就让我们更深入的研究这个曲线吧。&lt;/p&gt;
&lt;h6&gt;Linear Cases&lt;/h6&gt;
&lt;p&gt;对于一个线性来说，正如你刚才所看到的，最终结果就是一条直线。动画紧密的完成移动过程：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-9.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;着重谈一下吧，任意选择一点，例如选择30%完成率的位置，表示属性值改变了多少，以及动画运行了多久。图上的映射将得出，在2秒内属性值从1改变到0，30%处表示了opacity值为0.7，用时0.6秒。这是一个比较简单的乘法运算。&lt;/p&gt;
&lt;p&gt;在大多数情况下，&lt;strong&gt;你实际不需做&lt;/strong&gt;任何乘法运算，将基于百分比类似的东西转化为实际值。你需要知道的就是看看缓动函数曲线是怎样影响你的动画的。就像这样一条直线，很清晰的看到它将如何影响你的动画。&lt;/p&gt;
&lt;h6&gt;The Awesome Non-Linear Cases&lt;/h6&gt;
&lt;p&gt;当然，不是所有的函数都像线性缓动函数那样简单。更多特殊的非线性用例，属性的变化与动画实现完成相差多少:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;例如，看一看动画完成75%的时候所处的位置吧：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;从图表中看到，动画完成75%并不意味着最终属性值改变了75%。而看起来更像45%。看一下缓动函数曲线，到终止前，属性值的变化率赶不上动画的完成率。意思是动画开始运行时比较缓慢，然后不断加速。不同的缓动函数所起的作用不同，一会你就将看到这些不同的缓动函数。&lt;/p&gt;
&lt;h4&gt;What You Can and Can't Do&lt;/h4&gt;
&lt;p&gt;看来理论上的学习都已经完成了。最后，在深入学习这无聊的概述之前，大致看看你在CSS缓动函数中能做什么和不能做什么。&lt;/p&gt;
&lt;h6&gt;You Always Start at 0% and End at 100%&lt;/h6&gt;
&lt;p&gt;也许你知道的最大一个限制是&lt;strong&gt;属性的变化过程始终是开始于0%和结束于100%&lt;/strong&gt;。不管缓动函数在中间过程做任意东西。起始和结束状态清晰定义的属性值不能被改变:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-12.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这是什么意思呢？意思是缓动函数&lt;strong&gt;不能&lt;/strong&gt;使你的动画开始于除初始值外的其它值。同样地，动画结束时，缓动函数也&lt;strong&gt;不&lt;/strong&gt;让更改你的属性为除终止值外的其它值。在起始和结束状态之间，缓动函数可以做许多不同的疯狂事情。只有这些，在起始和结束状态保持这种秩序。&lt;/p&gt;
&lt;h6&gt;There Is No Box&lt;/h6&gt;
&lt;p&gt;说到起始和结束状态之外的疯狂事件，属性值可以改变为除0%-100%之外的东西：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-13.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;属性值超出初始值和终止值的范围是让你动画变得更真实的一个重要细节。 &lt;a href="http://en.wikipedia.org/wiki/12_basic_principles_of_animation#Follow_through_and_overlapping_action"&gt;12 Basic Principles of Animation&lt;/a&gt; 中的一个称为 Follow through. Follow through描述了一个动画技术不能立刻停止下来。它会稍微超出终止值，然后返回原点。这是很有用的技术，运行中可超出0%-100%的值。&lt;/p&gt;
&lt;h2&gt;My Name is Curve...Cubic Bezier Curve!&lt;/h2&gt;
&lt;p&gt;至此，我们粗略的介绍了缓动函数。作为学习它的一部分，如用手工绘制是能接受的。现在我们来更进一步的、更精准的学习缓动函数。从更正式的缓动函数曲线开始吧。&lt;/p&gt;
&lt;p&gt;缓动函数曲线不是简单的称为缓动函数曲线。它有一个简单的学名。它们更正式的被称为 &lt;strong&gt;cubic bezier curves&lt;/strong&gt;（三次贝塞尔曲线）.。当然我不会深入讨论数学上三次贝塞尔曲线的东西，这里提供足够的信息可以让你有效的用它们创建有意思的动画。&lt;/p&gt;
&lt;p&gt;让我们开始看一下缓动函...呃...是贝塞尔曲线：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-14.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这个曲线不像是从马车上跌落的东西。它是用数学上曲线函数，表示它是由很多精准点组成的集合：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-15.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你只需要知道的是三次贝塞尔曲线由4个点创建。我已经在图上标注了那4个点，P0, P1, P2, 和 P3.。在这个图表中每个点由两个表示横纵坐标的值组成--两个值是 &lt;strong&gt;x&lt;/strong&gt; 和 &lt;strong&gt;y&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-16.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;我用数值而不是使用百分比来表示这些点，是因为通常很少在三次贝塞尔曲线中用到百分比。从上面的图中，很容易获取P1 和P2 的值。我仅是将这完成率和属性变化率转变为数值型。请注意这里我没有标注P0 and P3 是因为它们 在HTML的值总是 (0, 0) 和(1, 1)。&lt;/p&gt;
&lt;p&gt;这些点的值极其重要，不仅是因为在图表中能很好的标注它们。而且这些是&lt;strong&gt;被指定在CSS中的值&lt;/strong&gt;----很快你就能看到了。&lt;/p&gt;
&lt;h2&gt;Easing Functions in CSS&lt;/h2&gt;
&lt;p&gt;最后，我们不去讨论图表而转到CSS范围内。CSS属性中的两个清晰的命名为 &lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;animation-timing-function&lt;/code&gt; 可以定义缓动函数。 它们的名称出卖了它们。在CSS animations里使用 &lt;code&gt;animation-timing-function&lt;/code&gt; 在CSS transitions中使用 &lt;code&gt;transition-timing-function&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;让我们快速看看这些时间函数各自的用武之地吧。&lt;/p&gt;
&lt;h4&gt;Easing Functions in Animations&lt;/h4&gt;
&lt;p&gt;在CSS animation中， &lt;code&gt;animation-timing-function&lt;/code&gt; 属性被定义在两个地方。一个是animation声明的一部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* shorthand */&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* longhand */&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;somethingSomethingDarkSide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="n"&gt;deathstar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="mh"&gt;25&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;count:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它也可被声明在单独的关键帧中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在animation中声明一个缓动函数，实际意思是它包括的每一个关键帧都将受这个缓动函数的影响。这与将 &lt;code&gt;animation-timing-function&lt;/code&gt; 分别定义在每一个关键帧中没有什么不同。但这样你可以少敲一些字符。&lt;/p&gt;
&lt;p&gt;因为级联关系，定义在关键帧中的一个缓动函数将覆盖掉animation声明的缓动函数。这是一件好理解的事，能在不同地方（关键帧）混合使用缓动函数。需要注意的最后一件事是，定义在一个关键帧中的&lt;code&gt;animation-timing-function&lt;/code&gt;只会影响 从当前关键帧运行到下一关键帧动画过程。意思是你不能在最后一个关键帧中定义缓动函数，因为动画没有下一帧了。如果你真的给最后一帧声明了缓动函数，它会被忽略掉...你真定义它会被笑话的。&lt;/p&gt;
&lt;h4&gt;Easing Functions in Transitions&lt;/h4&gt;
&lt;p&gt;Transitions中的缓动函数比较简单些，&lt;code&gt;transition-timing-function&lt;/code&gt; 只能被声明在transition属性中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* shorthand */&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* longhand */&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;karmaKramer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;duration:&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;delay:&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;公平的讲，使用transition，没有第二个地方可以声明缓动函数，所以不要过多的赞美它。&lt;/p&gt;
&lt;h6&gt;Note - Default Timing Function Values&lt;/h6&gt;
&lt;p&gt;Animation或 transition中设置缓动函数是可选的。原因是任意一个animation或transition默认会有一个缓动函数值---ease。&lt;/p&gt;
&lt;h4&gt;Meet the Easing Functions / Timing Functions&lt;/h4&gt;
&lt;p&gt;现在你已经知道怎样CSS中定义缓动函数了，让我们实际看一下这些不同的缓动函数吧。你可设置的&lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;animation-timing-function&lt;/code&gt; 属性值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ease&lt;/li&gt;
&lt;li&gt;linear&lt;/li&gt;
&lt;li&gt;ease-in&lt;/li&gt;
&lt;li&gt;ease-out&lt;/li&gt;
&lt;li&gt;ease-in-out&lt;/li&gt;
&lt;li&gt;step-start&lt;/li&gt;
&lt;li&gt;step-end&lt;/li&gt;
&lt;li&gt;steps()&lt;/li&gt;
&lt;li&gt;cubic-bezier()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的几节中，我会在某种程度上解释每一个函数。&lt;/p&gt;
&lt;h6&gt;cubic-bezier()&lt;/h6&gt;
&lt;p&gt;让我们从最具有目的性的&lt;strong&gt;三次贝塞尔曲线函数&lt;/strong&gt;开始吧。这个函数有4个参数，这些参数分别映射曲线中 P1 和P2 ：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-17.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;前两个参数是x和y，表示 P1点。后两个参数表示P2：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-18.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;P0 和 P3 不用管，因为它们是固定的。如果你还记得前面内容，它们是起始点和结束点的值。完全不用管它们，确实如此。&lt;/p&gt;
&lt;p&gt;当把这些参数放进去的时候，你的&lt;strong&gt;贝塞尔缓动函数&lt;/strong&gt;看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;cubic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.78&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从实际出发，不需要你将一些随机值放到函数中，测试一下看是不是想要结果。那简直太浪费时间了。你要做的是访问这个在线工具，来简化你的工作。&lt;/p&gt;
&lt;p&gt;我最喜爱的在线资源是 Lea Verou's的 &lt;a href="http://cubic-bezier.com/"&gt;cubic-bezier generator&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-19.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;她的工具可让生成你想要的任意可用的缓动函数。你使用它玩三次贝塞尔曲线，预览它生成什么样的动画，并容易得到CSS中贝塞尔函数的参数值。&lt;/p&gt;
&lt;p&gt;另一个我喜欢的网站是&lt;a href="http://twitter.com/matthewlein"&gt;Matthew Lein&lt;/a&gt; 写的&lt;a href="http://matthewlein.com/ceaser/"&gt;CSS Easing Animation&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-20.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;==不仅可以生成CSS内嵌缓动函数，还可生成 Robert Penner 的 easing equations，并可预览它们。&lt;/p&gt;
&lt;p&gt;使用Lea 和Matthew 的网站，你不用尝试痛苦的摆弄三次贝塞尔定义点的值，只需键入它们的参数。&lt;/p&gt;
&lt;h6&gt;The Other Easing Functions&lt;/h6&gt;
&lt;p&gt;现在你已经知道如何定义一个 &lt;strong&gt;cubic-bezier&lt;/strong&gt;() 函数，你可凭想象创建任意种类的该函数。这个函数的唯一缺点就是你必须指定创建该曲线的4个参数。上面的两个站点工具能帮你做这事，但你也可指定一些内建的缓动函数，比如&lt;strong&gt;ease&lt;/strong&gt;, &lt;strong&gt;linear&lt;/strong&gt;, &lt;strong&gt;ease-in&lt;/strong&gt;, &lt;strong&gt;ease-out&lt;/strong&gt;, 和&lt;strong&gt;ease-in-out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些内建函数提供一种快捷方式。你可使用cubic-bezier函数重定义它们。也这是，这些是非常棒的。这些cubic bezier 曲线看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-21.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在上面的图表中，我单独将&lt;strong&gt;ease&lt;/strong&gt;缓动函数列到首位，不仅是因为它是一个函数标志，还因为它是&lt;code&gt;transition-timing-function&lt;/code&gt; 和 &lt;code&gt;animation-timing-function&lt;/code&gt; 这两个函数的默认值。&lt;/p&gt;
&lt;h6&gt;The step function&lt;/h6&gt;
&lt;p&gt;最后要讲的是，我们看一下一些影响你属性改变速率的其它东西，但它不是缓动函数。这种不是缓动函数被称之为 &lt;strong&gt;step function&lt;/strong&gt;（步进函数）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-22.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Step function是很特别的。它影响着不同间隔内运行的动画。例如，你看到上面图表中的第一个阶段，动画属性比率开始于0%处。在完成率50%标记处，动画一下子跳到50%。在动画完成时属性的比率到达100%。这些不同帧或步都不是平滑的。结果看起来有点像锯齿。&lt;/p&gt;
&lt;p&gt;在CSS中，使用 steps 函数定义步进函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pictureContainer&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nf"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步进函数有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;总步数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;第二个参数值为start或end，用来指定动画在每一步的开始时触发，还是在每一步的结束时触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果我想让动画分成5步并在每步的结束时触发，步进函数的定义看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pictureContainer&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nf"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的一件事是，指定越多的步数，动画越平滑。毕竟，把每一步当做动画的每一帧。相同时间内，定义越多的帧，最终的动画越平滑，这同样适用于步进声明的动画。&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;鉴于一般流行和计算机生成的动画，你可阅读关于它们更多好东西的细节。下面列出我最喜欢的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/TR/2013/WD-css3-transitions-20130212/#single-transition-timing-function"&gt;W3C's Overview of Easing Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matthewlein.com/ceaser/"&gt;CSS Easing Animation Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://easings.net/"&gt;Easing Function Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf"&gt;Robert Penner's Chapter on Tweening and Easing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danro/jquery-easing/blob/master/jquery.easing.js"&gt;jQuery Easing Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sun, 08 Dec 2013 16:27:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-08:posts/2013/easing-functions-in-css3yi/</guid><category>animation</category></item><item><title>CSS3: Animations vs. Transitions（译）</title><link>http://stormhouse.github.io/posts/2013/css3-animations-vs-transitionsyi/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/css3_animations_vs_transitions.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在CSS中，视觉变化上这里有两种技术竞相你的注意： Animations &amp;amp;Transitions. 在本文中，让我们来了解它们之间的异同点，这样你就能知道在什么时候使用哪一个。&lt;/p&gt;
&lt;p&gt;本文大部分内容帮助你熟悉animations和transitions。如果你还没有亲自动手实践它们， &lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animationsyi/"&gt;Creating a Simple CSS Animation&lt;/a&gt; 和&lt;a href="http://stormhouse.github.io/posts/2014/all-about-css-transitionsyi/"&gt;Looking at CSS3 Transitions&lt;/a&gt;  这两篇教程帮助你开始。&lt;/p&gt;
&lt;h2&gt;Similarities&lt;/h2&gt;
&lt;p&gt;宏观上，animations和transitions极其相似。它们都可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定要监听CSS属性的变化&lt;/li&gt;
&lt;li&gt;设置缓动函数改变属性从开始到结束值变化的速率。&lt;/li&gt;
&lt;li&gt;指定animation或transition所需要运行的多长时间&lt;/li&gt;
&lt;li&gt;以编程方式监听animation和transition规定事件，可以做自己想做的事。&lt;/li&gt;
&lt;li&gt;CSS可视化的属性改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过，除了这些，你将看到animations 和 transitions的不同，并将它们的特点展现出来。让我们来更详细的看下各自的特点吧。&lt;/p&gt;
&lt;h2&gt;Differences&lt;/h2&gt;
&lt;p&gt;Animations 和 transitions会在以下方面会有不同：当你如何触发它们运行时、它们是否容易循环、定义一个transition是多么复杂、怎么在正确场合的使用它们和与JavaScript友好的结合。来更详细的探讨这些话题吧。&lt;/p&gt;
&lt;h4&gt;Triggering&lt;/h4&gt;
&lt;p&gt;正如刚看到的animations和animations最大的一个不同就是你怎样触发它们运行。&lt;/p&gt;
&lt;p&gt;transition被触发的唯一场景就是CSS属性发生变化。一个简单的场景就是：CSS属性中的 &lt;code&gt;:hover&lt;/code&gt; 伪类发生改变：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;看这个可视化的例子，假设定义一个transition，当鼠标移上去你将看到圆形会变大。另一个触发transition运行的方式是使用JavaScript &lt;a href="http://www.kirupa.com/html5/setting_css_styles_using_javascript.htm"&gt;programmatically add or remove CSS classes&lt;/a&gt; 模拟CSS属性的变化。除了让属性值发生改变的方式，可以监听使用JavaScript改变inline的样式方式。&lt;/p&gt;
&lt;p&gt;另一方面，animations，不需要显式的触发。一旦你定义了animation，它将自动运行。&lt;/p&gt;
&lt;h6&gt;Note&lt;/h6&gt;
&lt;p&gt;Animations可以把&lt;code&gt;animation-play-state&lt;/code&gt;属性设置为Paused——这将导致动画默认不动，除非将属性更改为运行。W3C正在考虑删除这个属性，所以到目前为止，就当&lt;code&gt;animation-play-state&lt;/code&gt;这个属性不存在吧。&lt;/p&gt;
&lt;h4&gt;Looping&lt;/h4&gt;
&lt;p&gt;这个相当简单。在animations中通过设置 &lt;code&gt;animation-iteration-count&lt;/code&gt; 属性来很简单的设置循环。可以设置固定数值来规定动画重复的次数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想让动画永远的循环下去，也可以这样设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一方面，transitions没有一个属性可以指定它运行多少次。一旦触发，transition只运行一次。可以在&lt;code&gt;transitionEnd&lt;/code&gt;事件中设置让它循环。与animations相比，这比较复杂。&lt;/p&gt;
&lt;h4&gt;Defining Intermediate Points / Keyframes&lt;/h4&gt;
&lt;p&gt;使用animation，可以通过在起始与终止状态之间定义关键帧，更多的控制CSS属性值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可以设置你所想要的关键帧，当animation运行时，每个关键帧触发时，指定的属性变化都会表现出来。这允许你创建多种类型的动画，就像Flash一样，让HTML5更高效的创建更成熟的动画。&lt;/p&gt;
&lt;p&gt;使用transition，除了在动画的结束时，你没有太多的动画控制：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Transition只是简单的从初始状态运行到终止状态。你不能像animation一样指定任意中间状态，所以你如果想创建Teen Girl Squad 或一个复杂的动画，transition不是一个好的选择。&lt;/p&gt;
&lt;h4&gt;Specifying Properties Up-Front&lt;/h4&gt;
&lt;p&gt;接下来，定义一个transition，描述animations和transitions的适应场景。&lt;/p&gt;
&lt;p&gt;在一种场合，需要使用transitions。每个CSS属性都必须通过transition显式的标识。
For example, let's say you have something like the following:==例如，假设你有类似下面的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#mainContent {&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#mainContent:hover {&lt;/span&gt;
    &lt;span class="nl"&gt;cursor:&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mo"&gt;000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;鼠标移到上面，对 &lt;code&gt;background-color&lt;/code&gt;和 &lt;code&gt;width&lt;/code&gt;两个属性指定了不同值。transition只规定了&lt;code&gt;background-color&lt;/code&gt; 。意味着，浏览器仅监听&lt;code&gt;background-color&lt;/code&gt; 属性的变化。&lt;/p&gt;
&lt;p&gt;如果想让 &lt;code&gt;background-color&lt;/code&gt; 和&lt;code&gt;width&lt;/code&gt; 都受transition影响，我应该为&lt;code&gt;width&lt;/code&gt;显式的添加另一个 &lt;code&gt;transition&lt;/code&gt; 的条目：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#mainContent {&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#mainContent:hover {&lt;/span&gt;
    &lt;span class="nl"&gt;cursor:&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mo"&gt;000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;What About transition: all?&lt;/h6&gt;
&lt;p&gt;当使用transition时，不必指定每一个你关注的属性。可以 简单使用&lt;code&gt;all&lt;/code&gt; 属性值来代替： &lt;code&gt;transition: all .5s ease-in&lt;/code&gt;。 我不推荐使用这个，因为一些性能的影响。浏览器会监听所有的属性，而不是你指定的那几个属性。除非你必须需要这样做，我建议为transition指定每个单独CSS属性。&lt;/p&gt;
&lt;p&gt;使用animations，不必在声明时做任何事，只要在每个关键帧处指定属性值：
    keyframes imageSlide {
        0% {
            left: -150px;
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中，当关键帧触发时元素的 &lt;code&gt;height&lt;/code&gt; 和&lt;code&gt;background-color&lt;/code&gt; 会平缓的动画--即使在上一个关键帧处没有显式列出。&lt;/p&gt;
&lt;h2&gt;Interaction with JavaScript&lt;/h2&gt;
&lt;p&gt;在大多数情况下，使用transition和animation就已经足够了。你可以指定你想的开始值、结束值和任意中间状态值。你的动画只关注读取的这些值。当你想要预定义的效果，使用这些场景最好。有时候，你想通过一些额外的输入--如鼠标单击和一些计算的结果等来改变属性值。&lt;/p&gt;
&lt;p&gt;像这样的交互，在CSS中预定义的属性值会受一些限制。在这咱情况下，你可以选择使用JavaScript，如果完全使用JavaScript似乎有些极端。你应该使用混合的方式，在CSS声明中使用animation或transition，在其它方面使用JavaScript来操纵。&lt;/p&gt;
&lt;p&gt;当使用JavaScript来与animation与transition结合时，这没有冲突--你更应该使用transition。也可能使用animation与JavaScript结合...差不多就像挑战cinnamon challenge一样。使它们工作不是不可能，你更可能的是不去用它。出现这种原因的是transitions和animations工作原理的不同。&lt;/p&gt;
&lt;p&gt;animations它们已经做的很具体了。关键帧&lt;code&gt;@keyframes&lt;/code&gt;规则清晰的阐述了动画运行时的路径。通过JavaScript尝试改变animation动画，需要一系列复杂的步骤，包括修改&lt;code&gt;@keyframes&lt;/code&gt;关键帧。如果操纵过CSS内嵌的样式规则，你知道这是相当不直观的。&lt;/p&gt;
&lt;p&gt;与预定义好路径的animation形成鲜明对比的是transition。transition看起来并不是预定义这些东西。transition将是在监听一个属性发生变化时触发。完全通过使用CSS来改变这个属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#myElement {&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#myElement:hover {&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mo"&gt;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transition监听的CSS属性变化，可通过JavaScript的内联样式进行设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;querySelectr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#myElement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;333&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transition不关心监听的属性值改变的方式。只要属性值发生变化，transition将被执行。意思是，对于交互的场合，它不关心预定义的起始点和终止点，通过使用transition声明你可以做许多transition相关的有意思的事。可以使用JavaScript来指定想要transition的属性值。&lt;/p&gt;
&lt;p&gt;看一个我写的简单例子simple example：&lt;/p&gt;
&lt;iframe id="I1" scrolling="no" frameborder="0" style="width: 620px; height: 390px;" src="/demo/animation/move_to_click_position.html" name="I1" marginwidth="0" marginheight="0" border="0"&gt;&lt;/iframe&gt;

&lt;p&gt;单击灰色方框中的任意位置，使圆圈移动到该位置。Keep clicking around to see the circle keep moving。&lt;/p&gt;
&lt;p&gt;十分简单的动画原理。实际移动是transition处理的。元素想要移到的位置是由JavaScript设置的的 &lt;code&gt;top&lt;/code&gt;和&lt;code&gt;left&lt;/code&gt;。 因为transition监听着&lt;code&gt;top&lt;/code&gt; 和&lt;code&gt;left&lt;/code&gt; 两个属性的变化，它们的所有改变都会触发transition。最后的结果完全是你想要的。重要的是，你不必写任何关于移动处理的JavaScript代码。因为transition被声明在CSS中，浏览器进行深度优化，让它运行的更加平滑。&lt;/p&gt;
&lt;p&gt;Transition和JavaScript之间的友好结合完胜，但在写它们的时候就感觉不那么友好了。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;情况就是这样--大致上看看transitions和animations很相似，但又十分不同。选择使用其中的哪一个，我给出一般的方法就像这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If what I want requires the flexibility provided by having multiple keyframes and easy looping, then I go with an animation.==如果想让动画更多的灵活性，通过使用关键帧和简单的循环，那么我将使用animation。&lt;/li&gt;
&lt;li&gt;If I am looking for a simple from/to animation, I go with a transition.==如果想要一个简单从起始状态到终止状态的动画，选择transition。&lt;/li&gt;
&lt;li&gt;If I want to manipulate the property values that I wish to animate using JavaScript, I go with a transition.==如果想使用JavaScript来操纵动画的属性值，我将选择transition。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, with enough effort and JavaScript tomfoolery, you can neutralize any deficiences I list in deciding whether to use a transition or an animation. My recommendations are based on the common cases where you take a transition or animation mostly at face value. Herculean efforts to change their default behavior is admirable but often unnecessary.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 05 Dec 2013 20:58:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-05:posts/2013/css3-animations-vs-transitionsyi/</guid><category>animation</category></item><item><title>All About CSS Transitions（译）</title><link>http://stormhouse.github.io/posts/2013/all-about-css-transitionsyi/</link><description>&lt;p&gt;thanks &lt;a href="http://stormhouse.github.io/posts/2014/all-about-css-transitionsyi/"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;CSS中，当你改变一个属性的值，页面立即发生变化。示例，使元素CSS &lt;code&gt;hover&lt;/code&gt;状态时，改变&lt;code&gt;transform&lt;/code&gt;属性&lt;strong&gt;tranlate3d&lt;/strong&gt;函数一个不同的参数值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#box img {&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#box img:hover {&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;cursor:&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该值是将图片垂直向上平移350像素。看看这个实例，在下面例子中将鼠标悬停到&lt;a href="http://www.w3.org/html/logo/"&gt;HTML标志&lt;/a&gt;上：&lt;/p&gt;
&lt;iframe id="I2" border="0" frameborder="0" name="I2" scrolling="no" src="/demo/animation/no_transition_hover_example.html" style="width: 416px; height: 375px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;注意当你移到图片上会发生什么。当鼠标悬停上，图片发生了改变。这个变化不是平滑的。它是很突然的。立刻变成黑色背景的HTML标志，鼠标离开立刻变成黄色背景的标志。&lt;/p&gt;
&lt;p&gt;这里transition可以做一些漂亮的事。Transitions可以减慢属性中突然的变化。你可以指定属性改变所发生时间的长短。它可以让你使用不同种类的缓动函数来改变属性值。&lt;strong&gt;Transitions规定了动画属性值的变化方式&lt;/strong&gt;。
设置transition后，鼠标移到下面例子中的logo上：&lt;/p&gt;
&lt;iframe id="I3" border="0" frameborder="0" name="I3" scrolling="no" src="/demo/animation/transition_hover_example.html" style="width: 416px; height: 375px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;这一次，不是看图片立即的变化，还能看到图片中间位置。会看到图片的平缓的滑动。你看到了一个动画。如果你在logo未到达最后位置打断它，没有任何问题，图片平缓回到初始状态。这是不是很酷？&lt;/p&gt;
&lt;p&gt;在下一节，让我们继续这个令人兴奋的transition！&lt;/p&gt;
&lt;h2&gt;Adding a Transition&lt;/h2&gt;
&lt;p&gt;现在你对transition是什么及它的作用心知肚明，让我们开始使用它吧。接着，将下面的代码复制，粘贴到你新的HTML文档中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Language&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff, to, help, search, engines, not&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What this page is about.&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;An Interesting Title Goes Here&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;An Interesting Title Goes Here&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
body {
    background-color: #FFF;
    margin: 30px;
    margin-top: 10px;
}
#box {
    width: 350px;
    height: 350px;
    border: 5px black solid;
    overflow: hidden;
    background-color: #F2F2F2;
}
#box img {
    transform: translate3d(0, -350px, 0);
}
#box img:hover {
    transform: translate3d(0, 0px, 0);
    cursor: pointer;
}

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;700&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/html5_slider.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;350&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;预览这个文档，你将看到一个黄色的HTML logo。当你鼠标移上去，图片将立刻变成黑色背景的标志。这应当比较熟悉。与上几段中的没有transition的例子完全一样。&lt;/p&gt;
&lt;p&gt;我们要做的是添加CSS transition让图片改变更加平滑些。看下&lt;code&gt;#bog img&lt;/code&gt;的样式规则吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#box img {&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面仅有transform属性声明，添加如下高亮行的&lt;code&gt;transition&lt;/code&gt;声明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#box img {&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加了高亮行，再次在浏览器中预览你的文档。移图片上，会看到图片平缓的从一个位置移到另一位置。好了完事了。再接下来的几节中，我们详细看下添加的那行，学习你需要知道的更多关于transitions的内容。&lt;/p&gt;
&lt;h6&gt;What About the Vendor Prefixes?&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;属性还是比较新的，所以很多老版本浏览器需要加厂商前缀才能使之工作。不要堆满你的标记。这个例子使用&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free&lt;/a&gt; 库保证你精简的标记，能在老版本的浏览器中看到transition效果。&lt;/p&gt;
&lt;h2&gt;Looking at Transitions in Detail&lt;/h2&gt;
&lt;p&gt;现在这个例子是使用transition，让我们了解它的原理。看一下以前 &lt;a href="http://stormhouse.github.io/posts/2013/introduction-to-animation-in-htmlyi/"&gt;Introduction to Animation in HTML&lt;/a&gt; 教程中曾用过的图例吧，transition基本原理就是填充起始状态到终止状态过程中的插值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;起始状态，你设置想要过渡的CSS属性初始值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#box img {&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;终止状态时，是同一属性的最终值为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#box img:hover {&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;cursor:&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前面几次已经看到，一般是从起始状态突然跳动到终止状态。添加CSS transition后，通过你指定在transition中的时延和缓动函数(easing/timing function)，它是平缓的跳动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个典型CSS transistion定义了以下三个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The property to apply the transition to==想让transition生效于哪个的属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;How long the transition will last==transition持续多长时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;What kind of a timing function (aka easing function) to use==它使用哪种缓动函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上节中你看到添加的transistion，三个属性与它的完美映射...就像戴套一样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;上面你看到的是简写的&lt;code&gt;transition&lt;/code&gt;属性。作为简写的属性，它的值会精确映射到CSS 的全名称属性，因此我们来看看更详细的tansition相关属性。&lt;/p&gt;
&lt;h4&gt;Transition Property&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;的第一个属性值对应着&lt;code&gt;transition-property&lt;/code&gt;属性。它监听着你指定的CSS属性发生的变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;对于我们的例子中，&lt;code&gt;transform&lt;/code&gt;属性的任何变化都会监听到，并产生适当的动画过渡。根据需要，可指定你想要动画过渡的CSS其它属性。&lt;/p&gt;
&lt;h6&gt;Note: Animatable CSS Properties Only Please&lt;/h6&gt;
&lt;p&gt;一个注意的问题是你不能将所有的CSS属性指定给&lt;code&gt;transition-property&lt;/code&gt;。该属性必须可动画化的。听起来有点扫兴，但确实如此。大多数情况下，几乎所有的CSS属性都已是可动画的，并可指定给transition。&lt;/p&gt;
&lt;p&gt;你可访问&lt;a href="http://www.w3.org/TR/2009/WD-css3-transitions-20091201/#animatable-properties-"&gt;这里&lt;/a&gt;查看可动画的所有属性，以及&lt;a href="http://www.w3.org/TR/SVG/propidx.html"&gt;这里&lt;/a&gt;额外添加的属性。&lt;/p&gt;
&lt;p&gt;那么，如果不想限制transition监听单一属性的变化，不想单独管理每个属性，可以指定关键字all。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过设置all，任何CSS属性的变化都会被transition自动的监听。我一般不推荐使用该关键字，除非真的希望在其它所有属性上进行transition监听。浏览器要轮询所有属性，相比轮询指定的几个属性，会有轻微的性能影响。&lt;/p&gt;
&lt;h6&gt;Transition Duration&lt;/h6&gt;
&lt;p&gt;声明在transition中的第二个属性映射到&lt;code&gt;transition-duration&lt;/code&gt;属性。该属性指定了一个数值，transition运行的多长时间：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这是相当简单的一个例子。让动画过滤持续更长一段时间，可设置为较大的值。想持续时间短一些，就像这个例子中设置成&lt;strong&gt;.5&lt;/strong&gt;秒。&lt;/p&gt;
&lt;h6&gt;Transition Timing Function (Easing Function)&lt;/h6&gt;
&lt;p&gt;第三个属性值映射到 &lt;code&gt;transition-timing-function&lt;/code&gt; 属性，该值用于规定属性值从初始值到最终值的变化速率：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;速率变化一般定义为调速（timing，缓动）函数。默认，会按时间线性变化（平均速率）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这个结果看起来是transition既不加速也不减速。是恒定不变的。你可指定其它值来覆盖它的默认属性，会变得更有趣：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可选择适合你需求的缓动函数来覆盖默认属性。可供选择的缓动函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;cubic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bezier&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据你选择的函数，transition看起来它在加速、减速或两者的结合。我在&lt;a href="http://www.kirupa.com/html5/easing_functions_css3.htm"&gt;Easing Functions in CSS3&lt;/a&gt;讨论了它的更多细节，所去那边获取更多的信息吧。&lt;/p&gt;
&lt;h6&gt;One More Thing: Delaying the Transition&lt;/h6&gt;
&lt;p&gt;还没完呢。实际transition中还有很少用的第四个值，该值映射到&lt;code&gt;trasition-delay&lt;/code&gt;属性上：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;根据属性名称你能猜想到，时延决定了transition开始执行前需要等待多少时间。如果它干的事只是这个了话，真得是有点无聊...因为它很少用到。它的确还能做其它事情。根据该值的正负号，决定了它不同行为。&lt;/p&gt;
&lt;p&gt;先看一个正值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正值表示transition执行前等待的时间。这是你预期的。例如，上面的声明中，transition将等待0.1秒才开始执行。&lt;/p&gt;
&lt;p&gt;给一个负值的话，会有一点不同：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;-.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置一个负值，决定了你在transition过程中的哪个时间点开始执行。如果你的trasition是0.5秒，你的transition延时是-0.1秒，你的trasition将会在过程中间的0.1秒处开始执行。&lt;/p&gt;
&lt;p&gt;在一般情况下，很少看到设置transition延迟属性。考虑到它正负值所做的变化，当我真正确定要用它的情况下才能使用。&lt;/p&gt;
&lt;h2&gt;The Longhand Properties&lt;/h2&gt;
&lt;p&gt;上节中，我们只关注了&lt;code&gt;trasition&lt;/code&gt;的简写属性版本，那么看看它们如何映射到全名称CSS属性上吧。将简写声明表示为全名称属性如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体的它们，这四个transition相关的属性是 &lt;code&gt;transition-property&lt;/code&gt;，&lt;code&gt;transition-duration&lt;/code&gt;， &lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;transition-delay&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，使用简写版本与全名称相比，没有什么不同。产生的结果都是一样的，所以使用哪种取决于你自己。下节是我提供的一些建议。&lt;/p&gt;
&lt;h2&gt;Longhand Properties vs. Shorthand Properties&lt;/h2&gt;
&lt;p&gt;一般，我更喜欢简写的版本因为更紧凑。我唯一不使用简写属性的情况是在JavaScript中改变它的值。让我进一步说明吧。&lt;/p&gt;
&lt;p&gt;在CSS中，trasition声明成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当动画执行完成，修改transition的属性值。代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transitionDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.2s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如让上面代码执行，你认为trasition是什么样的呢。理论上，由于你修改了transition的持续时间为0.2秒，transition属性值实质上是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上是不合逻辑的。整个trasition完成后，设置了trasitionDduration属性。你只看到后来被设置的transitionDuration的值，原来的trasition的属性值已经没有了。完全消失了。     &lt;/p&gt;
&lt;p&gt;正确的处理方法是，重新设置一下&lt;code&gt;trasition&lt;/code&gt;的全部值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;transition: all &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;myDuration&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;s ease-in;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后拼接成的字符串，酷似在CSS中定义的声明值。对我来说，貌似有点尴尬。单独设置一个tansition值会让我将trasition所有值重新设置一遍：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我想用JavaScript修改时延，只需重写 &lt;code&gt;transition-duration&lt;/code&gt; 属性。我不用担心擦除已经存在的其它属性，再重新给它们设值。&lt;/p&gt;
&lt;h2&gt;Working with Multiple Transitions...and So On&lt;/h2&gt;
&lt;p&gt;最后一件事是讨论一下我先前提过的设置多个transitions，监听多个transition属性等等。让我们快速的看一下本节中常见的情况吧。&lt;/p&gt;
&lt;h4&gt;Multiple Transitions&lt;/h4&gt;
&lt;p&gt;声明多个transitions是很简单的。当你使用简写形式，使用逗号分隔它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用全名称形式，需要添加额外的值，只需分别将它们隔开：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这些值的数目不匹配，默认标准的CSS属性将会生效。&lt;/p&gt;
&lt;h4&gt;Listening to Multiple Properties&lt;/h4&gt;
&lt;p&gt;如果你想单独分开监听一些属性，就使用全名称版本把所有你想trasition的属性列到&lt;code&gt;transition-property&lt;/code&gt;上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你定义了三个分隔开的transitions，每个trasition都是0.5秒的时延和使用ease-out缓动函数。这应该很简单吧。&lt;/p&gt;
&lt;h2&gt;The transitionEnd Event&lt;/h2&gt;
&lt;p&gt;最后一件事（确实是最后了）我们将提到&lt;code&gt;transitionEnd&lt;/code&gt;事件。当一个transition 运行完成后，这些元素将会触发&lt;code&gt;transitionEnd&lt;/code&gt;事件。在这个事件里可以执行很多酷的事件，但是我不想在这里解释它。反而，在 &lt;a href="http://www.kirupa.com/html5/the_transitionend_event.htm"&gt;transitionEnd Event&lt;/a&gt; （未译） 的教程中会涉及更多的酷的内容细节。&lt;/p&gt;
&lt;p&gt;是不是所有的这些都有趣？一个是让我们如此简单的使用transitions。为我使用它们你不用改变你现有的行为。大部分时间，你将在动画运行或用户交互时使用代码来控制这些CSS属性。transition简单的在普通的改变中插入让你的动画属性发生改变。难怪外星人感到惊讶。&lt;/p&gt;
&lt;p&gt;不管怎样，这里你仅是看到了关于transitions的浅显的内容。下的一些文章还你挖掘更深的层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/css3_animations_vs_transitions.htm"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/the_transitionend_event.htm"&gt;The transitionEnd Event&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/looping_a_css_transition.htm"&gt;Looping a CSS Transition&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/animating_movement_smoothly_using_css.htm"&gt;Animating Movement Smoothly using CSS&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/animating_many_elements_using_transitions.htm"&gt;Animating Many Elements Using Transitions&lt;/a&gt; （未译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 02 Dec 2013 11:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-02:posts/2013/all-about-css-transitionsyi/</guid><category>animation</category></item><item><title>All About CSS Animations（译）</title><link>http://stormhouse.github.io/posts/2013/all-about-css-animationsyi/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/all_about_css_animations.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在HTML中动画实现的三种的方式之一是众所周知&lt;strong&gt;CSS animations&lt;/strong&gt;。CSS animations是非常简单的。你能通过控制动画CSS属性来影响元素。它可以让你做出很酷的事比如元素移动、元素淡入淡出、改变元素颜色。&lt;/p&gt;
&lt;p&gt;首先让我们看一个例子，让下面的云彩缓慢的上下飘动：&lt;/p&gt;
&lt;iframe id="I1" border="0" frameborder="0" name="I1" scrolling="no" src="/demo/animation/bouncing_clouds2.html" style="width: 623px; height: 330px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;在本篇中，你将学习所有CSS animations，不仅仅是让云朵移动，还有其它更酷更有用的事情。你将会学习通过&lt;code&gt;animation&lt;/code&gt;属性怎样定义一个CSS动画，怎么添加关键帧，以及如果调整各种动画相关的属性，这才是你所想要的。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Creating a Simple Animation&lt;/h3&gt;
&lt;p&gt;学习动画最简单的的方式，就是亲自动手实验， 然后再学习它的工作机制。那么来创建一个HTML文档，写HTML和CSS代码吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Bouncing Clouds&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/js/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
#mainContent {
    background-color: #A2BFCE;
    border-radius: 4px;
    padding: 10px;
    width: 600px;
    height: 300px;
    overflow: hidden;
}
.cloud {
    position: absolute;
}
#bigcloud {
    margin-left: 100px;
    margin-top: 15px;
}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainContent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bigcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;154&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/bigCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;238&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果预览上面代码，和刚才那个例子对比，这是一个不令人兴奋的版本。你所看到的是单一的、静止不动的云朵：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;让我们来继续添加&lt;code&gt;animation&lt;/code&gt;属性来改变这无趣的状态吧。添加CSS animation只有两步，第一步设置&lt;code&gt;animation&lt;/code&gt;属性，第二步精确的定义动画的关键帧。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;#bigcloud&lt;/code&gt;上添加以下高亮行的属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#bigcloud {&lt;/span&gt;
    &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面高亮的那行的细节是什么现在并不重要，稍后我们再来关注它。让我们先添加关键帧。添加&lt;code&gt;@keyframes&lt;/code&gt;样式属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加了这条样式的属性，刷新一下页面看看吧。你应该看到云朵欢快的上下跳动，沉浸在它自己的世界中。瓦哦。&lt;/p&gt;
&lt;h4&gt;What Just Happened&lt;/h4&gt;
&lt;p&gt;刚才你添加CSS属性是使云朵上下的跳动。CSS animation是如这么的简单啊。它能让你指定元素想要动画的起止状态，中间任意状态（即关键帧）和终止状态。我们云朵移动是非常简单的，所以学习这个动画实现是个很好的起点。&lt;/p&gt;
&lt;p&gt;我们将着眼于第一件事就是&lt;code&gt;animation&lt;/code&gt;属性本身：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;属性的职责是设置动画的本身。 你使用它的简写形式，你将声明三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The name of your animation：动画（帧）的名字&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The duration：持续时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The number of times your animation will loop：动画迭代的次数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;声明是不同的。我们这里将名字起为bobble，动画持续时间2秒，这里设置迭代的次数是无数次。&lt;/p&gt;
&lt;h6&gt;What About the Vendor Prefixes?&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;属性还是比较新的，所以一些浏览器需要添加私有的前缀才能使之工作。不要将各种浏览器前缀的属性全都堆上去。而是使用类似&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free库&lt;/a&gt; (未译)，就像这个例子一样，同时能运行在你的旧的浏览器（需要私有前缀版本的浏览器）中。&lt;/p&gt;
&lt;p&gt;正如你看到的，&lt;code&gt;animation&lt;/code&gt;声明没有包含更多的动画细节。它设置动画的更高面东西，而一个CSS animation的详细内容，是定义在&lt;code&gt;@keyframes&lt;/code&gt;规则里。
Let's look at our @keyframes rule to learn more:==让我们来看看我们的&lt;code&gt;@keyframes&lt;/code&gt;规则，深入学习：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先，看下&lt;code&gt;@keyframes&lt;/code&gt;属性。在外层包含&lt;code&gt;@keyframes&lt;/code&gt;声明的名字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在内层，它包含样式规则（即实际的关键帧），使用百分比或&lt;code&gt;from&lt;/code&gt;和&lt;code&gt;to&lt;/code&gt;关键字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你所期望的几乎就是这些关键帧样式规则。他们只包含CSS属性，如&lt;code&gt;transform&lt;/code&gt;和&lt;code&gt;animation-timing-function&lt;/code&gt;，当动画到该关键帧时，会应用该帧的属性值。我们不久会回到这个问题，因为你需要知道有一个重要的细节-----关键帧样式规则。&lt;/p&gt;
&lt;h6&gt;The Name&lt;/h6&gt;
&lt;p&gt;那么，我刚才解释的那部分，是很好理解的。这儿有些事情会变得有点混乱。 尽管，在&lt;code&gt;anaimation&lt;/code&gt;规则中定义动画属性，又另一个样式&lt;code&gt;@keyframes&lt;/code&gt;规则中声明你的关键帧，他们非常绑定十分紧密。如果它不是那么复杂和凌乱，这将是非常优美的。但我们的工作，就是解开这个烂摊子，弄清楚到底是怎么回事，并最终能够以更复杂的方式创建动画。&lt;/p&gt;
&lt;p&gt;命名为&lt;code&gt;bobble&lt;/code&gt;的关键帧&lt;code&gt;@keyframes&lt;/code&gt;规则来标识关键帧的行为，并用作&lt;code&gt;animation&lt;/code&gt;的属性值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@keyframes&lt;/code&gt; 规则名字也是&lt;strong&gt;bobble&lt;/strong&gt;，这并不是说&lt;code&gt;animation&lt;/code&gt;属性指向&lt;strong&gt;bobble&lt;/strong&gt;是一个巧合。如果这两个名称不一致，你的动画将无法正常工作。&lt;/p&gt;
&lt;h6&gt;Duration and the Keyframes&lt;/h6&gt;
&lt;p&gt;上一节内容你学到了&lt;code&gt;animation&lt;/code&gt;的关键帧属性。解决了这个难题。更大的难题是，动画的持续时间，及某个特定关键帧样式实际触发的时间。&lt;/p&gt;
&lt;p&gt;你该记得，当你在&lt;code&gt;@keyframes&lt;/code&gt;中定义关键帧样式，你设置的不是一个真实的值。它是一个百分比或是&lt;code&gt;from&lt;/code&gt;/&lt;code&gt;to&lt;/code&gt;关键字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在我们的例子中，关键帧选择的百分比值是0％，50％和100％。它们表示的是已完成动画的百分比。当你的动画刚刚开始时，你已经完成了动画的0％。 0％关键帧将被触发。当你的动画执行一半了，50％的关键帧得到触发。在动画的最后，100％的关键帧将被触发。&lt;/p&gt;
&lt;h6&gt;About the &lt;code&gt;from&lt;/code&gt; / &lt;code&gt;to&lt;/code&gt; Selector&lt;/h6&gt;
&lt;p&gt;在选择器中，你可以使用等效的关键字&lt;code&gt;from&lt;/code&gt;，来代替0％；使用&lt;code&gt;to&lt;/code&gt;关键字代替100％。我不知道为什么有人想到会用它，但它确实存在，在实际编码中最好将它抛开。&lt;/p&gt;
&lt;p&gt;在此章节中，我不太愿意使用&lt;code&gt;from&lt;/code&gt;/&lt;code&gt;to&lt;/code&gt;关键字。使用该关键字，就被固定死了，对以后的扩展更不通用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;上的属性持续时间是描述整个动画的时间，除非你设置动画运行的总时间， 该值用来标识随时间进行的精确百分比（关键帧）。那么，动画就正常结束。&lt;/p&gt;
&lt;p&gt;下图的百分比是映射2秒动画时间单位上的具体时间值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这部分对我来说是复杂。一旦你理解&lt;code&gt;duration&lt;/code&gt;是怎样映射的划分的关键帧，你将在理解动画这块儿跨越的一个重要障碍。&lt;/p&gt;
&lt;p&gt;无论如何，我想我们已经看到一个简单动画原理的足够细节。你学会了怎样使用&lt;code&gt;animation&lt;/code&gt;声明一个动画，和添加&lt;code&gt;@keyframes&lt;/code&gt;规则。 我们也花了一些时间来了解它们组合 一起的产生效果。&lt;/p&gt;
&lt;p&gt;不过，还没有做完。还有涉及更多更详细，休息一下，然后看看这个&lt;a href="http://theoatmeal.com/quiz/facebook_addict"&gt;How Addicted To Facebook You Are quiz&lt;/a&gt;。在看到你的结果后轻轻地抽泣了几分钟，你会在一个的完美状态，以了解更多关于CSS animation！&lt;/p&gt;
&lt;h3&gt;Detailed Look at the CSS Animation Property&lt;/h3&gt;
&lt;p&gt;刚才我们看到，&lt;code&gt;animation&lt;/code&gt;属性包含了更多的属性。现在，你涉足创建一个动画，让我们做一些令人乏味事，学习animation所有的属性。为了更好的学习它，首先扩展它的简写，看看它具体的形式。我们简写形式看起来像下面一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它的全名称是下面这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面简写的形式扩展为三个属性&lt;code&gt;animation-name&lt;/code&gt;， &lt;code&gt;animation-duration&lt;/code&gt;和&lt;code&gt;animation-iteration-count&lt;/code&gt;。这些属性现在深印到你的脑海中了吧，让我们继续看一下我们没有用过的属性比如：&lt;code&gt;animation-play-state&lt;/code&gt;, &lt;code&gt;animation-delay&lt;/code&gt;, &lt;code&gt;animation-direction&lt;/code&gt;, &lt;code&gt;animation-fill-mode&lt;/code&gt;, 和 &lt;code&gt;animation-timing-function&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h4&gt;Pausing and Resuming an Animation&lt;/h4&gt;
&lt;p&gt;默认，你的动画开始第一次时，&lt;code&gt;animation&lt;/code&gt;属性就被激活。在我们简单的例子中，意味着页面被加载时激活。首先，我们简单想象它被设置成2秒无限循环的动画：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;每个黄色矩形表示动画的一次迭代。如果你把动画并排的每次迭代中，你就会得到看起来像我上面所示的那样。&lt;/p&gt;
&lt;p&gt;一旦动画开始，在它结束之前永远不会停止。如果你的动画设置为循环，终止状态完成后，它会从起止状态继续执行。它是每次迭代表示为一个单独黄色矩形的循环。我们目前bobble动画是就是这样的。&lt;/p&gt;
&lt;p&gt;有时候，你可能 不想要上面那种行为。如果你希望你的动画暂停，不让动画初始状态属性被激活，你可以用动画&lt;code&gt;animation-play-state&lt;/code&gt;属性。这个属性允许你在播放运行时的&lt;strong&gt;暂停&lt;/strong&gt;或&lt;strong&gt;播放&lt;/strong&gt;的切换。&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;animation-play-state&lt;/code&gt;属性设置为&lt;strong&gt;running&lt;/strong&gt;。你可以将该值设置为&lt;strong&gt;paused&lt;/strong&gt;，停止在运行的过程中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当动画暂停时，它保留动画运行最后时刻的计算值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;它停在那儿几乎不动，你可以通过设置它的&lt;code&gt;animation-play-state&lt;/code&gt;属性值为&lt;strong&gt;running&lt;/strong&gt;.来恢复运行。在恢复运行之前，它不会突然从起止状态重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;就像你预期的一样，动画从当前状态平滑的运行，就像媒体播放器的播放和暂停功能一样。&lt;/p&gt;
&lt;h4&gt;Delaying and Offsetting the Animation&lt;/h4&gt;
&lt;p&gt;如果你希望你的动画不是立即播放，而是经过一段时间后播放，你应当使用&lt;code&gt;animation-delay&lt;/code&gt;属性。此属性允许你经过指定的时间秒数后，动画才开始运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;延迟不是等5秒之后0%关键帧被触发。它是第一次迭代的0%关键帧被触发：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;一旦你的动画开始运行时，延迟值就没有用武之地了。以后每一次迭代的动画（如果有的话）一个接一个无间隔的运行。&lt;/p&gt;
&lt;p&gt;现在你可以给这个属性赋其他的值，你可以给&lt;code&gt;animation-delay&lt;/code&gt;设置负值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;.25&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你设置了一个负值，你的动画会在超前执行你设置的那个值。设置&lt;code&gt;animation-delay&lt;/code&gt;-.25秒就是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;负值作为一个标识，告诉浏览器这是一个偏移而不是延时。是的，这有点奇怪，因为它给的属性名是&lt;code&gt;animation-delay&lt;/code&gt;，我只是个传教者。还有更奇怪的呢，一旦你设置这个负值大于每一次动画迭代的时延，这是没问题的。只要保证有足够的迭代数，无论落在哪次迭代点动画就开始。如果你没有足够的迭代数来抵消那个负值，你的动画根本无法运行。&lt;/p&gt;
&lt;h4&gt;Hold My Keyframe Properties, Please!&lt;/h4&gt;
&lt;p&gt;如果你不设置动画循环，你会发现，一旦动画结束后，关键帧设置任何属性将被清除，元素返回到一个动画起止状态。这是因为&lt;strong&gt;关键帧应用于的属性是瞬时的&lt;/strong&gt;。当关键帧是激活状态时，它们才存在，在以外任何时间，这些属性值都不能存在。如果你不想要这种行为，当它运行完毕，你的动画看起来像突然跳到开始位置或突然复位，让我们来看看这两种情况的区别，然后看看如何更改默认行为。&lt;/p&gt;
&lt;h6&gt;Waiting to Start&lt;/h6&gt;
&lt;p&gt;第一个用例是当你设置了&lt;code&gt;animation-delay&lt;/code&gt;属性。例如，设置了5s：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画需等待5秒才开始执行，此时关键帧没有被执行。在等待时间中，第一个关键帧的所有属性都不会生效。&lt;/p&gt;
&lt;h6&gt;Animation is Done&lt;/h6&gt;
&lt;p&gt;第二个例子，当你的动画完成后。该例子是你设置循环3次的那个示例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-9.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;3次迭代完成后，最后关键帧的所有属性都会消失。动画回到原始状态就像什么也没有发生过一样。&lt;/p&gt;
&lt;h6&gt;Meet animation-fill-mode&lt;/h6&gt;
&lt;p&gt;如果你想在等待延时过程中，想让第一侦生效，或当动画完成后，保留最后一侦，你可以设置&lt;code&gt;animation-fill-mode&lt;/code&gt;属性。属性值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;none
There is no faking the property values here. If you want the a keyframe's property values to apply, your keyframe must be active.默认值，不设置动画之外的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;forwards
After your animation has run to completion, any property values the animation had at the end will be maintained.当你的动画完成后，保持动画结束时的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;backwards
The animation will apply the property values from the starting keyframe even if that keyframe is not active yet.动画将保持开始关键帧的属性值，虽然它未处于激活状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;both
This is the ultimate solution. Your animation will apply the property values of the first keyframe at the beginning and maintain the property values of the last keyframe at the end.最后的一个值。你的动画在停在起止状态时，第一帧被应用，终止状态最后一帧被激活。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚才我创建的是无限迭代和开始时没有延时的动画。我创建的许多动画的属性在开始帧、结束帧、无动画状态的动画元素之间没有太多的不同。正因为如此，我从不会熬夜担忧，也不会因为不想用&lt;code&gt;animation-fill-mode&lt;/code&gt;的属性而感到担忧。&lt;/p&gt;
&lt;h4&gt;Reversing an Animation (or Alternating Directions)&lt;/h4&gt;
&lt;p&gt;现在，让我们看一下这个略微奇幻的属性，动画默认从0%到100%循序播放。你可以通过给&lt;code&gt;animation-direction&lt;/code&gt;&lt;strong&gt;设置normal&lt;/strong&gt;, &lt;strong&gt;reverse&lt;/strong&gt;, &lt;strong&gt;alternate&lt;/strong&gt;,  &lt;strong&gt;alternate-reverse&lt;/strong&gt;来 改变这个行为，  &lt;strong&gt;normal&lt;/strong&gt; 和 &lt;strong&gt;reverse能够直接指出他们做什么&lt;/strong&gt;，让我们来看一些比较有意思的属性值：&lt;strong&gt;alternate&lt;/strong&gt; 和 &lt;strong&gt;alternate-reverse&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;当设置&lt;code&gt;animation-direction&lt;/code&gt; 属性值为&lt;strong&gt;alternate-reverse&lt;/strong&gt;，动画正常开始。在第二次迭代时，它反向运行，以后会正向，反向交替着运行：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;animation-direction&lt;/code&gt;属性值为 &lt;strong&gt;alternate&lt;/strong&gt; 与上面十分相似，但有点细微的不同：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画开始于反向运行，然后正向，反向交替 运行。&lt;/p&gt;
&lt;h4&gt;At Easing, Soldier!&lt;/h4&gt;
&lt;p&gt;涉及到的最后一个有关联的动画属性是&lt;code&gt;animation-timing-function&lt;/code&gt;. 它的功能是在开始和结束之间指定如何改变属性值。在 [Easing Functions in CSS3][]（未译） 的教程中有更多缓动函数的细节， 所以去那边详细学习吧。&lt;/p&gt;
&lt;h4&gt;The Animation Shorthand&lt;/h4&gt;
&lt;p&gt;我们看下已经学过的animation属性的简写方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;somethingSomethingDarkSide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deathstar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有些人可能更喜欢使用所有的属性简写到&lt;code&gt;animation&lt;/code&gt;属性中。事实上，正如你看到的，bobble动画就是使用的简写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你上面看到的所有的全称属性都可表示为简单写的形式---只是好记而已。如果你对此疑惑，下面是他们的映射顺序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;尖括号中的部分来代替全称属性名。注意，简写属性中没法表示&lt;code&gt;animation-play-state&lt;/code&gt;。你必须使用全称属性名及值也表示它。&lt;/p&gt;
&lt;p&gt;无论怎么写，将一般写法写成简写形式，都会像下面一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#somethingSomethingDarkSide {&lt;/span&gt;
    &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;deathstar&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简写的形式比全称写法紧凑吧？对的！它更容易理解吗？这是一个很难回答的一个问题，完全基于你(或你的团队)的偏好。&lt;/p&gt;
&lt;p&gt;我一般比较喜欢使用&lt;code&gt;animation-name&lt;/code&gt;, &lt;code&gt;animation-duration&lt;/code&gt;和&lt;code&gt;animation-timing-function&lt;/code&gt; 的简写版本，是因为很容易记住它。一旦超过这三个属性后，我就不得不去查阅文档添加哪一个了。&lt;/p&gt;
&lt;p&gt;你们的分歧可能是在全称与简单属性上，所以不管卡怎样选择一个适合你的。呃...以你的聪明头脑，是时候告别&lt;code&gt;animation&lt;/code&gt; 属性的内容了，来关注动画世界中其它的美妙的旅程吧。&lt;/p&gt;
&lt;h3&gt;Looking at the Keyframes&lt;/h3&gt;
&lt;p&gt;迄今为止,大部分时间花在动画&lt;code&gt;animation&lt;/code&gt;和它怎样影响你的整体部分…动画。一个CSS动画真正的角色是关键帧，所以让我们更多的关注在这一节。&lt;/p&gt;
&lt;p&gt;再次看一下bobble关键帧们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;早先提到的一个关键帧十分像一个属性样式。把CSS属性放进去，当这些关键帧被触发时，这些属性被执行。注意的是，并不是所有的属性都可应用于关键帧中，只有&lt;strong&gt;可动画的CSS 属性&lt;/strong&gt;和&lt;strong&gt;animation-timing-function&lt;/strong&gt;才能被指定。&lt;/p&gt;
&lt;p&gt;这不一定是个坏消息，我完全确定你所有放到关键帧中属性列表中的属性都是可进行动画化的。你访问&lt;a href="http://www.w3.org/TR/2009/WD-css3-transitions-20091201/#animatable-properties-"&gt;这里&lt;/a&gt;就能看到所的可动画的属性完整列表，以及&lt;a href="http://www.w3.org/TR/SVG/propidx.html"&gt;这里&lt;/a&gt;是一些额外的属性。&lt;/p&gt;
&lt;p&gt;最后，看一下可以指定到关键帧中的 &lt;code&gt;animation-timing-function&lt;/code&gt; 属性，这个属性影响着从当前帧怎样过滤到下一关键帧。拿我们例子说，在0%关键帧，我们设置&lt;code&gt;animation-timing-function&lt;/code&gt; 属性值为ease-in：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你的动画从0%关键帧到50%关键帧滚动时缓动函数被激活。同样的，动画从50%关键帧到100%关键帧滚动时50%处的关键帧被激活。从当前帧到下一帧过程中给定的缓动函数被激活，在100%关键帧声明一个调速函数没有太多意义。&lt;/p&gt;
&lt;h3&gt;Reusing Keyframes&lt;/h3&gt;
&lt;p&gt;最后要讲的，是另一个动画声明复用同一个关键帧定义。我有点担忧过早将&lt;code&gt;animation&lt;/code&gt;属性和&lt;code&gt;@keyframes&lt;/code&gt;规则分离开，这样做起来有点小笨重。即使再笨重的东西，如果你付出更多努力，这儿会有一些漂亮的事情做。&lt;/p&gt;
&lt;p&gt;一个是声明另一个&lt;code&gt;animation&lt;/code&gt;属性时可以使用同一个关键帧定义。也许很难明白我的意思，让我们扩展当前的例子来强调我在说什么。&lt;/p&gt;
&lt;p&gt;在当前的HTML文档中包括一个弹跳云朵，继续添加下面的高亮行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Bouncing Clouds&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/js/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
#mainContent {
    background-color: #A2BFCE;
    border-radius: 4px;
    padding: 10px;
    width: 600px;
    height: 300px;
    overflow: hidden;
}
.cloud {
    position: absolute;
}
#bigcloud {
    animation: bobble 2s infinite;
    margin-left: 100px;
    margin-top: 15px;
}
#smallcloud {
    animation: bobble 4s infinite;
    margin-top: 65px;
    margin-left: 200px;
}
@keyframes bobble {
    0% {
    transform: translate3d(50px, 40px, 0px);
    animation-timing-function: ease-in;
    }
    50% {
    transform: translate3d(50px, 50px, 0px);
    animation-timing-function: ease-out;
    }
    100% {
    transform: translate3d(50px, 40px, 0px);
    }
}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainContent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bigcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;154&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/bigCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;238&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;smallcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;103&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/smallCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;158&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加高亮&lt;code&gt;#smallCloud&lt;/code&gt;样式和第二个&lt;code&gt;img&lt;/code&gt;元素后，重新预览一下页面。如果没其它错误的话，你将看到两块云朵愉快的跳动...就是本文最开始的那个例子一样。&lt;/p&gt;
&lt;p&gt;现在你的例子能运行了，看一下是如何做到的。窍门就是&lt;code&gt;#smallCloud&lt;/code&gt;样式的中&lt;code&gt;animation&lt;/code&gt;声明行。
    #smallcloud {
        animation: bobble 4s infinite;
        margin-top: 65px;
        margin-left: 200px;
    }&lt;/p&gt;
&lt;p&gt;注意这里引用同一个&lt;code&gt;@keyframes&lt;/code&gt;规则名称为bobble。和&lt;code&gt;#bigClound&lt;/code&gt;样式唯一不同的是&lt;code&gt;animation&lt;/code&gt;声明中的时延。小的云朵中&lt;code&gt;animation&lt;/code&gt;时延设置成4秒---比大的云朵设置时延长两倍:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#bigcloud {&lt;/span&gt;
    &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两个云朵中定义的bobble关键帧有什么意思呢。唯一不同是一个动画在2秒中执行完那些关键帧，另一个是4秒：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140101-12.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;animation&lt;/code&gt;和&lt;code&gt;keyframes&lt;/code&gt;声明分离开来，可以做这上面的事。&lt;code&gt;animation&lt;/code&gt;中的任何属性的改变都会影响到关键帧这一水平--就像这儿你看到的时延。刚才我解释的每个&lt;code&gt;animation&lt;/code&gt;属性的设置，不用直接涉及关键帧部分，就会改变关键帧的行为。&lt;/p&gt;
&lt;p&gt;You have to admit, that is pretty cool.&lt;/p&gt;
&lt;h3&gt;Declaring Multiple Animations&lt;/h3&gt;
&lt;p&gt;最后要讲的（好吧，真的最后一次），快速看一下怎样在同一个&lt;code&gt;animation&lt;/code&gt; 属性中声明多个动画。简写形式，用逗号隔开每个动画定义，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#oppaGangnamStyle {&lt;/span&gt;
    &lt;span class="nl"&gt;animation:&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sexy&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lady&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意上面每一个动画定义指向不同的&lt;code&gt;@keyframes&lt;/code&gt;。不管怎样，如果在同一个&lt;code&gt;animation&lt;/code&gt;属性声明中指向同一个&lt;code&gt;@keyframes&lt;/code&gt;关键帧，根据CSS优先顺序，最后一个将被生效。&lt;/p&gt;
&lt;p&gt;属性名全称形式，看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#oppaGangnamStyle {&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sexy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lady&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次，应该是比较简单的。都是使用逗号隔开的，如果在为一个属性使用多个值有疑惑时，仅仅使用逗号就可解决。&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;我们已经了解到CSS中&lt;code&gt;animation&lt;/code&gt;属性很多的内容---特别是想让你的内容更加活泼。你已经学习了动画的基本内容，继续学习下面教程吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[All About CSS Transitions][] （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/css3_animations_vs_transitions.htm"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/getting_jittery_on_hover_using_only_css.htm"&gt;Getting Jittery on Hover&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/slide_bounce_image_on_hover.htm"&gt;Slide and Bounce an Image on Hover&lt;/a&gt; （未译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sun, 01 Dec 2013 15:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-01:posts/2013/all-about-css-animationsyi/</guid><category>animation</category></item><item><title>Introduction to Animation in HTML（译）</title><link>http://stormhouse.github.io/posts/2013/introduction-to-animation-in-htmlyi/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/introduction_to_animation_html.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;也许你们认为动画是电影和计算机中的近代产物，实际上人类在很久很久以前就开始鼓捣它并作为沟通的方式了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;[ a sequence of pictures from 3000 BC (wikipedia) ]&lt;/p&gt;
&lt;p&gt;这些动画方式追溯到古代的洞穴壁画，直到现代的精密的机械，正如你现在看到的电视、电脑和手机。今天，生活中几乎在所有的设备屏幕上单击、摇一摇(tap)或按键就可以让它动起来：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画已不仅仅是壁画中的事物了，而主要在游戏、intros、卡通，横幅广告领域。 它已经根深蒂固于我们用户体验中，它可让你的应用操作简单；可以使你的内容更加漂亮；可以使你的作品更加生动有趣。谁不希望这样啊？&lt;/p&gt;
&lt;p&gt;至此你有足够的背景认识。不用去关心它的历史或被信服动画为什么这么有用。可能你已经认识到动画的重要性。如果你想知道如何来实现这些动画，那么你来对地方了。本篇入门教程以及后面的文章，你将学习html中的动画。短期内，你将成为动画的高手， 或至少在屏幕上完成一个动画。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h3&gt;What Is An Animation?&lt;/h3&gt;
&lt;p&gt;在我们继续进行之前，确定从哪开始学以及怎样创建动画，退一步讲，就是弄清动画是什么。我开始于一个大致轮廓。在最基础层面上，&lt;strong&gt;动画是一个视觉的变动&lt;/strong&gt;---即经过一段时间后的变化。&lt;/p&gt;
&lt;p&gt;让我们看下更详细内容。&lt;/p&gt;
&lt;h6&gt;The Start and End States&lt;/h6&gt;
&lt;p&gt;如果说视觉变动是动画很重要的一部分，那么我们需要创建其它参考 因素来对比发生了什么变化。让我们暂称这些参考因素为起始状态和终止状态。为了更好的解释是怎么回事，让我们举出一个简单的例子来。&lt;/p&gt;
&lt;p&gt;起始状态如下这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;开始是一个灰色的沉默的具有讽刺意义的笑脸。最终，你的笑脸是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;基于我们在起始和终止状态的笑脸信息，你能说出有什么不同吗？&lt;/p&gt;
&lt;p&gt;一个变化是它的位置。笑脸开始从屏幕的左边，结束时移到了右边。另一个变化是它的颜色。从开始的灰色变成了愉悦的黄色。最后一个变化是它的角度。它从起始到终止状态顺时针转动了90度。&lt;/p&gt;
&lt;p&gt;怎样使它动起来呢？如果我们仅仅是重复起始和终止的状态，那么看起来它是不停的从左到右的跳动。这是非常糟糕的，太糟糕了。 我们需要的是可观的一系列中间的&lt;strong&gt;插值&lt;/strong&gt;（中间状态），来实现从起始到终止状态的平滑转变。&lt;/p&gt;
&lt;h6&gt;Interpolation&lt;/h6&gt;
&lt;p&gt;现在，我们所看到的是两个分离的状态。开始时，处于起始状态，结束时，处于终止状态。如果你要这样重复玩个来回，这不是一个动画。为了制作这个动画，需要创建中间（每一个即时状态）状态来完成一个平稳的过渡。创建这些中间状态称之为&lt;strong&gt;插量法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这些插值，发生在&lt;strong&gt;一段指定的时间内&lt;/strong&gt;，看起来就像下图这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可能想知道谁来规定这些插值状态。答案是：你的浏览器或HTML渲染引擎为你处理这些复杂的细节，这个看起来是个不错的消息，你所做的就是定义起始状态、终止状态和两个状态切换发生的的时间。一旦你有了这三个货，你就有了一个动画。&lt;/p&gt;
&lt;p&gt;You will later see how adding some other ingredients into the pot such as timing functions (easing functions) can alter how the interpolation works, but we'll get there later. For now, just revel in this simplified generalization of what makes up an animation, put on your best party clothes, and get ready to meet the three flavors of animation that you will end up using.&lt;/p&gt;
&lt;h3&gt;Animations in HTML&lt;/h3&gt;
&lt;p&gt;在HTML中不仅用单一的方式实现。实际上你有三种实现方式供来选择，每一种来完成特定的任务。让我们快速浏览一下，看它如何与上一节定义的动画相联系。&lt;/p&gt;
&lt;h6&gt;1. CSS Animations (aka Keyframe Animations)&lt;/h6&gt;
&lt;p&gt;CSS Animations是比较传统的动画实现，它可在某些性能方式让人刮目相看。这类动画，你不仅可定义起始终止状态，还能定义中间状态的关键帧：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;如果你使用这些中间状态关键帧，你可以获取更大的动画控制权。在上面的例子里，蓝色圆形不是简单的从左侧滑动到右侧，并慢慢变大。如果你是简单的插入起始状态和终止状态，那么你是无法看到关键帧在动画过程中是如何调整圆形大小和水平位置的。&lt;/p&gt;
&lt;p&gt;注意，你指定中间状态的关键帧，浏览器会在关键帧之间插入中间状态的。想象一下，由许多小的动画连接起来的动画链。&lt;/p&gt;
&lt;h6&gt;2. CSS Transitions&lt;/h6&gt;
&lt;p&gt;Transitions只定义的起始状态，终止状态和时延。浏览器会自处理其余的中间状态：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;虽然transitions是简单帧动画，就像下落的水滴，不要被这小伎俩欺骗。他们是非常强大的并且在我做的项目是我最喜欢用到的动画技术。很快你就看到它更强大的功能了。&lt;/p&gt;
&lt;h6&gt;3. Scripted / JavaScript Animations&lt;/h6&gt;
&lt;p&gt;如果你想完全控制起始到终止状态的动画，你可以使用JavaScript：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;当你不用浏览器为你插补那些中间状态，那么会有很多酷的事要做。更详细的请看JavaScript动画教程。&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;好吧，在本篇中，我大致讲到大部分动画的内容。如果你感觉头大，不用怕--一旦我们展开基本概念时，就易于理解了。那么，休息一下，你可以点击下面教程链接进一步学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animationsyi/"&gt;Creating a Simple CSS Animation&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2014/all-about-css-transitionsyi/"&gt;Looking at CSS3 Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;[CSS3: Animations vs. Transitions][13] （未翻译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/animating_with_requestAnimationFrame.htm"&gt;Animating with requestAnimationFrame&lt;/a&gt; （未翻译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 29 Nov 2013 22:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-29:posts/2013/introduction-to-animation-in-htmlyi/</guid><category>animation</category></item><item><title>Animation（转）</title><link>http://stormhouse.github.io/posts/2013/animationzhuan/</link><description>&lt;hr /&gt;
&lt;p&gt;Animation翻译系列文章&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Tutorials, videos, and &lt;a href="http://www.kirupa.com/book/animation_in_html_css_and_javascript.htm"&gt;even a book&lt;/a&gt; to help you learn how to create great animations in HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;The Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/introduction-to-animation-in-htmlyi/"&gt;Introduction to Animation in HTML&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=9dwGgUe578k"&gt;Dealing with Vendor Prefixes in CSS and JavaScript&lt;/a&gt;&lt;a href="http://pan.baidu.com/s/1eQqVXoY"&gt; （墙内云盘分享）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CSS Animations and Transitions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animationsyi/"&gt;All About CSS Animations&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitionsyi/"&gt;All About CSS Transitions&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/css3-animations-vs-transitionsyi/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/easing-functions-in-css3yi/"&gt;Easing Functions in CSS3&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/animating_movement_smoothly_using_css.htm"&gt;Animating Movement Smoothly Using CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/css_animation_events.htm"&gt;The CSS Animation Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/the_transitionend_event.htm"&gt;The transitionEnd Event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/get_the_value_of_css_properties_as_they_are_animating.htm"&gt;Get the Value of CSS Properties As They Are Animating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/looping_a_css_transition.htm"&gt;Looping a CSS Transition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Examples Using CSS Animations and Transition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slide Image on Hover using CSS3&lt;/li&gt;
&lt;li&gt;Sliding Background Effect on Link Hover&lt;/li&gt;
&lt;li&gt;Animating Many Elements Using a Transition&lt;/li&gt;
&lt;li&gt;Creating a Sweet Content Slider&lt;/li&gt;
&lt;li&gt;Move Element to Click Position&lt;/li&gt;
&lt;li&gt;Simple Text Fade and Scale Animation&lt;/li&gt;
&lt;li&gt;Getting Jittery on Hover&lt;/li&gt;
&lt;li&gt;The &lt;blink&gt; Tag Shall Live On&lt;/li&gt;
&lt;li&gt;Rounded Image Links with a Sweet Hover Effect&lt;/li&gt;
&lt;li&gt;Slide and Bounce an Image on Hover&lt;/li&gt;
&lt;li&gt;Creating the iOS Icon Jiggle / Wobble Effect&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Animating in Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Animating in Code Using JavaScript&lt;/li&gt;
&lt;li&gt;Animating with requestAnimationFrame&lt;/li&gt;
&lt;li&gt;Animation Loops using requestAnimationFrame&lt;/li&gt;
&lt;li&gt;Creating a Simple HTML5 Canvas Animation&lt;/li&gt;
&lt;li&gt;DOM vs. Canvas&lt;/li&gt;
&lt;li&gt;Introduction to Easing in JavaScript&lt;/li&gt;
&lt;li&gt;Animating with Robert Penner's Easing Functions&lt;/li&gt;
&lt;li&gt;Animating Many Things on a Canvas&lt;/li&gt;
&lt;li&gt;Frame Rates and HTML/JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Examples Involving Animations Created in Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Animated Scroll to Top with Easing&lt;/li&gt;
&lt;li&gt;Smooth Parallax Scrolling&lt;/li&gt;
&lt;li&gt;Creating a Strobe Light Generator&lt;/li&gt;
&lt;li&gt;Amorphous Circles&lt;/li&gt;
&lt;li&gt;The Falling Snow Effect&lt;/li&gt;
&lt;li&gt;Deconstruction: Irritated Bubbles&lt;/li&gt;
&lt;li&gt;Creating a Basic Particle System&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 29 Nov 2013 21:30:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-29:posts/2013/animationzhuan/</guid><category>animation</category></item></channel></rss>