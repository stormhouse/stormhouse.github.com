<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stormhouse</title><link>http://stormhouse.github.io/</link><description></description><atom:link href="http://stormhouse.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 11 Mar 2015 15:30:00 +0800</lastBuildDate><item><title>轻量级布局框架-Snap安装</title><link>http://stormhouse.github.io/posts/2015/snap-install/</link><description>&lt;p&gt;&lt;a href="https://github.com/Masonry/Snap"&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;Snap是一个轻量级布局框架，使用优雅的语法封装AutoLayout。Snap拥有自己的布局DSL，它提供一种链式操作描述你的NSLayoutConstraints，使你的布局代码变得简明易读。Snap同时支持IOS和OS X。&lt;/p&gt;
&lt;p&gt;Snap使用Swift的特性，例如函数重载，所以它不能在Objective-C中使用。正因如此，我们使用snp_做为前缀，而Masonry使用mas_，所心在你可以在同一项目中同时使用Masonry和Snap。&lt;/p&gt;
&lt;p&gt;基于Objective-C，移步&lt;a href="https://github.com/Masonry/Masonry"&gt;Masonry&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;p&gt;基于&lt;a href="http://stormhouse.github.io/posts/2015/develop-ios8-ui-without-storyboard/"&gt;不用storyboard开发ios8界面&lt;/a&gt;中的&lt;a href="https://github.com/stormhouse/UIWithoutStoryboard/tree/v1.0"&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;下载&lt;/h4&gt;
&lt;p&gt;在项目的根目录，使用git submobule命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add https://github.com/Masonry/Snap.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装到项目中&lt;/h4&gt;
&lt;p&gt;Finder中打开Snap，用鼠标拖到项目中&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150301-1.png" title="" /&gt;&lt;/p&gt;
&lt;h4&gt;将Snappy.framework添加到项目中&lt;/h4&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150301-2.png" title="" /&gt;&lt;/p&gt;
&lt;h3&gt;简单示例（添加一个居中的按钮）&lt;/h3&gt;
&lt;h4&gt;不使用自适应布局&lt;/h4&gt;
&lt;p&gt;上篇RootViewController.swift示例代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;override func viewDidLoad() {
    super.viewDidLoad()
    button = UIButton.buttonWithType(.System) as? UIButton
    button.frame = CGRect(x: 110, y: 70, width: 100, height: 44)
    button.setTitle(&amp;quot;Press Me&amp;quot;, forState: .Normal)
    button.setTitle(&amp;quot;I&amp;#39;m Pressed&amp;quot;, forState: .Highlighted)
    button.addTarget(self, action: &amp;quot;buttonIsPressed:&amp;quot;, forControlEvents: .TouchDown)
    button.addTarget(self, action: &amp;quot;buttonIsTapped:&amp;quot;, forControlEvents: .TouchUpInside)

    self.view.addSubview(button)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按钮都的位置都是写死的，无法在各种屏下（横屏）自适应。&lt;/p&gt;
&lt;h4&gt;添加约束条件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;override func viewDidLoad() {
    super.viewDidLoad()

    button = UIButton.buttonWithType(.System) as? UIButton
    self.view.addSubview(button)

    button.backgroundColor = UIColor.greenColor()
    button.setTitle(&amp;quot;Press Me&amp;quot;, forState: .Normal)
    button.setTitle(&amp;quot;I&amp;#39;m Pressed&amp;quot;, forState: .Highlighted)
    button.addTarget(self, action: &amp;quot;buttonIsPressed:&amp;quot;, forControlEvents: .TouchDown)
    button.addTarget(self, action: &amp;quot;buttonIsTapped:&amp;quot;, forControlEvents: .TouchUpInside)
//        button.frame = CGRect(x: 110, y: 70, width: 100, height: 44)

    button.snp_makeConstraints { make in
        make.center.equalTo(self.view).offset(CGPointMake(-5, 10))
        return // this return is a fix for implicit returns in Swift and is only required for single line constraints
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行，不管在哪种屏下查看效果，呈现在面前的都是一个水平、垂直居中的按钮。
&lt;a href="https://github.com/stormhouse/UIWithoutStoryboard/tree/v2.0"&gt;源代码&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Wed, 11 Mar 2015 15:30:00 +0800</pubDate><guid>tag:stormhouse.github.io,2015-03-11:posts/2015/snap-install/</guid><category>ios8</category><category>xcode6</category></item><item><title>不用storyboard开发ios8界面</title><link>http://stormhouse.github.io/posts/2015/develop-ios8-ui-without-storyboard/</link><description>&lt;p&gt;这里不讨论 使用xib storyboard和代码编写UI的孰优孰劣。详见&lt;a href="http://www.toptal.com/ios/ios-user-interfaces-storyboards-vs-nibs-vs-custom-code"&gt;iOS User Interfaces: Storyboards vs. NIBs vs. Custom Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建新项目&lt;/h3&gt;
&lt;p&gt;创建新项目，选择Single View Application为模板。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-2.png" title="" /&gt;&lt;/p&gt;
&lt;h3&gt;删除storyboard&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;plist删除key main&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-4.png" title="" /&gt;&lt;/p&gt;
&lt;h3&gt;新建rootViewController类&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;UIKit&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RootViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIButton&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;

    &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buttonWithType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;UIButton&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Press Me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I&amp;#39;m Pressed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Highlighted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buttonIsPressed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forControlEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TouchDown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buttonIsTapped:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forControlEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TouchUpInside&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;additional&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buttonIsPressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Button is pressed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buttonIsTapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIButton&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Button is tapped.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

    &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;didReceiveMemoryWarning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;didReceiveMemoryWarning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Dispose&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;recreated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改AppDelegate.swift&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;UIKit&lt;/span&gt;

&lt;span class="nd"&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIResponder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIWindow&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;


    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class="n"&gt;launchOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;customization&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIScreen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;darkGrayColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RootViewController&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootViewController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;预览&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ios Img" class="align-center" src="/img/150226-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/stormhouse/UIWithoutStoryboard/tree/v1.0"&gt;源代码&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 26 Feb 2015 20:41:00 +0800</pubDate><guid>tag:stormhouse.github.io,2015-02-26:posts/2015/develop-ios8-ui-without-storyboard/</guid><category>ios8</category><category>xcode6</category></item><item><title>grunt init plugin</title><link>http://stormhouse.github.io/posts/2014/grunt-init-plugin/</link><description>&lt;hr /&gt;
&lt;h4&gt;安装node&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# MAC
brew install node
node -v
npm -v

# WIN[下载][0]
# 安装cli
npm install -g grunt-cli
npm install -g grunt
npm install -g grunt-init   #编写插件用
grunt --version
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本操作&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;grunt init
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;编写插件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin
grunt-init gruntplugin
npm install
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#npm配置代理
npm config set proxy http://server:port
npm config set https-proxy http://server:port
# 需要认证
npm config set proxy http://username:password@server:port
npm config set https-proxy http://username:pawword@server:port
# 查看
npm config list
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 17 Jul 2014 17:05:00 +0800</pubDate><guid>tag:stormhouse.github.io,2014-07-17:posts/2014/grunt-init-plugin/</guid><category>node</category><category>grunt</category></item><item><title>Git常备命令</title><link>http://stormhouse.github.io/posts/2014/git-command/</link><description>&lt;hr /&gt;
&lt;h6&gt;自省&lt;/h6&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git --help
git add --help
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本操作&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git add .
git add -e .
git delete test.txt
git commit -m &amp;#39;fix sth.&amp;#39;

git status
git log
git reset
git diff
git checkout
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;远程操作&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/stormhouse/pyStudy.git
git pull
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote -v
origin  git@github.com:stormhouse/pyStudy.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin  git@github.com:stormhouse/pyStudy.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改remote&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote remove origin

git remote add origin https://github.com/stormhouse/pyStudy.git

git pull

git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;添加ignore&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# .gitignore
/.idea
/node_modules/
*.pyc
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Tue, 08 Jul 2014 14:52:00 +0800</pubDate><guid>tag:stormhouse.github.io,2014-07-08:posts/2014/git-command/</guid><category>git</category></item><item><title>Sliding Background Effect on Link Hover（译）</title><link>http://stormhouse.github.io/posts/2014/sliding-background-effect-on-link-hover/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/sliding_background_effect_on_link_hover.htm"&gt;kirupa&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;链接鼠标悬停状态类似于卡片盒子。你可以对它做无穷无尽有趣得事。通过学习本章你可以做一件是当鼠标悬停链接时让某背景色滑入视野。&lt;/p&gt;
&lt;p&gt;下面，你将看到我所说的例子：&lt;/p&gt;
&lt;iframe id="I2" border="0" frameborder="0" name="I2" scrolling="no" src="/demo/animation/sliding_background_link_rollover.html" style="border-radius: 5px; width: 538px; height: 277px;" marginheight="0" marginwidth="0" class="centerImage"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.&lt;/iframe&gt;

&lt;p&gt;当你将鼠标悬停到&lt;strong&gt;Jerry&lt;/strong&gt;, &lt;strong&gt;George&lt;/strong&gt;, &lt;strong&gt;Kramer&lt;/strong&gt;, 和&lt;strong&gt;Elaine&lt;/strong&gt;链接上，注意会发生什么。一个绿色的背景色滑入视野，同样当鼠标移开背景色滑出视野。相当棒，不是吗？在接下来的章节中，让我们看看如果在自然语言和CSS中实现它。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h2&gt;Overview of How This Works&lt;/h2&gt;
&lt;p&gt;首先，在深入实现细节之前，让我们分步用自然语言描述它是如果工作的。露个底吧，简言之，和其它一些CSS背景技巧一样，你看到的效果无非是定位背景颜色。Allow me to elaborate.&lt;/p&gt;
&lt;p&gt;你开始创建一个链接，看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;该链接相当简单，没有指定它的背景色。让我们添加背景色样式。先不管背景色的具体颜色。假设这背景色是完全透明的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;现在该关心它的背景色了。背景的尺寸就是链接的边框。链接周围的任何内容都不受该背景色的影响，除非你增大链接的尺寸或做其它奇怪的事件。最重要的是，超出该边框部分的背景&lt;strong&gt;是不可见的&lt;/strong&gt;。先将上面你看到的图记在脑海里，一会我给出详细的内容帮助你如何理解它的工作原理。&lt;/p&gt;
&lt;p&gt;回到刚才展示的，当鼠标悬停在元素，滑动效果的结果把隐藏部分内容带入当前视野。这种做法的方式就是让背景色大小比在元素滑动方向大两倍。如果想让背景向右方滑动，需要使背景宽度2倍于元素并重新定位为left：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;当链接在正常状态下，你看到的背景位于如上图展示的初始位置。当鼠标悬停在链接上，背景将会向右滑动一半的宽度:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;至此，该效果原理已经搞清楚了。缺失的部分就是背景色本身，因为它目前还是透明的。在我们的例子中是通过使用&lt;strong&gt;渐变&lt;/strong&gt;，创建的东西看起来像两种颜色的矩形并排组成的大矩形。&lt;/p&gt;
&lt;p&gt;当你想到渐变，你也许认为会是下面这种情形：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;如果那是你首先想到的渐变，那么它只是...用于辨别或其它东西的某种形式。不过没有关系 - 这不是你的错。不管怎么样，会有这种渐变，不让展示从一种颜色到另一种颜色中间的颜色。你可用覆盖的方式设置渐变点，看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这正是我们在滑动链接中指定的渐变效果。你看到的初始颜色是组成渐变的右半部分。鼠标悬停链接时看到的颜色组成渐变的左半部分：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;因你只能看到的是链接边框内的部分背景，在初始状态和悬停状态间滑动背景可以带来这种效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;现在，因为这部分仅是概述，有意模糊了一些细节。在下一章节，我们将清晰阐述怎样将它翻译成浏览器可理解的CSS代码。&lt;/p&gt;
&lt;h2&gt;How this Effect Really Works&lt;/h2&gt;
&lt;p&gt;这种效果原理是相当难理解的部分。一旦你对它有了认识，其余都相当容易。在本节中，我们将具体实现它们，理解它们的工作原理。&lt;/p&gt;
&lt;p&gt;首先，在电脑上运行这个例子。创建一个HTML文档，添加如下的HTML和CSS代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Language&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff, to, help, search, engines, not&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What this page is about.&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;An Interesting Title Goes Here&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;An Interesting Title Goes Here&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://fonts.googleapis.com/css?family=Roboto+Slab&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EFEFEF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto Slab&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FF0066&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto Slab&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;best of wikipedia&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://en.wikipedia.org/wiki/Jerry_Seinfeld&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Jerry Seinfeld&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://en.wikipedia.org/wiki/George_Costanza&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    George Costanza&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://en.wikipedia.org/wiki/Cosmo_Kramer&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Cosmo Kramer&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://en.wikipedia.org/wiki/Elaine_Benes&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Elaine Benes&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存该文档并预览，你将看到与开始那个例子的副本。目前，尽管这些行的HTML和CSS是很重要的，但更重要的是理解它们的作用及产生的效果。&lt;/p&gt;
&lt;p&gt;我们跳过不太重要的部分，专注于真正重要的这两条样式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto Slab&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;花一些时间看一下两条样式的内容。试着把它们映射到上一节的效果。一个有意思的事CSS属性的名称描述了它的作用，这将有助于理解它们的原理。&lt;/p&gt;
&lt;p&gt;一旦你准备，让我们开始深入学习这些CSS。&lt;/p&gt;
&lt;h4&gt;Setting up the Background Color&lt;/h4&gt;
&lt;p&gt;你可以想象，使背景色生效的地方。下面高亮的三行是设置背景色渐变的相当样式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto Slab&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;/*hl*/&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*hl*/&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/*hl*/&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们深入这三行的细节。&lt;/p&gt;
&lt;h6&gt;Specifying Our Gradient&lt;/h6&gt;
&lt;p&gt;首先要看的是定义在&lt;code&gt;background-image&lt;/code&gt;属性的gradient：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;background-image: linear-gradient(to right,
                                  #CCFF33,
                                  #CCFF33 50%,
                                  transparent 50%,
                                  transparent);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释gradient工作的完整语法超出了本章的范围，但我们这里只看一点，&lt;strong&gt;to right&lt;/strong&gt;值表示向右发生渐变。如果不指定它，渐变默认是垂直方向的渐变而不是我们想要的水平方向。&lt;/p&gt;
&lt;p&gt;接下来的4行是渐变点，分别是0%，50%，50%和100%。渐变第一部分是从0%开始到50%结束，颜色设置为#CCFF33。正是你看到的浅绿色。渐变的第二部分是从50%开始到100%结束，指定了透明颜色。&lt;/p&gt;
&lt;p&gt;如果你想看看这种渐变是什么样子，它看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-9.png" title="" /&gt;&lt;/p&gt;
&lt;h6&gt;Adjusting Our Background Position (Yikes!)&lt;/h6&gt;
&lt;p&gt;下一行属性定义背景的位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;background-position&lt;/code&gt;属性中，指定了背景的偏移量为链接的宽度。总之，有意义的事情，这就是我正在做的。有时现实很残酷...especially if the &lt;a href="http://dev.w3.org/csswg/css-backgrounds/#background-position"&gt;W3C spec for this situation&lt;/a&gt; has anything to do with this.&lt;/p&gt;
&lt;p&gt;如果指定&lt;code&gt;background-position&lt;/code&gt;值为百分比，会把这个值翻译成百分比乘以下面两个数的差值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可见背景的大小&lt;/li&gt;
&lt;li&gt;背景的实际大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为背景的实际大小与可见背景大小是一样的，背景的宽度减去链接的大小等于0。最终的结果，是定位的值为100%乘以0。最终计算出来的水平属性值是0...但是我们指定的值是100%。&lt;/p&gt;
&lt;p&gt;在这100%这一点，能找到background的定位：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;如果这一切听起来有点奇怪，我也感同身受。这不是最终的样式，所以要对第二，三部分内容保持注意。&lt;/p&gt;
&lt;h6&gt;Note: Your Backgrounds Actually Tile/Repeat&lt;/h6&gt;
&lt;p&gt;进一步深入之前，我需要承认可视背景定位并不完全准确。默认背景实际上是重复的。在我们的代码中没有消除重复，这是故意让你看到实际的效果。如果考虑到重复，前面的示意图应该如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;记得，用户不会看到任何超出定义链接边框外的区域。我只是提供这些额外的信息帮助于理解其工作原理。用户真正能看到的仅仅是这样的:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-12.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;我们仍然有一些更改，所以还没有完事。别担心，如果在这个阶段你的链接看起来可怕的事情。在此，不必担心你的链接多么糟糕。&lt;/p&gt;
&lt;h6&gt;Setting Our Background Size&lt;/h6&gt;
&lt;p&gt;最后一个背景相关的属性就是刚才设置背景的大小...为&lt;code&gt;background-size&lt;/code&gt;的适合的命名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;200&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义的第一个值是宽度大小，第二值是高度。因为我们想让水平方向上滑动，所以宽度设置为链接宽度的两倍100%。高度设置为原始值的100%，其它啥也不做。&lt;/p&gt;
&lt;p&gt;这些行CSS的最终效果，获得两倍于链接宽度的背景，需要对它设置渐变。这正是我们想要的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-13.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;再次提一下第二部分中的&lt;code&gt;background-position&lt;/code&gt;属性...&lt;/p&gt;
&lt;p&gt;如果你想知道如何将我们所要的背景的宽度加倍，这有个提示：归结于&lt;code&gt;background-position&lt;/code&gt;属性。因为背景现在两倍于链接的宽度，回想我们前面谈过的计算公式。应指定&lt;code&gt;background-position&lt;/code&gt;属性值为-100%（元素width-背景width）乘以指定的值100%（即(100%-200%)*100%=-100%）。计算出来的结果是-100%，这意味着整个背景是向左偏移了100%元素的宽度。&lt;/p&gt;
&lt;p&gt;两倍于链接的宽度正是我们所想要的。耶！&lt;/p&gt;
&lt;h4&gt;Background Color on Hover&lt;/h4&gt;
&lt;p&gt;在前面章节里，你学到了链接自然状态下时背景的颜色。在本节中，让我们看一下当鼠标悬停时背景的变化：&lt;/p&gt;
&lt;p&gt;鼠标悬停时的变化定义在伪类&lt;code&gt;a:hover&lt;/code&gt;规则里：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;hover&lt;/code&gt;伪类确保了悬停时的样式。你可以在我的&lt;a href="http://www.kirupa.com/html5/styling_links_in_css.htm"&gt;Styling Links in CSS&lt;/a&gt;教程里学到各式各样的状态。&lt;/p&gt;
&lt;p&gt;在本规则里，会影响背景位置的是声明&lt;code&gt;background-position&lt;/code&gt;一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#006600&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当鼠标悬停链接上，背景会水平移位至0%。结果很简单。将背景右移到0%处：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140108-14.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;尽管我解释了所有列出的代码，你在浏览器预览的结果也也不如它背后的机理复杂。所有用户看到的就是背景第一部分从左侧滑入。当鼠标移开时，右半部分又返回，变为初始状态。&lt;/p&gt;
&lt;h4&gt;Meet the Transition&lt;/h4&gt;
&lt;p&gt;最后我们看一下刚才跳过的内容，那就是&lt;code&gt;li a&lt;/code&gt;代码最后部分transition声明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto Slab&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="k"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="k"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                      &lt;span class="m"&gt;#CCFF33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;transition声明确定了鼠标悬停时发生滑动效果而不是没有一点动画的无聊闪动。值&lt;strong&gt;all&lt;/strong&gt;确保了元素的任意属性从自然状态到hover状态变化时发生动画。意味着链接的前背景和边框颜色也被动画。也意味着改变&lt;code&gt;background-position&lt;/code&gt;属性也会发生动画。&lt;/p&gt;
&lt;p&gt;看一下其它的值，动画将持续.2秒的时延并使用ease-in缓动函数。所有看来只有这一行产生了动画...事实上，这种极好的效果的确很棒的!&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;这种动画效果相当考验你的CSS功底。各种形式的专业知识、试验、错误和经验才是唯一有效的引导你做的更好。说的是，学习下面的链接将有助你:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dev.w3.org/csswg/css-backgrounds/"&gt;W3C Spec on CSS Backgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitions/"&gt;All About CSS Transitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/easing-functions-in-css3/"&gt;Easing Functions (aka Timing Functions) in CSS3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;Avoid Using Vendor Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Wed, 08 Jan 2014 20:53:00 +0800</pubDate><guid>tag:stormhouse.github.io,2014-01-08:posts/2014/sliding-background-effect-on-link-hover/</guid><category>animation</category></item><item><title>Slide Image on Hover using CSS3（译）</title><link>http://stormhouse.github.io/posts/2014/slide-image-on-hover-using-css3/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/slide_image_hover_using_css3.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我经常提到的非常酷的一个例子就是当你鼠标悬停图片上发生滑动的动画。如果你不清楚我在说什么，鼠标悬停下面例子中的方框上：&lt;/p&gt;
&lt;iframe id="I1" border="0" frameborder="0" name="I1" scrolling="no" src="/demo/animation/sliding_image_temp.html" style="width: 373px; height: 373px; border: 1px solid rgb(204, 204, 204); float: center;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.&lt;/iframe&gt;

&lt;p&gt;每个方框由一个高的图片组成。当你鼠标悬停每个图片上，图片会向下滑动展现出它的另一部分。当鼠标移开时，返回原来的状态。所做的全部这些均是由CSS3的transitions来实现的。&lt;/p&gt;
&lt;p&gt;在本教程中，我将告诉你怎样实现这种效果并理解它的工作原理。&lt;/p&gt;
&lt;h2&gt;How This Effect Works&lt;/h2&gt;
&lt;p&gt;在深入实现其细节之前，让我们先看一下用简单语言描述它的原理。一会儿你将看，一切是如此简单。&lt;/p&gt;
&lt;p&gt;首先，你得有这样一个图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140105-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这个图片默认展示了两个部分。我们要做的是在最初的时候，只显示图像的上半部分认。鼠标悬停上去后，显示下半部分。&lt;/p&gt;
&lt;p&gt;我们实现这个目的的方法是，用一个是该图片高度一半的容器包裹它：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140105-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;注意，容器可以将图片划分为两个不同的部分。在HTML里，将一个图片放到一个小于它的容器里，实际你是看不到图片全部的。确保容器内的部分图像清晰可见，你要修剪需要的内容:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140105-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;当你修剪这个图片，另一半的图片仍在那儿。因为它在父容器的边界之外，只是隐藏的部分。&lt;/p&gt;
&lt;p&gt;在这里，我们要做的就是添加一个transition，在当你鼠标悬停上去后可使图片发生移位：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140105-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;我知道我画的这些看起来像一个宽的刷子，但是很容易理解transitions的工作方式。这相当简单只是指定哪些属性发生变化和要发生transition的属性。&lt;/p&gt;
&lt;p&gt;最后一件事是确定当鼠标移开时，图片返回到它开始的状态。&lt;/p&gt;
&lt;h2&gt;Creating this Effect&lt;/h2&gt;
&lt;p&gt;好吧，现在你已经对怎样创建这个特效有了个大致的了解，让我们开始从零创建它吧。只要你创建一个&lt;a href="http://www.kirupa.com/html5/getting_your_feet_wet_html5_pg1.htm"&gt;a new HTML5 flavored HTML page&lt;/a&gt;保证开始实现它。&lt;/p&gt;
&lt;h4&gt;Adding the Image&lt;/h4&gt;
&lt;p&gt;最明显的一步，首先添加图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/140105-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;继续保存上面的图片到你的HTML文件同一目录中。如果你想，也可以放到HTML文件目录下的images目录下，但一定要在HTML文件代码里指定好该目录，I am romantic like that.&lt;/p&gt;
&lt;p&gt;一旦你添加了图片，html标记看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;img src=&amp;quot;smiley.png&amp;quot; height=&amp;quot;300&amp;quot; width=&amp;quot;150&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这极其简单。注意一点就是图片的height是300像素，width是150像素。现在预览一下文档，你会看到该图片。&lt;/p&gt;
&lt;h4&gt;Wrapping Your Image in a Container&lt;/h4&gt;
&lt;p&gt;接下来的步就是开始剪裁图像片的一半。第一步，要添加一个包裹它的容器。这个父容器仅是使用一个经典的div元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pictureContainer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;images/smiley.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;150&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意div元素 包裹着img元素，这个div有一个class属性值pictrueContainer。记住这个值，一会就该麻烦这它了。&lt;/p&gt;
&lt;h4&gt;Clipping the Image&lt;/h4&gt;
&lt;p&gt;剪裁任何类型的内容需要两个条件。第一点，要剪裁内容的外容器需要指定一个固定的大小。第二点，你要设置外容器的overflow属性告知浏览器父容器需要修剪。&lt;/p&gt;
&lt;p&gt;父容器div，已经有一个class的值prictrueContainer。让我们给它添加一些样式吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="err"&gt;150&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="err"&gt;150&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow:&lt;/span&gt; &lt;span class="nf"&gt;hidden&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将上面的样式添加到代码中去。注意，只是早先提到尺寸的像素，父容器的150*150像素大小。&lt;code&gt;overflow&lt;/code&gt;属性设值为&lt;code&gt;hidden&lt;/code&gt;隐藏所有超出该容器150像素大小的内容。&lt;/p&gt;
&lt;p&gt;现在预览一下页面，你将看到展示图片的一半。耶，继续！&lt;/p&gt;
&lt;h4&gt;Creating the Transition&lt;/h4&gt;
&lt;p&gt;最后一步就是定义transition确保当鼠标悬停上后图片发生滑动效果。让我们先忽略transition的定义，先看看图片的开始和结束位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;hover&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;-150&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，上面我通过hover&lt;a href="http://www.kirupa.com/html5/styling_links_in_css.htm"&gt;伪类&lt;/a&gt;创建的样式规则目的就是当鼠标悬停上图片上的效果。&lt;code&gt;top&lt;/code&gt;属性值开始为&lt;code&gt;0px&lt;/code&gt;，鼠标悬停上后变为&lt;code&gt;150px&lt;/code&gt;。为了使&lt;code&gt;top&lt;/code&gt;属性生效，我需要为元素设置&lt;code&gt;position&lt;/code&gt;属性值为&lt;code&gt;relative&lt;/code&gt;。通过设置position值为relative，默认的HTML元素布局将被我指定的精确定义布局所覆盖。&lt;/p&gt;
&lt;p&gt;如果现在预览一下页面，当鼠标悬停上图片会看到图片突然从一半转变为另一半。这正是我们想要的...哦，还不是！&lt;/p&gt;
&lt;p&gt;我们想要是让图片平稳而有动画的滑动。那将需要&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitions/"&gt;指定transition&lt;/a&gt; - 仅一行代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="nf"&gt;top&lt;/span&gt; &lt;span class="no"&gt;.2s&lt;/span&gt; &lt;span class="no"&gt;ease-in-out&lt;/span&gt;&lt;span class="err"&gt;;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;one&lt;/span&gt; &lt;span class="no"&gt;line&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;hover&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;-150&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我定义的这一行代码规定了&lt;code&gt;top&lt;/code&gt;属性，当该属性值发生变化时产生动画。除了监听该属性，还指定了动画的时延为.2秒以及使用&lt;code&gt;ease-in-out&lt;/code&gt;缓动函数。&lt;/p&gt;
&lt;h6&gt;Where Them Vendor Prefixes At (feat. Nicki Minaj and FloRida)&lt;/h6&gt;
&lt;p&gt;注意，当我声明transition时并没有指定各种浏览器的厂商前缀。反而，我计划使用&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free library&lt;/a&gt;库来为我处理那些。如果你不使用三方库处理它，那就随你只是添加&lt;code&gt;-ms&lt;/code&gt;，&lt;code&gt;-o&lt;/code&gt;，&lt;code&gt;-moz&lt;/code&gt;和&lt;code&gt;-webkit&lt;/code&gt;它们的副本吧。&lt;/p&gt;
&lt;p&gt;如果你现在再预览一下页面，鼠标悬停上图片。如果使用的是比较流行的支持CSS3 transitions浏览器，你将看到比较漂亮的动画，图片从一半滑动到另一半。如果你看不到动画，对比我最后的代码版本仔细检查你的代码。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;这不是很简单吗？其实不是。虽然你添加的CSS标记相当少，但为了如何修剪元素内容你需深入理解CSS，为设置垂直布局需设置你自己的布局，最终设置transition。在这些话题到来之前，我提供了相关教程的链接，去随时阅读其中更多的细节。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sun, 05 Jan 2014 21:30:00 +0800</pubDate><guid>tag:stormhouse.github.io,2014-01-05:posts/2014/slide-image-on-hover-using-css3/</guid><category>animation</category></item><item><title>Looping a CSS Transition（译）</title><link>http://stormhouse.github.io/posts/2013/looping-a-css-transition/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/looping_a_css_transition.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Transition的故事历经考验和磨难。从被无耻浏览器厂商所忽略而必须添加厂商前缀到目前被普遍接受，该旅程肯定是崎岖不平。尽管&lt;code&gt;transition&lt;/code&gt;属性在过去几年有了很大进步，但与它更帅更靓的前辈&lt;code&gt;animation&lt;/code&gt;相比，在实现某些东西方面并不容易。&lt;/p&gt;
&lt;p&gt;我在&lt;a href="http://stormhouse.github.io/posts/2013/animations-vs-transitions/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt;教程中完全描述transitions和animations的差异，在这里我将重申一个transition的重要局限。这个限制就是transitions没有一个属性指定让它循环。是的！在今天这个时代，transition&lt;strong&gt;被设计成&lt;/strong&gt;只执行一次。的确是个笑话。&lt;/p&gt;
&lt;p&gt;幸运的是，这里有一个方法。在本教程里，我将通过一个小伎俩解决&lt;a href="http://stormhouse.github.io/posts/2013/the-transitionend-event/"&gt; transitionend event &lt;/a&gt;如何使transitions支持循环。&lt;/p&gt;
&lt;h2&gt;The Example&lt;/h2&gt;
&lt;p&gt;为了证实我有点疯狂，下面的例子展示了一个永远循环的transition。鼠标移到圆形上看到transition开始运行...永远不会停止。&lt;/p&gt;
&lt;iframe id="I1" scrolling="no" frameborder="0" style="width: 620px; height: 383px;" src="/demo/animation/looping_transition.html" name="I1" marginwidth="0" marginheight="0" border="0"&gt;&lt;/iframe&gt;

&lt;p&gt;注意到圆形从小到大的来回振荡。学完本章，你将能创建类似的动画并理解它的运行原理。&lt;/p&gt;
&lt;h2&gt;How to Make a Transition Loop&lt;/h2&gt;
&lt;p&gt;在深入做这件事之前，让我们首先退一步理清我们将要做的是什么。为了做到这点，先引入性感的圆圈吧：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;接下来做的就是添加transition改变圆形的大小。圆形有一个初始大小。我们通称为它的初始状态&lt;strong&gt;stateOne&lt;/strong&gt;。要实现transition须让它变的更大些，该状态为&lt;strong&gt;stateTwo&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;到目前为止看起来非常简单，对吗？我开始于stateOne，现在我触发一个transition改变圆的大小，为stateTwo状态定义的值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;由于我定义了transition，代替了它从stateOne突然转变到stateTwo状态，圆型会逐步变成大的尺寸。注意，如何触发transition使它的尺寸变到stateTwo状态是无关紧要的。有可能是元素的class值变化。有可能是鼠标移上指定一个不同的尺寸--就像刚刚这个例子。有可能是使用JavaScript代码直接修改它的大小。可以是各种方式写成这一点。怎样触发属性值的变化无关紧要。一旦定义了transition监听的属性发生了变化，transition将会执行。&lt;/p&gt;
&lt;p&gt;现在，我提到所有关于transitions的东西你已经十分清楚，当作一个简单的回顾。让我们开始吧，因为这里要引入新东西。那就是让这个transition实现迭代。默认情况下，transition从stateOne过滤到stateTwo，其它什么都不会发生。有时，这取决于我的CSS设置，可能回到stateOne状态。我想要做的就是&lt;strong&gt;循环这个transition&lt;/strong&gt;永不让它停止。一旦让transition运行，我想让圆型按我定义的大小stateOne和stateTwo来回振荡...永远。当它到达stateTwo状态，我想让它返回stateOne状态。当到达stateOne状态，再让它返回stateTwo状态...那么，你将得到一段影片。&lt;/p&gt;
&lt;p&gt;下图就是我描述的影片的运行轨迹：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;我们将如何做到这一点呢？当然不是最简单的！正如先前我提到的，问题在于CSS &lt;code&gt;transition&lt;/code&gt;属性不支持内建的属性支持循环。我们要自己把事情搞清楚。这真是有点无耻。我们要是等待trasition完成做点点什么。一旦transition完成，我们将强制改变transition监听的属性值。通过改变transition监听的属性值，你的transition又会重新运行...直到新的属性变化到指定值。&lt;/p&gt;
&lt;p&gt;现在我们有个好的方法如何让transition实现循环，让我们开始实现它吧。判断一个transition结束通过监听&lt;code&gt;transitionend&lt;/code&gt;事件。在每次&lt;code&gt;transitionend&lt;/code&gt;事件处理器中，我们将通过一些JavaScript代码修改transition监听着的属性值。在stateOne结束的transition中，&lt;code&gt;transitionend&lt;/code&gt;事件将被触发。根据这一点，我们会通过JavaScript告知元素反向去stateTwo状态。当处于stateTwo状态，另一个&lt;code&gt;transitionend&lt;/code&gt;事件将被触发。这时，告知元素反向去stateOne状态。你可以想象，这将继续一段时间。&lt;/p&gt;
&lt;p&gt;这里有一个图展示了上面的循环:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;最初transition可以被各种方式触发。它是怎样触发并不重要。重要的是后续的transition怎样被JavaScript触发的。&lt;/p&gt;
&lt;p&gt;在接下来的几节中，让我们看看这个技巧吧。&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;好吧，我们最后动手实践说明前面的几个段落的内容并让它们运行。如果你不想动手实践而宁愿只是阅读和被的追随。跳过这个章节继续看下一个章节。如果你想积极跟随本教程并重新创建你在上面看到的例子，创建一个HTML文档把下面的HTML/CSS代码拷进去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Language&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff, to, help, search, engines, not&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What this page is about.&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;An Interesting Title Goes Here&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;An Interesting Title Goes Here&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;550px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F2F2F2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(&amp;#39;http://www.kirupa.com/images/gray_background.png&amp;#39;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#contentContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#circleDiv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2693FF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.stateOne&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.stateTwo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cambria&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cochin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Georgia&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Times New Roman&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006699&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentContainer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;circleDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stateOne&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/html5/examples/js/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// your code goes here&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在浏览器中预览该文档，你将看到类似刚前的例子。唯一不同的就是这个示例的动画不能迭代。事实上，它是静态的什么都做不了，我们很快就会解决这个问题，但首先，让我们来看看到底如何进行处理：&lt;/p&gt;
&lt;p&gt;在代码里，圆型被定义成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;circleDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stateOne&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有趣的细节是元素的&lt;code&gt;id&lt;/code&gt;是&lt;strong&gt;circleDiv&lt;/strong&gt;和&lt;code&gt;类&lt;/code&gt;名为&lt;strong&gt;stateOne&lt;/strong&gt;。一会儿你就会看到它们将出现在CSS和JavaScript代码里。首先看一下CSS...&lt;code&gt;#circleDiv&lt;/code&gt;定义的样式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#circleDiv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2693FF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="m"&gt;75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个样式是让方形的&lt;code&gt;div&lt;/code&gt;元素变成圆形。除些以外，也在这里定义了&lt;code&gt;transition&lt;/code&gt;。注意，这里定义的transition包括&lt;code&gt;transform&lt;/code&gt;和&lt;code&gt;opacity&lt;/code&gt;两个属性。&lt;/p&gt;
&lt;p&gt;接下来看一下&lt;code&gt;stateOne&lt;/code&gt;和&lt;code&gt;stateTwo&lt;/code&gt;样式规则，它是扮演在两个状态触发转换以及保持transition运行的角色：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.stateOne&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity:&lt;/span&gt; &lt;span class="err"&gt;1;&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="nf"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;.stateTwo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity:&lt;/span&gt; &lt;span class="nf"&gt;.5&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="nf"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面两个规则中，&lt;code&gt;opacity&lt;/code&gt;和&lt;code&gt;transform&lt;/code&gt;两个属性均被设置成不同的值。如果从前面几行你还记得我们的&lt;code&gt;transition&lt;/code&gt;属性设置为应对变化&lt;code&gt;transform&lt;/code&gt;和&lt;code&gt;opacity&lt;/code&gt;。嗯…关键点正在此处!&lt;/p&gt;
&lt;h2&gt;Triggering The Transition Initially&lt;/h2&gt;
&lt;p&gt;第一件事是要我们的transition简单触发运行，这需要鼠标移上该元素。目前，正如果在HTML中看到的，元素有初始类stateOne的样式值。当我鼠标移上去后，想让它变为stateTwo样式的值。这些类名映射到选择器的样式规则，正如刚刚你看到的...&lt;code&gt;.stateOne&lt;/code&gt;和&lt;code&gt;.stateTwo&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;实现它的唯一方式就是写一些JavaScript。在&lt;code&gt;script&lt;/code&gt;标签内添加如下行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#circleDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mouseover&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInitialClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setInitialClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码应该相当简单。通过调用&lt;code&gt;querySelector&lt;/code&gt;变量&lt;code&gt;theCircle&lt;/code&gt;指向&lt;code&gt;#circleDiv&lt;/code&gt;元素。在这里我们设置一个&lt;code&gt;mouseover&lt;/code&gt;事件监听器&lt;code&gt;setInitailClass&lt;/code&gt;当鼠标移上去时触发。在&lt;code&gt;setInitialClass&lt;/code&gt;事件处理器内部，将元素的类stateOne改变为stateTwo。&lt;/p&gt;
&lt;p&gt;再预览一下HTML文档。当你鼠标移到元素上时，你将看到transition被触发。它的触发原理就是当鼠标移上去后，元素的类值由stateOne改变为stateTwo。意思是，定义的&lt;code&gt;transition&lt;/code&gt;像鹰一样监视着元素的&lt;code&gt;opacity&lt;/code&gt;和&lt;code&gt;transform&lt;/code&gt;属性的变化。&lt;/p&gt;
&lt;p&gt;当然，一旦transition完成后，什么都不会发生。至少这里你什么情况都没看到。因为&lt;code&gt;transitionend&lt;/code&gt;事件没有生效，所以这里表面上什么都没有发生。在下一章节，让我们看看有什么面临的麻烦事！&lt;/p&gt;
&lt;h2&gt;Causing our Transition to Loop&lt;/h2&gt;
&lt;p&gt;现在，经过.2秒动画之后，元素的&lt;code&gt;class&lt;/code&gt;属性值变为stateTwo并变大。我们要做的就是把元素类名变回stateOne，要做的就是监听&lt;code&gt;transitionend&lt;/code&gt;事件。修改一下代码，看下面高亮行部分的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#circleDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mouseover&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInitialClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transitionend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;webkitTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mozTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setInitialClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateOne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刚添加的代码的大部分在&lt;a href="http://stormhouse.github.io/posts/2013/the-transitionend-event/"&gt;transitionend事件教程&lt;/a&gt;有详细的描述。所以，我要跳过这部分比较容易的内容。相反，我想专注于&lt;code&gt;loopTransition&lt;/code&gt;事件处理器发生了什么---当一个&lt;code&gt;transitionend&lt;/code&gt;事件触发时该事件处理器被调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loopTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateOne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;theCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stateTwo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面高亮行的代码（if代码块）等价于下图展示意义：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-9.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loopTransition&lt;/code&gt;每次被调用，代码将检测元素上的&lt;code&gt;class&lt;/code&gt;属性。如果元素当前的值为stateTwo，那么就将它的&lt;code&gt;class&lt;/code&gt;值设置为stateOne，以再次触发transition：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;如果当前元素的class为stateOne时loopTransition被调用，你应猜到设置class值为stateTwo，再次触发 transition：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131230-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;上述高亮行的代码目的就是保证transition永远追逐一个移动的靶子。换句话说，那5行代码的职责就是使transition循环。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;好吧，本篇内容要比我预期的更多一些。不管怎么说，你的目标就是保证transition永远不会停下来。方法就是确定监听transitionend 事件，当事件触发时修改元素被监听的属性。具体怎么实现你已经学会了，接下来的教程，我将带来一些结合所有知识点，比较酷的你从未见的例子。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 30 Dec 2013 20:49:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-30:posts/2013/looping-a-css-transition/</guid><category>animation</category></item><item><title>Get the Value of Animating CSS Properties（译）</title><link>http://stormhouse.github.io/posts/2013/get-the-value-of-animating-css-properties/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/get_the_value_of_css_properties_as_they_are_animating.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在理想的世界里，JavaScript会默默的坐在餐桌的一边。CSS将安静的坐在另一边。HTML会依旧那么尴尬，但我们不会谈论它。无论怎样，在某种程度上，这种情况存在相当一段时间。人们建造的东西很长一段时间的范围内下降这完美的世界。&lt;/p&gt;
&lt;p&gt;现在，web编程已经发生改变。JavaScript和CSS不再是小孩子了。不再像《辛普森一家》中的角色了，它们已经在一个世界里长大，JavaScript和CSS各自的职责已经越来越模糊了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131228-1.jpg" title="" /&gt;&lt;/p&gt;
&lt;p&gt;[ the Simpsons family has aged really well over the years (credit: usps) ]&lt;/p&gt;
&lt;p&gt;尤其是动画的到来使这种模糊变得更为显明。因为CSS3的animations和transitions的高性能，今天你看到越来越的纯粹使用CSS创建动画。你也能看到使用CSS和JavaScript结合创建动画。&lt;/p&gt;
&lt;p&gt;在本教程，我将提到一个很小但又非常重要的使用JavaScript和CSS交叉创建动画。这一点就是你使用JavaScript分析哪些是CSS的可动画属性。你将和我一样兴奋想知道如何做到这一点。&lt;/p&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;h2&gt;The Example&lt;/h2&gt;
&lt;p&gt;啥都没有变得无聊，有个示例变得更有感觉，所以我们看一个我提及的例子。将鼠标移到蓝色图片上：&lt;/p&gt;
&lt;iframe id="I1" border="0" frameborder="0" name="I1" scrolling="no" src="/demo/animation/value_of_animated_properties.html" style="width: 373px; height: 475px; border: 1px solid rgb(204, 204, 204); float: center;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;注意到当移动图片上，图片向上滑动。当发生滑动时，你应该在图片下方看到迅速变化的一组数字。这个数值是与你看到的滑动动画过程中的元素CSS属性的top值是一致的。&lt;/p&gt;
&lt;h2&gt;Let's Do This!&lt;/h2&gt;
&lt;p&gt;当动画运行中，为了获得CSS属性的值，需要搞清两件事。第一个就是该时段的主角，JavaScript函数&lt;code&gt;getComputedStyle&lt;/code&gt;。该函数最新的，适应于任意CSS属性。第二件是，搞清何时使用&lt;code&gt;getComputedStyle&lt;/code&gt;是非常重要的-尤其是你持续检测一个特殊的属性值。这是第二个难题。&lt;/p&gt;
&lt;p&gt;让我们更详细的看看这两个部分。&lt;/p&gt;
&lt;h4&gt;Say Hello to getComputedStyle&lt;/h4&gt;
&lt;p&gt;一般情况，你将通过下面这种方式获取指定的CSS属性值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;myElement.style.CSSPropertyName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你使用这种方式获取在动画过程中元素的属性值，你将会感到失望。这种方式只能获取定义在每个元素的style对象中的值。换句话说，只是一些显式定义在CSS中的属性值或通过JavaScript赋值的属性。&lt;/p&gt;
&lt;p&gt;动画运行中的元素属性值分为两类。一种是普通CSS属性值，另一种是深藏在运行时浏览器内部的值。用浅显的方法如使用&lt;code&gt;style&lt;/code&gt;对象元素获取实际的值。你需要更深层次的方式，那就是通过&lt;code&gt;getComputedStyle&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;该函数用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var myValue = getComputedStyle(myElement).CSSPropertyName;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过传入一个要计算的CSS属性的元素为参数，调用getComputedStyle函数。返回一个对象，指定元素的CSS属性名称。该函数返回你要查找元素的最终计算出的一个值。&lt;/p&gt;
&lt;p&gt;为了让此更为具体，下面代码就是上面滑动例子中返回&lt;code&gt;top&lt;/code&gt;样式属性值的片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var textField = document.getElementById(&amp;quot;results&amp;quot;);
var imageTopPosition = getComputedStyle(image).top;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码运行时，将获取&lt;code&gt;image&lt;/code&gt;元素的&lt;code&gt;top&lt;/code&gt;属性值-即使该属性也是在动画运行中。&lt;/p&gt;
&lt;h4&gt;Knowing When to Check the Property Value&lt;/h4&gt;
&lt;p&gt;现在你知道怎样获取在动画中的CSS属性值，一个小的难点就是搞清楚什么时候运行包含&lt;code&gt;getComputedStyle&lt;/code&gt;的代码。&lt;/p&gt;
&lt;p&gt;更可能的是，你要在持续动画中的获取一些属性的值。你可以通过使用的&lt;a href="http://www.kirupa.com/html5/frame_rates_html_javascript.htm"&gt;setInterval&lt;/a&gt;或使用更棒&lt;a href="http://www.kirupa.com/html5/animating_with_requestAnimationFrame.htm"&gt;requestAnimationFrame&lt;/a&gt;来完成。因为我们要在它们运行时，处理的动画和控制它们，&lt;code&gt;requestAnimationFrame&lt;/code&gt;是专为此事极佳的设计。&lt;/p&gt;
&lt;p&gt;然而我不会在这里很详细的介绍这个函数，你从我的requestAnimationFrame教程中，一定可以得到关于它的内容。在这个例子里我要讨论的是怎么用这个函数。&lt;/p&gt;
&lt;p&gt;看一下下面的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozRequestAnimationFrame&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitRequestAnimationFrame&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msRequestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imageTopPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getComputedStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;textField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imageTopPosition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到&lt;code&gt;updateValue&lt;/code&gt;函数中包括了帮助获取CSS任意属性的调用&lt;code&gt;getComputedStyle&lt;/code&gt;代码...该用例下，是&lt;code&gt;top&lt;/code&gt;。因为&lt;code&gt;requestAnimationFrame&lt;/code&gt;函数是同步浏览器的刷新率，在代码调用中更新每一帧的结果。这正是我们所想要的。&lt;/p&gt;
&lt;p&gt;This Works Everywhere!&lt;/p&gt;
&lt;p&gt;你可能在任意涉及轮循获取一个CSS属性值时使用&lt;code&gt;getComputedStyle&lt;/code&gt;。它不仅限于animations和transitions。Don't let the animation-heavy focus of this article keep you from enjoying the breadth of happiness getComputedStyle brings to the table。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;以后的动画将是由结合最的CSS和JavaScript来实现。我无法说我已经看到了未来是什么样子或你使用什么技巧和技术将获取成功。在这里，一切只代表现在，虽然知道如何使用JavaScript取得动画属性的值，我很肯定你会在即将到来的几个星期，几个月，甚至几年使用一大堆技术！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sat, 28 Dec 2013 21:11:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-28:posts/2013/get-the-value-of-animating-css-properties/</guid><category>animation</category></item><item><title>The TransitionEnd Event（译）</title><link>http://stormhouse.github.io/posts/2013/the-transitionend-event/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/the_transitionend_event.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;虽然 transition在CSS中着实占据一席之地，但它又与JavaScript有一定水平的协作。在与JavaScript协作时的事件领域展示了它自身。&lt;/p&gt;
&lt;p&gt;你已知道transition有三个状态：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131226-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;起始状态、过渡状态和终止状态。在这里，我将告诉你检测这三个状态的存在。不幸的是，这不可能做到的。你将必须接受这里只有一种状态存在，它是终止状态。这个事件被亲切的称之为&lt;code&gt;transitionend&lt;/code&gt;，本章是关于这部分的内容。&lt;/p&gt;
&lt;h2&gt;Meet the transitionend Event&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Transitionend&lt;/code&gt;事件原理很简单。该事件在transition一次过渡完成后被触发。让我给出CSS代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#blueCircle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#blueCircle&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS代码中，定义了一个transition，它应用在&lt;strong&gt;blueCircle&lt;/strong&gt; 元素上，在半秒内影响到它所有的属性。当你鼠标移到blueCircle 上，设置的&lt;code&gt;transform&lt;/code&gt;属性会使元素比例变大到300%，&lt;code&gt;opacity&lt;/code&gt;变为1。当你移上去后，你能想象到它发生什么变化，0.5秒后元素会变的更大和变得更加清晰。十分简单的例子。&lt;/p&gt;
&lt;p&gt;来看看如何检测transition到达终止状态吧。为了检测何时到达终止状态，将监听&lt;strong&gt;blueCircle&lt;/strong&gt; 的&lt;code&gt;transitionend&lt;/code&gt;事件何时触发。监听部分代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;blueCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#blueCircle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;blueCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transitionend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;blueCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;webkitTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;blueCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mozTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;blueCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;blueCircle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oTransitionEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了不考虑厂商前缀，事件监听和事件处理器两部分的代码都非常简单。当&lt;code&gt;transitionend&lt;/code&gt;事件被监测时，&lt;code&gt;detectTheEnd&lt;/code&gt;事件处理器将被调用。&lt;/p&gt;
&lt;h2&gt;The transitionend Event Handler&lt;/h2&gt;
&lt;p&gt;这个事件处理器内部什么都没做。&lt;code&gt;Transitionend&lt;/code&gt;事件不仅是在transition完成后触发一次。而是在每个CSS属性的&lt;strong&gt;每次&lt;/strong&gt;transition后都会触发。在我们的这个例子里，&lt;code&gt;transitionend&lt;/code&gt;事件将被触发两次-一次是&lt;code&gt;opacity&lt;/code&gt;属性，另一次是&lt;code&gt;transform&lt;/code&gt;属性改变后。&lt;/p&gt;
&lt;p&gt;因为事件被触发两次，意味着事件处理器也被调用两次。有可能的是，你不想让事件处理器调用两次-至少是在同一时延内的同一transition内。你不能阻止事件处理器调用两次。你能做什么呢，不过，在事件处理器中的代码可以保证你想的调用次数。
One way to ensure that is by checking the event argument's propertyName value for the CSS property the event is representing. Here is how that would look like when applied to our particular situation:==一种方法可保证，检测事件所代表的定义在事件参数&lt;code&gt;propertyName&lt;/code&gt;的值。下面代码就是针对我们这个例子的参数检测：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something interesting&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;尽管&lt;code&gt;detectTheEnd&lt;/code&gt;事件处理器将被调用两次，我关注的代码在&lt;code&gt;if&lt;/code&gt;语句为真时只调用一次。当作为&lt;code&gt;transitioned&lt;/code&gt;事件被&lt;code&gt;opacity&lt;/code&gt;属性触发的结果，它的事件处理器只执行一次。&lt;/p&gt;
&lt;h2&gt;Dealing With Multiple Transitions&lt;/h2&gt;
&lt;p&gt;对于单一的transition影响多个属性（就像上面我们提到的例子），在事件处理器内，处理比较简单。你不能用&lt;code&gt;propertyName&lt;/code&gt;来检测任意其它属性如&lt;code&gt;transform&lt;/code&gt;。原因是，对于&lt;code&gt;opacity&lt;/code&gt;和&lt;code&gt;transform&lt;/code&gt;属性在经过.5秒后，两个&lt;code&gt;transitionend&lt;/code&gt;事件几乎立即会触发。没有任何一点能打断代码的执行。&lt;/p&gt;
&lt;p&gt;如果你有不同时延的transitions影响着不同的CSS属性，这没机会打断代码的执行。在这个用例里，&lt;code&gt;transitionend&lt;/code&gt;事件将在&lt;strong&gt;不同的时间&lt;/strong&gt;被触发，你可依赖CSS属性，处理不同的事件。&lt;/p&gt;
&lt;p&gt;下面的代码就是处理刚才这种情形，两个transition结束于不同的时间点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#blueCircle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#blueCircle&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子里，&lt;code&gt;transitionend&lt;/code&gt;事件将在.5秒后触发一次和1秒后又触发一次。如果你想根据每个事件的&lt;code&gt;transitionend&lt;/code&gt;单独影响每个实例，扩展刚才展示的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detectTheEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something interesting&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something interesting&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特意检测&lt;code&gt;propertyName&lt;/code&gt;属性，根据哪个&lt;code&gt;transitioned&lt;/code&gt;事件，保证正确的代码被执行。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;乍一看，发现一个transition 什么时候结束貌似不那么重要。因为大多数第一眼，无法看到全部。一般情况，你不用关心transition何时结束。二般情况，知道transition何时结束极其重要的。尤其是在使用transition创建一个循环的动画时特别重要。在随后的文章里，我将着重介绍transitionend事件，能让你创建看似简单又很难做的相当相当有趣的动画。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 26 Dec 2013 20:32:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-26:posts/2013/the-transitionend-event/</guid><category>animation</category></item><item><title>The CSS Animation Events（译）</title><link>http://stormhouse.github.io/posts/2013/the-css-animation-events/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/css_animation_events.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当你的CSS animations运行时，它不仅是纯粹的视觉变化。在背后，它们在运行过程的某个关键点触发事件。在本节简短的内容中，你将学习这些事件以及如何在JavaScript中监听它们。&lt;/p&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;h2&gt;Meet the Animation Events&lt;/h2&gt;
&lt;p&gt;当一个animation运行时，三个被触发的相关动画事件为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;animationstart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animationend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animationiteration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据这些事件的名称可知它们分别表示的含义！&lt;code&gt;animationstart&lt;/code&gt;事件在一个animation起始时触发，&lt;code&gt;animationend&lt;/code&gt;事件在animation终止时触发，&lt;code&gt;animationiterration&lt;/code&gt;事件在除一第一次迭代外的每一次迭代开始触发。&lt;/p&gt;
&lt;p&gt;看下示意图，下图表示一个迭代为3次的简单animation：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131218-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;值得注意的一件事，不是说所有这三个事件都会被触发。唯一一个总是被触发的事件是&lt;code&gt;animationstart&lt;/code&gt;。&lt;code&gt;animationiteration&lt;/code&gt;事件会在&lt;strong&gt;第二次迭代&lt;/strong&gt;开始时被触发-animation设置的迭代至少大于一次。如果animation只运行一次，&lt;code&gt;animationiteration&lt;/code&gt;事件将永不被触发。&lt;code&gt;animationend&lt;/code&gt;事件在动画结束时的某个点触发（仅一次）。如果动画迭代次数无限次，这就没有结束...如果没有结束，&lt;code&gt;animationend&lt;/code&gt;事件将不会被触发。&lt;/p&gt;
&lt;h2&gt;What the Code Looks Like&lt;/h2&gt;
&lt;p&gt;现在你将学习关于这些事件初始内容，让我们看看在JavaScript中的这些事件：&lt;/p&gt;
&lt;p&gt;看下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#blah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationstart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationiteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有三个事件都被监听，你看到二部分代码。第一部分是给这些事件添加监听：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var element = document.querySelector(&amp;quot;#blah&amp;quot;);

element.addEventListener(animationstart, start, false);
element.addEventListener(animationiteration, update, false);
element.addEventListener(animationend, end, false);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二部分是定义这些事件被触发时，需执行的处理器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看到了吧，如此简单！现在代码中丢失一个重要的东西，它就是能确保事件被所有浏览器运行的浏览器厂商前缀：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#blah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationstart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mozAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationiteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mozAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msAnimationIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mozAnimationEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitAnimationEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msAnimationEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说一下我的代码中保留厂商前缀的部分。有幸的是，最新版本的主流浏览器不用使用前缀都能支持animations，这只针对比较旧的版本。幸运的是，在不久的将来厂商前缀都可被忽略的。&lt;/p&gt;
&lt;h2&gt;The Event Object&lt;/h2&gt;
&lt;p&gt;Animation事件将一些额外的数据当作它们的参数。这些事件参数在事件处理器里被捕获，正是你看到的&lt;code&gt;e&lt;/code&gt;变量，例如，在&lt;code&gt;start&lt;/code&gt;中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// react to the animationstart event&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个事件参数里可找到两个有趣的属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;animationName&lt;/li&gt;
&lt;li&gt;elapsedTime&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;animationName&lt;/code&gt;属性，正像你猜到的，返回这个特殊事件被触发的animation名称。&lt;code&gt;elapsedTime&lt;/code&gt;属性是animation动画实际开始运行到该函数（事件处理器）被触发时所经过的时间（秒）。当然，对于&lt;code&gt;animationstart&lt;/code&gt;事件，它的值是0，因为动画才刚刚开始。&lt;/p&gt;
&lt;h2&gt;The Usefulness of These Events&lt;/h2&gt;
&lt;p&gt;关于这一点，你已经知道所有的animation事件和怎样使用它们，找出一些在实际中使用它们的理由！这听有点困难。你在什么情况下想在start，iteration和end状态时做出反应呢？示例之外解释了这些事件的工作原理或想对动画做一些人为的控制，我找不到更好的理由，在实际中使用它们。如果你有一些好的使用场景，随意的贴到论坛中让我知道。&lt;/p&gt;
&lt;p&gt;我唯一使用的animation触发事件是在关键帧处触发的事件。使用这个事件，可以在页面中同步不同部分，并作为新的animation关键帧。可以展示动画的进度。可以在有趣的关键帧暂停。这将有一些比较酷或特别的事件去做。唉，此类事件并不怎么存在。你会发现第三种使用它的理由来添充这里的空白，但当我尝试使用它们时，会太复杂和有太多的怪癖。&lt;/p&gt;
&lt;p&gt;总之，三个事件不怎么实用。其中任意一个也不怎么有用。像《黑道家族》中的人物沮丧地说，当面对一些它们不会做任何事情，“你要做吗！”&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Wed, 18 Dec 2013 11:30:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-18:posts/2013/the-css-animation-events/</guid><category>animation</category></item><item><title>Animating Movement Smoothly Using CSS（译）</title><link>http://stormhouse.github.io/posts/2013/animating-movement-smoothly-using-css/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/animating_movement_smoothly_using_css.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;使动画有趣的很大一部分就是让物体在屏幕上四处游走。适当的使用它们，为你的内容添加更多色彩，突显一些UI元素、提供一些动画交互等等。这是相当酷滴。&lt;/p&gt;
&lt;p&gt;看下面这个比较疯狂的动画：&lt;/p&gt;
&lt;iframe id="I2" border="0" frameborder="0" name="I2" scrolling="no" src="/demo/animation/random_moving_blue_circles.html" style="width: 623px; height: 375px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;也可看一下更加微妙的动画，比如下面例子，当鼠标移到方框上时发生的变化：&lt;/p&gt;
&lt;iframe id="I1" border="0" frameborder="0" name="I1" scrolling="no" src="/demo/animation/sliding_image_transform.html" style="width: 373px; height: 373px; border: 1px solid rgb(204, 204, 204); float: center;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;在上面的两个例子中，动画效果完成使用CSS完成的。CSS中的Animations和Transitions很容易能让元素从静止状态变成运动状态。尽管是那么容易，这也需要你保证一些东西确保动画平滑的运行。本节内容帮助你如何创建它们。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h2&gt;Say Hello to the translate3d() Transform&lt;/h2&gt;
&lt;p&gt;当你移动一个元素，你要改变它的垂直和水平位置。在CSS里有很多属性可做到，但我仍建议你使用 &lt;code&gt;transform&lt;/code&gt; 属性的&lt;code&gt;translate3d&lt;/code&gt; 函数。在后面我会证明，为什么用这个属性而不用一般的属性如&lt;code&gt;margin,&lt;/code&gt;padding&lt;code&gt;,&lt;/code&gt;left&lt;code&gt;,&lt;/code&gt;top&lt;code&gt;。 最基本的原因是&lt;/code&gt;translate3d`能生产出流畅和平滑的动画。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Translate3d&lt;/code&gt; 函数有3个参数，我们主要看下前两个参数，用于元素移动的横向和纵向坐标：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131212-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;指定的x参数表示元素水平移动的距离。指定的y参数表示元素垂直移动的距离。例如，你想让元素向右和上移动20像素，&lt;code&gt;translate3d&lt;/code&gt; 函数的定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.foo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="nf"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们先不去看的一个参数是指定元素移动的z方向（垂直于屏幕的方向）的移动。因为我们先主要关注2d的移动，将忽略它设置为0不做任何事。&lt;/p&gt;
&lt;p&gt;正如你所看到的，&lt;code&gt;translate3d&lt;/code&gt; 函数不是那么深奥或复杂。在下一节里，让我们进一步看下它作为CSS Transition或Animation的一部分来模拟运动。&lt;/p&gt;
&lt;h4&gt;Transition&lt;/h4&gt;
&lt;p&gt;在transition里使用这个属性，需要做两步。第一步，你在transition属性里添加对&lt;code&gt;transform&lt;/code&gt; 属性的监听：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="nf"&gt;transform&lt;/span&gt; &lt;span class="no"&gt;.2s&lt;/span&gt; &lt;span class="no"&gt;ease-in-out&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据transition里的定义，使用&lt;code&gt;translate3d&lt;/code&gt; 函数声明&lt;code&gt;transform&lt;/code&gt; 属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;hover&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform:&lt;/span&gt; &lt;span class="nf"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就像本篇最前面一个例子展示一样，鼠标移到图片上后，触发transform，图片向上精确移动150像素。&lt;/p&gt;
&lt;h4&gt;Animation&lt;/h4&gt;
&lt;p&gt;对于animations，在&lt;code&gt;@keyframes&lt;/code&gt;定义的关键帧里，使用&lt;code&gt;translate3d&lt;/code&gt;函数声明&lt;code&gt;transform&lt;/code&gt;属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animations/"&gt;All About CSS Animations&lt;/a&gt; 可以看它的运行，那么我就不在这里重复。&lt;/p&gt;
&lt;h6&gt;Don't Forget About Vendor Prefixes&lt;/h6&gt;
&lt;p&gt;为了确定你的代码在各种浏览器上运行，需要对&lt;code&gt;transform&lt;/code&gt; 属性添加前缀，或使用类似 &lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free&lt;/a&gt;的库。在我的关于&lt;a href="http://pan.baidu.com/s/1eQqVXoY"&gt;这部分内容的视频&lt;/a&gt;里，能学到更多的内容。&lt;/p&gt;
&lt;h2&gt;Translating Using JavaScript&lt;/h2&gt;
&lt;p&gt;如果你碰巧在JavaScript里使用它们。也比较类似。只需在translate3d 中设置横纵位置，这块有稍微有点复杂。
The snippet of code you will need looks approximately as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSupportedPropertyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;msTransform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;webkitTransform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mozTransform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oTransform&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#theItem&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;transformProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getSupportedPropertyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformProperty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;transformProperty&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someValueX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;someValueY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码看起来比较繁琐而简单，因为要检测属性前缀，确保使用正确的&lt;code&gt;transform&lt;/code&gt; 属性。在JavaScript里你可以学习更多关于属性前缀处理的内容，尤其是后面的教程里。&lt;/p&gt;
&lt;h2&gt;What's Wrong With Setting Margin, Top, Left, etc.?&lt;/h2&gt;
&lt;p&gt;当讨论&lt;code&gt;translate3d&lt;/code&gt; 函数位移的时候，我都总是会问这个问题（使用margin，top，left进行位移怎么啦）。出于对动画的目的，除非你有特殊需要，不要使用 &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;,或&lt;code&gt;right&lt;/code&gt; 这些属性。的确是这样的。也许你使用这些属性用于一些不同定位相关（position相关：fixed, absolute...）的目的，我理解这有点违反常理。我最极端的理由就是性能问题。我来解释下吧...&lt;/p&gt;
&lt;h4&gt;Unnecessary Layout Calculations&lt;/h4&gt;
&lt;p&gt;每当你修改我上面列出的CSS属性，浏览器会做些额外的工作，去计算这些CSS如何影响你的整个文档的布局。我并不是反对你使用这些属性帮助布局。在文档加载和重新调整大小时使用它比较好。在animation 或transition里，&lt;a href="http://www.kirupa.com/html5/frame_rates_html_javascript.htm"&gt;每秒60次&lt;/a&gt;的使用或修改它们的值是非常不好的。&lt;/p&gt;
&lt;p&gt;你可能设置元素的&lt;code&gt;position&lt;/code&gt; 为&lt;code&gt;fixed&lt;/code&gt; 或 &lt;code&gt;absolute&lt;/code&gt;.。能避免浏览器对整个文档的重新布局。这也是一种优化，浏览器仍然会在盒模块元素上做一些布局的计算。这仍是不必要的，因为设置&lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;和使用&lt;code&gt;translate3d&lt;/code&gt; 的结果是一样的。好吧，下节中你会看到，这也不是100%全部的原因。&lt;/p&gt;
&lt;h4&gt;Hardware Acceleration&lt;/h4&gt;
&lt;p&gt;当处理在屏幕上显示的元素，背后通过CPU或GPU来计算这些它们。一般来说，你更应该依靠GPU来做所有的显示工作...尤其是像动画这种任务：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131212-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;原因是GPU只专注一件事---处理你的显示任务。另一方面，CPU，必须去处理其它的一些事件。确保你的动画顺畅运行，不优先在它的任务列表内。这种差异，尤其在功能强大的桌面电脑（笔记本电脑）和移动设备如iPad或iPhone之间更为明显。个人意见，使用CPU处理动画比使用GPU更加狂躁。&lt;/p&gt;
&lt;p&gt;怎样确定你的动画运行在GPU硬件模式下呢？使用&lt;code&gt;translate3d&lt;/code&gt; ！当你在元素上使用tranform，基于Webkit内核的浏览器中如Chrome和Safari(同样是iPhone和iPad中使用的)、IE9/20和最新版本的Firefox，该元素就会在GPU的控制范围内。在我书中介绍到&lt;code&gt;translate3d&lt;/code&gt; 是明显胜出的。&lt;/p&gt;
&lt;h6&gt;What About JavaScript?&lt;/h6&gt;
&lt;p&gt;使用JavaScript创建的动画所有的插值都是通过代码处理的，我真的不知道是否启用了GPU。我想知道的是，用JavaScript设置CSS的transitions和animations的translate3d属性是否通过了GPU的帮助。这是很情理之中的。当用JavaScript设置animation或transion的重要属性，开始点到结束点之间的插值由浏览器的动画系统完成的。前面蓝色圆形的例子证明这一点。&lt;/p&gt;
&lt;h2&gt;God Bless Transforms&lt;/h2&gt;
&lt;p&gt;总之transforms有很高的性能，因为它不会影响到其它元素（no re-layout，没有重新布局）。任何操纵都适合该属性，浏览器不会重绘整个窗口。它只重绘屏幕上的一部分---移动的内容。这是独立的部分不管GPU有没有参与进来。使用transform的&lt;code&gt;translate3d&lt;/code&gt; ，部分重绘仍旧有效，因为它仍就是transform属性。使用这个特殊的transform，你也得益于GPU处理的性能。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 12 Dec 2013 15:12:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-12:posts/2013/animating-movement-smoothly-using-css/</guid><category>animation</category></item><item><title>Easing Functions in CSS3（译）</title><link>http://stormhouse.github.io/posts/2013/easing-functions-in-css3/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/easing_functions_css3.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当你创建一个animation或transition的动画，动画运行过程中属性发生的变化与在终止状态时发生的变化同等重要。比如，属性值随时间线性变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在这个例子里，动画看起来不会加速也不会减速。动画以固定单调的速率移动。你可以通过更多的一些属性风格变化把动画提高一个档次：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，开始时属性值变化的比较快，接近终止时变慢。&lt;/p&gt;
&lt;p&gt;上面两个例子中，最终结果是相同的。起始状态，确定一个属性初始值。终止状态，经过指定的时延后，变为终止值。如果只在动画起始和终止状态睁开眼，而在动画运行过程中闭上眼，你看不到两个动画的区别。唯一不同的是，在动画生命过程中不同时间段属性值变化的速率，一个是线性的另一个是非线性的。&lt;/p&gt;
&lt;p&gt;动画属性如何从初始值到终止值变化的速率有个名字。这个名字是&lt;strong&gt;easing function&lt;/strong&gt;，该内容将贯穿本章始终。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h2&gt;Making Sense of Easing Functions&lt;/h2&gt;
&lt;p&gt;在前面小节中，谈到缓动函数时，两种不同颜色图表展示属性如何变化。其中一个颜色的线性缓动函数没做太多的东西。另一个颜色的非线性缓动函数，在你的动画运行后，速率减慢。在本节中，让我们转换下视角，关注于缓动函数而不去关注实际属性值的变化和时延。在该部分里，你将看到一些可爱的图表包括lines, labels, numbers和其它你在学校没有见过的东西。噢耶！&lt;/p&gt;
&lt;h4&gt;Meet the Easing Function Curve&lt;/h4&gt;
&lt;p&gt;无论是谁在什么时候谈论缓动函数，它仅是关于时间的一个图表，就是众所周知的&lt;strong&gt;缓动函数曲线图&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;掌握缓动函数非常重要的一部分就是怎样绘制和理解这个曲线图，那么让我们看看怎样定义该图表吧。我们需要一个羔羊（实例）来帮助我们理解。这里有一个例子。&lt;/p&gt;
&lt;h6&gt;The Example&lt;/h6&gt;
&lt;p&gt;这个例子比较简单。我们使用linear缓动函数将元素的&lt;code&gt;opacity&lt;/code&gt;属性值&lt;strong&gt;线性的&lt;/strong&gt;在2秒内从1改变到0。这可使用animation也可使用transition--这真没什么关系。&lt;/p&gt;
&lt;p&gt;该例的曲线图是绘制时延（2秒）和opacity值，如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;通过这个图表，很简单的看出，在2秒内的任意时间点&lt;code&gt;opacity&lt;/code&gt;属性值是多少。在&lt;strong&gt;1&lt;/strong&gt;秒的位置，&lt;code&gt;opacity&lt;/code&gt;属性值为&lt;strong&gt;.5&lt;/strong&gt;。在&lt;strong&gt;1.5&lt;/strong&gt;秒的位置&lt;code&gt;opacity&lt;/code&gt;属性值为&lt;strong&gt;.25&lt;/strong&gt;，等等。&lt;/p&gt;
&lt;h6&gt;Visualizing Easing Functions&lt;/h6&gt;
&lt;p&gt;在这里，事情变得有趣起来。缓动函数定义属性改变的速率。给定时间点的属性值是多少 和动画属性从初始值到终止值如何改变一样不重要。意思是上面绘制的图表不是最好的。让我们扩展一下，使用百分比绘制一个缓动函数曲线图。&lt;/p&gt;
&lt;p&gt;不使用具体的属性值和时延绘制它们，而用&lt;strong&gt;比率&lt;/strong&gt;代替它们。相比于动画属性值实际变化了多少，我们使用百分比表示当前值与终止值的比率。把前面的图表转化为我们期望的图表看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;尽管看起来与前面的图表不同，但之前的细节仍能在这里表现出来。你需更深入一些。在这个例子里，&lt;code&gt;opacity&lt;/code&gt;属性值从开始的1变化为结束时的0。起始状态动画完成了0%，&lt;code&gt;opacity&lt;/code&gt;属性值是到达终止值0的0%:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;蓝线就是开始于属性值的0%处。&lt;/p&gt;
&lt;p&gt;当你的动画完成后，你的opacity属性值是0——即终止值。另一种说法是它需要达到100%的那个地方，动画已经完成：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;就像你所看到的一样，蓝线的属性在100%处结束，因为它的变化是线性的，你得到的一条直线从左下角(0%，0%)到右上角(100%，100%)。&lt;/p&gt;
&lt;p&gt;随着这个具有代表性的动画，要注意的是，在开始和结束时关注的属性实际值已不再那么重要。opacity属性值可以是0和1之间的其他值，color属性值可以是#FFFFF 和 #00000 之间的值，可以是一些正值和负值，还可以是一些更多的东西。动画可以是0.2秒的时延或者600秒的时延已不再重要。在这一点上，将全部讨论的细节放到完成的比率。&lt;strong&gt;最重要的是动画生命周期中任意点与最终值的比率是多少&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;Visualizing Easing Functions...for Real This Time!&lt;/h4&gt;
&lt;p&gt;本小节的标题含义没有太多的戏剧性。上节看到的基于百分比的图表包含缓动函数。我并没有强调它们，是因为还不是时候：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;蓝色的曲线表示笼统的缓动函数。现在你知道了这一点，那就让我们更深入的研究这个曲线吧。&lt;/p&gt;
&lt;h6&gt;Linear Cases&lt;/h6&gt;
&lt;p&gt;对于一个线性来说，正如你刚才所看到的，最终结果就是一条直线。动画紧密的完成移动过程：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-9.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;着重谈一下吧，任意选择一点，例如选择30%完成率的位置，表示属性值改变了多少，以及动画运行了多久。图上的映射将得出，在2秒内属性值从1改变到0，30%处表示了opacity值为0.7，用时0.6秒。这是一个比较简单的乘法运算。&lt;/p&gt;
&lt;p&gt;在大多数情况下，&lt;strong&gt;你实际不需做&lt;/strong&gt;任何乘法运算，将基于百分比类似的东西转化为实际值。你需要知道的就是看看缓动函数曲线是怎样影响你的动画的。就像这样一条直线，很清晰的看到它将如何影响你的动画。&lt;/p&gt;
&lt;h6&gt;The Awesome Non-Linear Cases&lt;/h6&gt;
&lt;p&gt;当然，不是所有的函数都像线性缓动函数那样简单。更多特殊的非线性用例，属性的变化与动画实现完成相差多少:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;例如，看一看动画完成75%的时候所处的位置吧：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;从图表中看到，动画完成75%并不意味着最终属性值改变了75%。而看起来更像45%。看一下缓动函数曲线，到终止前，属性值的变化率赶不上动画的完成率。意思是动画开始运行时比较缓慢，然后不断加速。不同的缓动函数所起的作用不同，一会你就将看到这些不同的缓动函数。&lt;/p&gt;
&lt;h4&gt;What You Can and Can't Do&lt;/h4&gt;
&lt;p&gt;看来理论上的学习都已经完成了。最后，在深入学习这无聊的概述之前，大致看看你在CSS缓动函数中能做什么和不能做什么。&lt;/p&gt;
&lt;h6&gt;You Always Start at 0% and End at 100%&lt;/h6&gt;
&lt;p&gt;也许你知道的最大一个限制是&lt;strong&gt;属性的变化过程始终是开始于0%和结束于100%&lt;/strong&gt;。不管缓动函数在中间过程做任意东西。起始和结束状态清晰定义的属性值不能被改变:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-12.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这是什么意思呢？意思是缓动函数&lt;strong&gt;不能&lt;/strong&gt;使你的动画开始于除初始值外的其它值。同样地，动画结束时，缓动函数也&lt;strong&gt;不&lt;/strong&gt;让更改你的属性为除终止值外的其它值。在起始和结束状态之间，缓动函数可以做许多不同的疯狂事情。只有这些，在起始和结束状态保持这种秩序。&lt;/p&gt;
&lt;h6&gt;There Is No Box&lt;/h6&gt;
&lt;p&gt;说到起始和结束状态之外的疯狂事件，属性值可以改变为除0%-100%之外的东西：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-13.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;属性值超出初始值和终止值的范围是让你动画变得更真实的一个重要细节。 &lt;a href="http://en.wikipedia.org/wiki/12_basic_principles_of_animation#Follow_through_and_overlapping_action"&gt;12 Basic Principles of Animation&lt;/a&gt; 中的一个称为 Follow through. Follow through描述了一个动画技术不能立刻停止下来。它会稍微超出终止值，然后返回原点。这是很有用的技术，运行中可超出0%-100%的值。&lt;/p&gt;
&lt;h2&gt;My Name is Curve...Cubic Bezier Curve!&lt;/h2&gt;
&lt;p&gt;至此，我们粗略的介绍了缓动函数。作为学习它的一部分，如用手工绘制是能接受的。现在我们来更进一步的、更精准的学习缓动函数。从更正式的缓动函数曲线开始吧。&lt;/p&gt;
&lt;p&gt;缓动函数曲线不是简单的称为缓动函数曲线。它有一个简单的学名。它们更正式的被称为 &lt;strong&gt;cubic bezier curves&lt;/strong&gt;（三次贝塞尔曲线）.。当然我不会深入讨论数学上三次贝塞尔曲线的东西，这里提供足够的信息可以让你有效的用它们创建有意思的动画。&lt;/p&gt;
&lt;p&gt;让我们开始看一下缓动函...呃...是贝塞尔曲线：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-14.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这个曲线不像是从马车上跌落的东西。它是用数学上曲线函数，表示它是由很多精准点组成的集合：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-15.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你只需要知道的是三次贝塞尔曲线由4个点创建。我已经在图上标注了那4个点，P0, P1, P2, 和 P3.。在这个图表中每个点由两个表示横纵坐标的值组成--两个值是 &lt;strong&gt;x&lt;/strong&gt; 和 &lt;strong&gt;y&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-16.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;我用数值而不是使用百分比来表示这些点，是因为通常很少在三次贝塞尔曲线中用到百分比。从上面的图中，很容易获取P1 和P2 的值。我仅是将这完成率和属性变化率转变为数值型。请注意这里我没有标注P0 and P3 是因为它们 在HTML的值总是 (0, 0) 和(1, 1)。&lt;/p&gt;
&lt;p&gt;这些点的值极其重要，不仅是因为在图表中能很好的标注它们。而且这些是&lt;strong&gt;被指定在CSS中的值&lt;/strong&gt;----很快你就能看到了。&lt;/p&gt;
&lt;h2&gt;Easing Functions in CSS&lt;/h2&gt;
&lt;p&gt;最后，我们不去讨论图表而转到CSS范围内。CSS属性中的两个清晰的命名为 &lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;animation-timing-function&lt;/code&gt; 可以定义缓动函数。 它们的名称出卖了它们。在CSS animations里使用 &lt;code&gt;animation-timing-function&lt;/code&gt; 在CSS transitions中使用 &lt;code&gt;transition-timing-function&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;让我们快速看看这些时间函数各自的用武之地吧。&lt;/p&gt;
&lt;h4&gt;Easing Functions in Animations&lt;/h4&gt;
&lt;p&gt;在CSS animation中， &lt;code&gt;animation-timing-function&lt;/code&gt; 属性被定义在两个地方。一个是animation声明的一部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* shorthand */&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* longhand */&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;somethingSomethingDarkSide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deathstar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它也可被声明在单独的关键帧中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在animation中声明一个缓动函数，实际意思是它包括的每一个关键帧都将受这个缓动函数的影响。这与将 &lt;code&gt;animation-timing-function&lt;/code&gt; 分别定义在每一个关键帧中没有什么不同。但这样你可以少敲一些字符。&lt;/p&gt;
&lt;p&gt;因为级联关系，定义在关键帧中的一个缓动函数将覆盖掉animation声明的缓动函数。这是一件好理解的事，能在不同地方（关键帧）混合使用缓动函数。需要注意的最后一件事是，定义在一个关键帧中的&lt;code&gt;animation-timing-function&lt;/code&gt;只会影响 从当前关键帧运行到下一关键帧动画过程。意思是你不能在最后一个关键帧中定义缓动函数，因为动画没有下一帧了。如果你真的给最后一帧声明了缓动函数，它会被忽略掉...你真定义它会被笑话的。&lt;/p&gt;
&lt;h4&gt;Easing Functions in Transitions&lt;/h4&gt;
&lt;p&gt;Transitions中的缓动函数比较简单些，&lt;code&gt;transition-timing-function&lt;/code&gt; 只能被声明在transition属性中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* shorthand */&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* longhand */&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;karmaKramer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;公平的讲，使用transition，没有第二个地方可以声明缓动函数，所以不要过多的赞美它。&lt;/p&gt;
&lt;h6&gt;Note - Default Timing Function Values&lt;/h6&gt;
&lt;p&gt;Animation或 transition中设置缓动函数是可选的。原因是任意一个animation或transition默认会有一个缓动函数值---ease。&lt;/p&gt;
&lt;h4&gt;Meet the Easing Functions / Timing Functions&lt;/h4&gt;
&lt;p&gt;现在你已经知道怎样CSS中定义缓动函数了，让我们实际看一下这些不同的缓动函数吧。你可设置的&lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;animation-timing-function&lt;/code&gt; 属性值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ease&lt;/li&gt;
&lt;li&gt;linear&lt;/li&gt;
&lt;li&gt;ease-in&lt;/li&gt;
&lt;li&gt;ease-out&lt;/li&gt;
&lt;li&gt;ease-in-out&lt;/li&gt;
&lt;li&gt;step-start&lt;/li&gt;
&lt;li&gt;step-end&lt;/li&gt;
&lt;li&gt;steps()&lt;/li&gt;
&lt;li&gt;cubic-bezier()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的几节中，我会在某种程度上解释每一个函数。&lt;/p&gt;
&lt;h6&gt;cubic-bezier()&lt;/h6&gt;
&lt;p&gt;让我们从最具有目的性的&lt;strong&gt;三次贝塞尔曲线函数&lt;/strong&gt;开始吧。这个函数有4个参数，这些参数分别映射曲线中 P1 和P2 ：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-17.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;前两个参数是x和y，表示 P1点。后两个参数表示P2：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-18.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;P0 和 P3 不用管，因为它们是固定的。如果你还记得前面内容，它们是起始点和结束点的值。完全不用管它们，确实如此。&lt;/p&gt;
&lt;p&gt;当把这些参数放进去的时候，你的&lt;strong&gt;贝塞尔缓动函数&lt;/strong&gt;看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.foo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="nf"&gt;transform&lt;/span&gt; &lt;span class="no"&gt;.5s&lt;/span&gt; &lt;span class="no"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;.41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;.78&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从实际出发，不需要你将一些随机值放到函数中，测试一下看是不是想要结果。那简直太浪费时间了。你要做的是访问这个在线工具，来简化你的工作。&lt;/p&gt;
&lt;p&gt;我最喜爱的在线资源是 Lea Verou's的 &lt;a href="http://cubic-bezier.com/"&gt;cubic-bezier generator&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-19.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;她的工具可让生成你想要的任意可用的缓动函数。你使用它玩三次贝塞尔曲线，预览它生成什么样的动画，并容易得到CSS中贝塞尔函数的参数值。&lt;/p&gt;
&lt;p&gt;另一个我喜欢的网站是&lt;a href="http://twitter.com/matthewlein"&gt;Matthew Lein&lt;/a&gt; 写的&lt;a href="http://matthewlein.com/ceaser/"&gt;CSS Easing Animation&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-20.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;==不仅可以生成CSS内嵌缓动函数，还可生成 Robert Penner 的 easing equations，并可预览它们。&lt;/p&gt;
&lt;p&gt;使用Lea 和Matthew 的网站，你不用尝试痛苦的摆弄三次贝塞尔定义点的值，只需键入它们的参数。&lt;/p&gt;
&lt;h6&gt;The Other Easing Functions&lt;/h6&gt;
&lt;p&gt;现在你已经知道如何定义一个 &lt;strong&gt;cubic-bezier&lt;/strong&gt;() 函数，你可凭想象创建任意种类的该函数。这个函数的唯一缺点就是你必须指定创建该曲线的4个参数。上面的两个站点工具能帮你做这事，但你也可指定一些内建的缓动函数，比如&lt;strong&gt;ease&lt;/strong&gt;, &lt;strong&gt;linear&lt;/strong&gt;, &lt;strong&gt;ease-in&lt;/strong&gt;, &lt;strong&gt;ease-out&lt;/strong&gt;, 和&lt;strong&gt;ease-in-out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些内建函数提供一种快捷方式。你可使用cubic-bezier函数重定义它们。也这是，这些是非常棒的。这些cubic bezier 曲线看起来如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-21.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;在上面的图表中，我单独将&lt;strong&gt;ease&lt;/strong&gt;缓动函数列到首位，不仅是因为它是一个函数标志，还因为它是&lt;code&gt;transition-timing-function&lt;/code&gt; 和 &lt;code&gt;animation-timing-function&lt;/code&gt; 这两个函数的默认值。&lt;/p&gt;
&lt;h6&gt;The step function&lt;/h6&gt;
&lt;p&gt;最后要讲的是，我们看一下一些影响你属性改变速率的其它东西，但它不是缓动函数。这种不是缓动函数被称之为 &lt;strong&gt;step function&lt;/strong&gt;（步进函数）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131208-22.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Step function是很特别的。它影响着不同间隔内运行的动画。例如，你看到上面图表中的第一个阶段，动画属性比率开始于0%处。在完成率50%标记处，动画一下子跳到50%。在动画完成时属性的比率到达100%。这些不同帧或步都不是平滑的。结果看起来有点像锯齿。&lt;/p&gt;
&lt;p&gt;在CSS中，使用 steps 函数定义步进函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="nf"&gt;top&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;s&lt;/span&gt; &lt;span class="no"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步进函数有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;总步数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;第二个参数值为start或end，用来指定动画在每一步的开始时触发，还是在每一步的结束时触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果我想让动画分成5步并在每步的结束时触发，步进函数的定义看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.pictureContainer&lt;/span&gt; &lt;span class="no"&gt;img&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition:&lt;/span&gt; &lt;span class="nf"&gt;top&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;s&lt;/span&gt; &lt;span class="no"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的一件事是，指定越多的步数，动画越平滑。毕竟，把每一步当做动画的每一帧。相同时间内，定义越多的帧，最终的动画越平滑，这同样适用于步进声明的动画。&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;鉴于一般流行和计算机生成的动画，你可阅读关于它们更多好东西的细节。下面列出我最喜欢的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/TR/2013/WD-css3-transitions-20130212/#single-transition-timing-function"&gt;W3C's Overview of Easing Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matthewlein.com/ceaser/"&gt;CSS Easing Animation Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://easings.net/"&gt;Easing Function Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf"&gt;Robert Penner's Chapter on Tweening and Easing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danro/jquery-easing/blob/master/jquery.easing.js"&gt;jQuery Easing Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sun, 08 Dec 2013 16:27:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-08:posts/2013/easing-functions-in-css3/</guid><category>animation</category></item><item><title>CSS3: Animations vs. Transitions（译）</title><link>http://stormhouse.github.io/posts/2013/animations-vs-transitions/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/css3_animations_vs_transitions.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在CSS中，视觉变化上这里有两种技术竞相你的注意： Animations &amp;amp;Transitions. 在本文中，让我们来了解它们之间的异同点，这样你就能知道在什么时候使用哪一个。&lt;/p&gt;
&lt;p&gt;本文大部分内容帮助你熟悉animations和transitions。如果你还没有亲自动手实践它们， &lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animations/"&gt;Creating a Simple CSS Animation&lt;/a&gt; 和&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitions/"&gt;Looking at CSS3 Transitions&lt;/a&gt;  这两篇教程帮助你开始。&lt;/p&gt;
&lt;h2&gt;Similarities&lt;/h2&gt;
&lt;p&gt;宏观上，animations和transitions极其相似。它们都可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定要监听CSS属性的变化&lt;/li&gt;
&lt;li&gt;设置缓动函数改变属性从开始到结束值变化的速率。&lt;/li&gt;
&lt;li&gt;指定animation或transition所需要运行的多长时间&lt;/li&gt;
&lt;li&gt;以编程方式监听animation和transition规定事件，可以做自己想做的事。&lt;/li&gt;
&lt;li&gt;CSS可视化的属性改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过，除了这些，你将看到animations 和 transitions的不同，并将它们的特点展现出来。让我们来更详细的看下各自的特点吧。&lt;/p&gt;
&lt;h2&gt;Differences&lt;/h2&gt;
&lt;p&gt;Animations 和 transitions会在以下方面会有不同：当你如何触发它们运行时、它们是否容易循环、定义一个transition是多么复杂、怎么在正确场合的使用它们和与JavaScript友好的结合。来更详细的探讨这些话题吧。&lt;/p&gt;
&lt;h4&gt;Triggering&lt;/h4&gt;
&lt;p&gt;正如刚看到的animations和animations最大的一个不同就是你怎样触发它们运行。&lt;/p&gt;
&lt;p&gt;transition被触发的唯一场景就是CSS属性发生变化。一个简单的场景就是：CSS属性中的 &lt;code&gt;:hover&lt;/code&gt; 伪类发生改变：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;看这个可视化的例子，假设定义一个transition，当鼠标移上去你将看到圆形会变大。另一个触发transition运行的方式是使用JavaScript &lt;a href="http://www.kirupa.com/html5/setting_css_styles_using_javascript.htm"&gt;programmatically add or remove CSS classes&lt;/a&gt; 模拟CSS属性的变化。除了让属性值发生改变的方式，可以监听使用JavaScript改变inline的样式方式。&lt;/p&gt;
&lt;p&gt;另一方面，animations，不需要显式的触发。一旦你定义了animation，它将自动运行。&lt;/p&gt;
&lt;h6&gt;Note&lt;/h6&gt;
&lt;p&gt;Animations可以把&lt;code&gt;animation-play-state&lt;/code&gt;属性设置为Paused——这将导致动画默认不动，除非将属性更改为运行。W3C正在考虑删除这个属性，所以到目前为止，就当&lt;code&gt;animation-play-state&lt;/code&gt;这个属性不存在吧。&lt;/p&gt;
&lt;h4&gt;Looping&lt;/h4&gt;
&lt;p&gt;这个相当简单。在animations中通过设置 &lt;code&gt;animation-iteration-count&lt;/code&gt; 属性来很简单的设置循环。可以设置固定数值来规定动画重复的次数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想让动画永远的循环下去，也可以这样设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一方面，transitions没有一个属性可以指定它运行多少次。一旦触发，transition只运行一次。可以在&lt;code&gt;transitionEnd&lt;/code&gt;事件中设置让它循环。与animations相比，这比较复杂。&lt;/p&gt;
&lt;h4&gt;Defining Intermediate Points / Keyframes&lt;/h4&gt;
&lt;p&gt;使用animation，可以通过在起始与终止状态之间定义关键帧，更多的控制CSS属性值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可以设置你所想要的关键帧，当animation运行时，每个关键帧触发时，指定的属性变化都会表现出来。这允许你创建多种类型的动画，就像Flash一样，让HTML5更高效的创建更成熟的动画。&lt;/p&gt;
&lt;p&gt;使用transition，除了在动画的结束时，你没有太多的动画控制：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131205-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;Transition只是简单的从初始状态运行到终止状态。你不能像animation一样指定任意中间状态，所以你如果想创建Teen Girl Squad 或一个复杂的动画，transition不是一个好的选择。&lt;/p&gt;
&lt;h4&gt;Specifying Properties Up-Front&lt;/h4&gt;
&lt;p&gt;接下来，定义一个transition，描述animations和transitions的适应场景。&lt;/p&gt;
&lt;p&gt;在一种场合，需要使用transitions。每个CSS属性都必须通过transition显式的标识。
For example, let's say you have something like the following:==例如，假设你有类似下面的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#mainContent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#mainContent&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;鼠标移到上面，对 &lt;code&gt;background-color&lt;/code&gt;和 &lt;code&gt;width&lt;/code&gt;两个属性指定了不同值。transition只规定了&lt;code&gt;background-color&lt;/code&gt; 。意味着，浏览器仅监听&lt;code&gt;background-color&lt;/code&gt; 属性的变化。&lt;/p&gt;
&lt;p&gt;如果想让 &lt;code&gt;background-color&lt;/code&gt; 和&lt;code&gt;width&lt;/code&gt; 都受transition影响，我应该为&lt;code&gt;width&lt;/code&gt;显式的添加另一个 &lt;code&gt;transition&lt;/code&gt; 的条目：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#mainContent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;width&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#mainContent&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;What About transition: all?&lt;/h6&gt;
&lt;p&gt;当使用transition时，不必指定每一个你关注的属性。可以 简单使用&lt;code&gt;all&lt;/code&gt; 属性值来代替： &lt;code&gt;transition: all .5s ease-in&lt;/code&gt;。 我不推荐使用这个，因为一些性能的影响。浏览器会监听所有的属性，而不是你指定的那几个属性。除非你必须需要这样做，我建议为transition指定每个单独CSS属性。&lt;/p&gt;
&lt;p&gt;使用animations，不必在声明时做任何事，只要在每个关键帧处指定属性值：
    keyframes imageSlide {
        0% {
            left: -150px;
        }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中，当关键帧触发时元素的 &lt;code&gt;height&lt;/code&gt; 和&lt;code&gt;background-color&lt;/code&gt; 会平缓的动画--即使在上一个关键帧处没有显式列出。&lt;/p&gt;
&lt;h2&gt;Interaction with JavaScript&lt;/h2&gt;
&lt;p&gt;在大多数情况下，使用transition和animation就已经足够了。你可以指定你想的开始值、结束值和任意中间状态值。你的动画只关注读取的这些值。当你想要预定义的效果，使用这些场景最好。有时候，你想通过一些额外的输入--如鼠标单击和一些计算的结果等来改变属性值。&lt;/p&gt;
&lt;p&gt;像这样的交互，在CSS中预定义的属性值会受一些限制。在这咱情况下，你可以选择使用JavaScript，如果完全使用JavaScript似乎有些极端。你应该使用混合的方式，在CSS声明中使用animation或transition，在其它方面使用JavaScript来操纵。&lt;/p&gt;
&lt;p&gt;当使用JavaScript来与animation与transition结合时，这没有冲突--你更应该使用transition。也可能使用animation与JavaScript结合...差不多就像挑战cinnamon challenge一样。使它们工作不是不可能，你更可能的是不去用它。出现这种原因的是transitions和animations工作原理的不同。&lt;/p&gt;
&lt;p&gt;animations它们已经做的很具体了。关键帧&lt;code&gt;@keyframes&lt;/code&gt;规则清晰的阐述了动画运行时的路径。通过JavaScript尝试改变animation动画，需要一系列复杂的步骤，包括修改&lt;code&gt;@keyframes&lt;/code&gt;关键帧。如果操纵过CSS内嵌的样式规则，你知道这是相当不直观的。&lt;/p&gt;
&lt;p&gt;与预定义好路径的animation形成鲜明对比的是transition。transition看起来并不是预定义这些东西。transition将是在监听一个属性发生变化时触发。完全通过使用CSS来改变这个属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#myElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#myElement&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transition监听的CSS属性变化，可通过JavaScript的内联样式进行设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var myElement = document.querySelectr(&amp;quot;#myElement&amp;quot;);
myElement.style.backgroundColor = &amp;quot;333&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transition不关心监听的属性值改变的方式。只要属性值发生变化，transition将被执行。意思是，对于交互的场合，它不关心预定义的起始点和终止点，通过使用transition声明你可以做许多transition相关的有意思的事。可以使用JavaScript来指定想要transition的属性值。&lt;/p&gt;
&lt;p&gt;看一个我写的简单例子simple example：&lt;/p&gt;
&lt;iframe id="I1" scrolling="no" frameborder="0" style="width: 620px; height: 390px;" src="/demo/animation/move_to_click_position.html" name="I1" marginwidth="0" marginheight="0" border="0"&gt;&lt;/iframe&gt;

&lt;p&gt;单击灰色方框中的任意位置，使圆圈移动到该位置。Keep clicking around to see the circle keep moving。&lt;/p&gt;
&lt;p&gt;十分简单的动画原理。实际移动是transition处理的。元素想要移到的位置是由JavaScript设置的的 &lt;code&gt;top&lt;/code&gt;和&lt;code&gt;left&lt;/code&gt;。 因为transition监听着&lt;code&gt;top&lt;/code&gt; 和&lt;code&gt;left&lt;/code&gt; 两个属性的变化，它们的所有改变都会触发transition。最后的结果完全是你想要的。重要的是，你不必写任何关于移动处理的JavaScript代码。因为transition被声明在CSS中，浏览器进行深度优化，让它运行的更加平滑。&lt;/p&gt;
&lt;p&gt;Transition和JavaScript之间的友好结合完胜，但在写它们的时候就感觉不那么友好了。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;情况就是这样--大致上看看transitions和animations很相似，但又十分不同。选择使用其中的哪一个，我给出一般的方法就像这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If what I want requires the flexibility provided by having multiple keyframes and easy looping, then I go with an animation.==如果想让动画更多的灵活性，通过使用关键帧和简单的循环，那么我将使用animation。&lt;/li&gt;
&lt;li&gt;If I am looking for a simple from/to animation, I go with a transition.==如果想要一个简单从起始状态到终止状态的动画，选择transition。&lt;/li&gt;
&lt;li&gt;If I want to manipulate the property values that I wish to animate using JavaScript, I go with a transition.==如果想使用JavaScript来操纵动画的属性值，我将选择transition。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, with enough effort and JavaScript tomfoolery, you can neutralize any deficiences I list in deciding whether to use a transition or an animation. My recommendations are based on the common cases where you take a transition or animation mostly at face value. Herculean efforts to change their default behavior is admirable but often unnecessary.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 05 Dec 2013 20:58:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-05:posts/2013/animations-vs-transitions/</guid><category>animation</category></item><item><title>All About CSS Transitions（译）</title><link>http://stormhouse.github.io/posts/2013/all-about-css-transitions/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/all_about_css_transitions.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;CSS中，当你改变一个属性的值，页面立即发生变化。示例，使元素CSS &lt;code&gt;hover&lt;/code&gt;状态时，改变&lt;code&gt;transform&lt;/code&gt;属性&lt;strong&gt;tranlate3d&lt;/strong&gt;函数一个不同的参数值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该值是将图片垂直向上平移350像素。看看这个实例，在下面例子中将鼠标悬停到&lt;a href="http://www.w3.org/html/logo/"&gt;HTML标志&lt;/a&gt;上：&lt;/p&gt;
&lt;iframe id="I2" border="0" frameborder="0" name="I2" scrolling="no" src="/demo/animation/no_transition_hover_example.html" style="width: 416px; height: 375px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;注意当你移到图片上会发生什么。当鼠标悬停上，图片发生了改变。这个变化不是平滑的。它是很突然的。立刻变成黑色背景的HTML标志，鼠标离开立刻变成黄色背景的标志。&lt;/p&gt;
&lt;p&gt;这里transition可以做一些漂亮的事。Transitions可以减慢属性中突然的变化。你可以指定属性改变所发生时间的长短。它可以让你使用不同种类的缓动函数来改变属性值。&lt;strong&gt;Transitions规定了动画属性值的变化方式&lt;/strong&gt;。
设置transition后，鼠标移到下面例子中的logo上：&lt;/p&gt;
&lt;iframe id="I3" border="0" frameborder="0" name="I3" scrolling="no" src="/demo/animation/transition_hover_example.html" style="width: 416px; height: 375px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;这一次，不是看图片立即的变化，还能看到图片中间位置。会看到图片的平缓的滑动。你看到了一个动画。如果你在logo未到达最后位置打断它，没有任何问题，图片平缓回到初始状态。这是不是很酷？&lt;/p&gt;
&lt;p&gt;在下一节，让我们继续这个令人兴奋的transition！&lt;/p&gt;
&lt;h2&gt;Adding a Transition&lt;/h2&gt;
&lt;p&gt;现在你对transition是什么及它的作用心知肚明，让我们开始使用它吧。接着，将下面的代码复制，粘贴到你新的HTML文档中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Language&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff, to, help, search, engines, not&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What this page is about.&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;An Interesting Title Goes Here&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;An Interesting Title Goes Here&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F2F2F2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;700&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/html5_slider.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;350&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;预览这个文档，你将看到一个黄色的HTML logo。当你鼠标移上去，图片将立刻变成黑色背景的标志。这应当比较熟悉。与上几段中的没有transition的例子完全一样。&lt;/p&gt;
&lt;p&gt;我们要做的是添加CSS transition让图片改变更加平滑些。看下&lt;code&gt;#bog img&lt;/code&gt;的样式规则吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面仅有transform属性声明，添加如下高亮行的&lt;code&gt;transition&lt;/code&gt;声明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加了高亮行，再次在浏览器中预览你的文档。移图片上，会看到图片平缓的从一个位置移到另一位置。好了完事了。再接下来的几节中，我们详细看下添加的那行，学习你需要知道的更多关于transitions的内容。&lt;/p&gt;
&lt;h6&gt;What About the Vendor Prefixes?&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;属性还是比较新的，所以很多老版本浏览器需要加厂商前缀才能使之工作。不要堆满你的标记。这个例子使用&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free&lt;/a&gt; 库保证你精简的标记，能在老版本的浏览器中看到transition效果。&lt;/p&gt;
&lt;h2&gt;Looking at Transitions in Detail&lt;/h2&gt;
&lt;p&gt;现在这个例子是使用transition，让我们了解它的原理。看一下以前 &lt;a href="http://stormhouse.github.io/posts/2013/introduction-to-animation-in-html/"&gt;Introduction to Animation in HTML&lt;/a&gt; 教程中曾用过的图例吧，transition基本原理就是填充起始状态到终止状态过程中的插值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;起始状态，你设置想要过渡的CSS属性初始值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-350px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;终止状态时，是同一属性的最终值为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#box&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前面几次已经看到，一般是从起始状态突然跳动到终止状态。添加CSS transition后，通过你指定在transition中的时延和缓动函数(easing/timing function)，它是平缓的跳动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个典型CSS transistion定义了以下三个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The property to apply the transition to==想让transition生效于哪个的属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;How long the transition will last==transition持续多长时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;What kind of a timing function (aka easing function) to use==它使用哪种缓动函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上节中你看到添加的transistion，三个属性与它的完美映射...就像戴套一样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;上面你看到的是简写的&lt;code&gt;transition&lt;/code&gt;属性。作为简写的属性，它的值会精确映射到CSS 的全名称属性，因此我们来看看更详细的tansition相关属性。&lt;/p&gt;
&lt;h4&gt;Transition Property&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;的第一个属性值对应着&lt;code&gt;transition-property&lt;/code&gt;属性。它监听着你指定的CSS属性发生的变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;对于我们的例子中，&lt;code&gt;transform&lt;/code&gt;属性的任何变化都会监听到，并产生适当的动画过渡。根据需要，可指定你想要动画过渡的CSS其它属性。&lt;/p&gt;
&lt;h6&gt;Note: Animatable CSS Properties Only Please&lt;/h6&gt;
&lt;p&gt;一个注意的问题是你不能将所有的CSS属性指定给&lt;code&gt;transition-property&lt;/code&gt;。该属性必须可动画化的。听起来有点扫兴，但确实如此。大多数情况下，几乎所有的CSS属性都已是可动画的，并可指定给transition。&lt;/p&gt;
&lt;p&gt;你可访问&lt;a href="http://pan.baidu.com/s/1eQqVXoY"&gt;这里&lt;/a&gt;查看可动画的所有属性，以及&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;这里&lt;/a&gt;额外添加的属性。&lt;/p&gt;
&lt;p&gt;那么，如果不想限制transition监听单一属性的变化，不想单独管理每个属性，可以指定关键字all。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过设置all，任何CSS属性的变化都会被transition自动的监听。我一般不推荐使用该关键字，除非真的希望在其它所有属性上进行transition监听。浏览器要轮询所有属性，相比轮询指定的几个属性，会有轻微的性能影响。&lt;/p&gt;
&lt;h6&gt;Transition Duration&lt;/h6&gt;
&lt;p&gt;声明在transition中的第二个属性映射到&lt;code&gt;transition-duration&lt;/code&gt;属性。该属性指定了一个数值，transition运行的多长时间：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这是相当简单的一个例子。让动画过滤持续更长一段时间，可设置为较大的值。想持续时间短一些，就像这个例子中设置成&lt;strong&gt;.5&lt;/strong&gt;秒。&lt;/p&gt;
&lt;h6&gt;Transition Timing Function (Easing Function)&lt;/h6&gt;
&lt;p&gt;第三个属性值映射到 &lt;code&gt;transition-timing-function&lt;/code&gt; 属性，该值用于规定属性值从初始值到最终值的变化速率：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;速率变化一般定义为调速（timing，缓动）函数。默认，会按时间线性变化（平均速率）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这个结果看起来是transition既不加速也不减速。是恒定不变的。你可指定其它值来覆盖它的默认属性，会变得更有趣：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可选择适合你需求的缓动函数来覆盖默认属性。可供选择的缓动函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* ease
* linear
* ease-in
* ease-out
* ease-in-out
* step-start
* step-end
* steps()
* cubic-bezier()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据你选择的函数，transition看起来它在加速、减速或两者的结合。我在&lt;a href="http://stormhouse.github.io/posts/2013/easing-functions-in-css3/"&gt;Easing Functions in CSS3&lt;/a&gt;讨论了它的更多细节，所去那边获取更多的信息吧。&lt;/p&gt;
&lt;h6&gt;One More Thing: Delaying the Transition&lt;/h6&gt;
&lt;p&gt;还没完呢。实际transition中还有很少用的第四个值，该值映射到&lt;code&gt;trasition-delay&lt;/code&gt;属性上：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131202-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;根据属性名称你能猜想到，时延决定了transition开始执行前需要等待多少时间。如果它干的事只是这个了话，真得是有点无聊...因为它很少用到。它的确还能做其它事情。根据该值的正负号，决定了它不同行为。&lt;/p&gt;
&lt;p&gt;先看一个正值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正值表示transition执行前等待的时间。这是你预期的。例如，上面的声明中，transition将等待0.1秒才开始执行。&lt;/p&gt;
&lt;p&gt;给一个负值的话，会有一点不同：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;-.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置一个负值，决定了你在transition过程中的哪个时间点开始执行。如果你的trasition是0.5秒，你的transition延时是-0.1秒，你的trasition将会在过程中间的0.1秒处开始执行。&lt;/p&gt;
&lt;p&gt;在一般情况下，很少看到设置transition延迟属性。考虑到它正负值所做的变化，当我真正确定要用它的情况下才能使用。&lt;/p&gt;
&lt;h2&gt;The Longhand Properties&lt;/h2&gt;
&lt;p&gt;上节中，我们只关注了&lt;code&gt;trasition&lt;/code&gt;的简写属性版本，那么看看它们如何映射到全名称CSS属性上吧。将简写声明表示为全名称属性如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体的它们，这四个transition相关的属性是 &lt;code&gt;transition-property&lt;/code&gt;，&lt;code&gt;transition-duration&lt;/code&gt;， &lt;code&gt;transition-timing-function&lt;/code&gt; 和&lt;code&gt;transition-delay&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，使用简写版本与全名称相比，没有什么不同。产生的结果都是一样的，所以使用哪种取决于你自己。下节是我提供的一些建议。&lt;/p&gt;
&lt;h2&gt;Longhand Properties vs. Shorthand Properties&lt;/h2&gt;
&lt;p&gt;一般，我更喜欢简写的版本因为更紧凑。我唯一不使用简写属性的情况是在JavaScript中改变它的值。让我进一步说明吧。&lt;/p&gt;
&lt;p&gt;在CSS中，trasition声明成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当动画执行完成，修改transition的属性值。代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;obj.style.transitionDuration = &amp;quot;.2s&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如让上面代码执行，你认为trasition是什么样的呢。理论上，由于你修改了transition的持续时间为0.2秒，transition属性值实质上是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上是不合逻辑的。整个trasition完成后，设置了trasitionDduration属性。你只看到后来被设置的transitionDuration的值，原来的trasition的属性值已经没有了。完全消失了。     &lt;/p&gt;
&lt;p&gt;正确的处理方法是，重新设置一下&lt;code&gt;trasition&lt;/code&gt;的全部值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;obj&lt;/span&gt;&lt;span class="nc"&gt;.style.transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;transition: all &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;myDuration&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s ease-in;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后拼接成的字符串，酷似在CSS中定义的声明值。对我来说，貌似有点尴尬。单独设置一个tansition值会让我将trasition所有值重新设置一遍：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我想用JavaScript修改时延，只需重写 &lt;code&gt;transition-duration&lt;/code&gt; 属性。我不用担心擦除已经存在的其它属性，再重新给它们设值。&lt;/p&gt;
&lt;h2&gt;Working with Multiple Transitions...and So On&lt;/h2&gt;
&lt;p&gt;最后一件事是讨论一下我先前提过的设置多个transitions，监听多个transition属性等等。让我们快速的看一下本节中常见的情况吧。&lt;/p&gt;
&lt;h4&gt;Multiple Transitions&lt;/h4&gt;
&lt;p&gt;声明多个transitions是很简单的。当你使用简写形式，使用逗号分隔它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用全名称形式，需要添加额外的值，只需分别将它们隔开：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这些值的数目不匹配，默认标准的CSS属性将会生效。&lt;/p&gt;
&lt;h4&gt;Listening to Multiple Properties&lt;/h4&gt;
&lt;p&gt;如果你想单独分开监听一些属性，就使用全名称版本把所有你想trasition的属性列到&lt;code&gt;transition-property&lt;/code&gt;上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你定义了三个分隔开的transitions，每个trasition都是0.5秒的时延和使用ease-out缓动函数。这应该很简单吧。&lt;/p&gt;
&lt;h2&gt;The transitionEnd Event&lt;/h2&gt;
&lt;p&gt;最后一件事（确实是最后了）我们将提到&lt;code&gt;transitionEnd&lt;/code&gt;事件。当一个transition 运行完成后，这些元素将会触发&lt;code&gt;transitionEnd&lt;/code&gt;事件。在这个事件里可以执行很多酷的事件，但是我不想在这里解释它。反而，在 &lt;a href="http://stormhouse.github.io/posts/2013/the-transitionend-event/"&gt;transitionEnd Event&lt;/a&gt; （未译） 的教程中会涉及更多的酷的内容细节。&lt;/p&gt;
&lt;p&gt;是不是所有的这些都有趣？一个是让我们如此简单的使用transitions。为我使用它们你不用改变你现有的行为。大部分时间，你将在动画运行或用户交互时使用代码来控制这些CSS属性。transition简单的在普通的改变中插入让你的动画属性发生改变。难怪外星人感到惊讶。&lt;/p&gt;
&lt;p&gt;不管怎样，这里你仅是看到了关于transitions的浅显的内容。下的一些文章还你挖掘更深的层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animations-vs-transitions/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/the-transitionend-event/"&gt;The transitionEnd Event&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/looping-a-css-transition/"&gt;Looping a CSS Transition&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animating-movement-smoothly-using-css/"&gt;Animating Movement Smoothly using CSS&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2014/animating-many-elements-using-transitions/"&gt;Animating Many Elements Using Transitions&lt;/a&gt; （未译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 02 Dec 2013 11:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-02:posts/2013/all-about-css-transitions/</guid><category>animation</category></item><item><title>All About CSS Animations（译）</title><link>http://stormhouse.github.io/posts/2013/all-about-css-animations/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/all_about_css_animations.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在HTML中动画实现的三种的方式之一是众所周知&lt;strong&gt;CSS animations&lt;/strong&gt;。CSS animations是非常简单的。你能通过控制动画CSS属性来影响元素。它可以让你做出很酷的事比如元素移动、元素淡入淡出、改变元素颜色。&lt;/p&gt;
&lt;p&gt;首先让我们看一个例子，让下面的云彩缓慢的上下飘动：&lt;/p&gt;
&lt;iframe id="I1" border="0" frameborder="0" name="I1" scrolling="no" src="/demo/animation/bouncing_clouds2.html" style="width: 623px; height: 330px;" marginheight="0" marginwidth="0"&gt;Your browser does not support inline frames or is currently configured not to display inline frames.
&lt;/iframe&gt;

&lt;p&gt;在本篇中，你将学习所有CSS animations，不仅仅是让云朵移动，还有其它更酷更有用的事情。你将会学习通过&lt;code&gt;animation&lt;/code&gt;属性怎样定义一个CSS动画，怎么添加关键帧，以及如果调整各种动画相关的属性，这才是你所想要的。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Creating a Simple Animation&lt;/h2&gt;
&lt;p&gt;学习动画最简单的的方式，就是亲自动手实验， 然后再学习它的工作机制。那么来创建一个HTML文档，写HTML和CSS代码吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Bouncing Clouds&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/js/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nf"&gt;#mainContent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#A2BFCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainContent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bigcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;154&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/bigCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;238&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果预览上面代码，和刚才那个例子对比，这是一个不令人兴奋的版本。你所看到的是单一的、静止不动的云朵：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;让我们来继续添加&lt;code&gt;animation&lt;/code&gt;属性来改变这无趣的状态吧。添加CSS animation只有两步，第一步设置&lt;code&gt;animation&lt;/code&gt;属性，第二步精确的定义动画的关键帧。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;#bigcloud&lt;/code&gt;上添加以下高亮行的属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面高亮的那行的细节是什么现在并不重要，稍后我们再来关注它。让我们先添加关键帧。添加&lt;code&gt;@keyframes&lt;/code&gt;样式属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加了这条样式的属性，刷新一下页面看看吧。你应该看到云朵欢快的上下跳动，沉浸在它自己的世界中。瓦哦。&lt;/p&gt;
&lt;h4&gt;What Just Happened&lt;/h4&gt;
&lt;p&gt;刚才你添加CSS属性是使云朵上下的跳动。CSS animation是如这么的简单啊。它能让你指定元素想要动画的起止状态，中间任意状态（即关键帧）和终止状态。我们云朵移动是非常简单的，所以学习这个动画实现是个很好的起点。&lt;/p&gt;
&lt;p&gt;我们将着眼于第一件事就是&lt;code&gt;animation&lt;/code&gt;属性本身：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;属性的职责是设置动画的本身。 你使用它的简写形式，你将声明三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The name of your animation：动画（帧）的名字&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The duration：持续时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;The number of times your animation will loop：动画迭代的次数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;声明是不同的。我们这里将名字起为bobble，动画持续时间2秒，这里设置迭代的次数是无数次。&lt;/p&gt;
&lt;h6&gt;What About the Vendor Prefixes?&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;属性还是比较新的，所以一些浏览器需要添加私有的前缀才能使之工作。不要将各种浏览器前缀的属性全都堆上去。而是使用类似&lt;a href="http://www.kirupa.com/html5/avoid_using_vendor_prefixes.htm"&gt;-prefix-free库&lt;/a&gt; (未译)，就像这个例子一样，同时能运行在你的旧的浏览器（需要私有前缀版本的浏览器）中。&lt;/p&gt;
&lt;p&gt;正如你看到的，&lt;code&gt;animation&lt;/code&gt;声明没有包含更多的动画细节。它设置动画的更高面东西，而一个CSS animation的详细内容，是定义在&lt;code&gt;@keyframes&lt;/code&gt;规则里。
Let's look at our @keyframes rule to learn more:==让我们来看看我们的&lt;code&gt;@keyframes&lt;/code&gt;规则，深入学习：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先，看下&lt;code&gt;@keyframes&lt;/code&gt;属性。在外层包含&lt;code&gt;@keyframes&lt;/code&gt;声明的名字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在内层，它包含样式规则（即实际的关键帧），使用百分比或&lt;code&gt;from&lt;/code&gt;和&lt;code&gt;to&lt;/code&gt;关键字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你所期望的几乎就是这些关键帧样式规则。他们只包含CSS属性，如&lt;code&gt;transform&lt;/code&gt;和&lt;code&gt;animation-timing-function&lt;/code&gt;，当动画到该关键帧时，会应用该帧的属性值。我们不久会回到这个问题，因为你需要知道有一个重要的细节-----关键帧样式规则。&lt;/p&gt;
&lt;h6&gt;The Name&lt;/h6&gt;
&lt;p&gt;那么，我刚才解释的那部分，是很好理解的。这儿有些事情会变得有点混乱。 尽管，在&lt;code&gt;anaimation&lt;/code&gt;规则中定义动画属性，又另一个样式&lt;code&gt;@keyframes&lt;/code&gt;规则中声明你的关键帧，他们非常绑定十分紧密。如果它不是那么复杂和凌乱，这将是非常优美的。但我们的工作，就是解开这个烂摊子，弄清楚到底是怎么回事，并最终能够以更复杂的方式创建动画。&lt;/p&gt;
&lt;p&gt;命名为&lt;code&gt;bobble&lt;/code&gt;的关键帧&lt;code&gt;@keyframes&lt;/code&gt;规则来标识关键帧的行为，并用作&lt;code&gt;animation&lt;/code&gt;的属性值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@keyframes&lt;/code&gt; 规则名字也是&lt;strong&gt;bobble&lt;/strong&gt;，这并不是说&lt;code&gt;animation&lt;/code&gt;属性指向&lt;strong&gt;bobble&lt;/strong&gt;是一个巧合。如果这两个名称不一致，你的动画将无法正常工作。&lt;/p&gt;
&lt;h6&gt;Duration and the Keyframes&lt;/h6&gt;
&lt;p&gt;上一节内容你学到了&lt;code&gt;animation&lt;/code&gt;的关键帧属性。解决了这个难题。更大的难题是，动画的持续时间，及某个特定关键帧样式实际触发的时间。&lt;/p&gt;
&lt;p&gt;你该记得，当你在&lt;code&gt;@keyframes&lt;/code&gt;中定义关键帧样式，你设置的不是一个真实的值。它是一个百分比或是&lt;code&gt;from&lt;/code&gt;/&lt;code&gt;to&lt;/code&gt;关键字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*highlight line*/&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在我们的例子中，关键帧选择的百分比值是0％，50％和100％。它们表示的是已完成动画的百分比。当你的动画刚刚开始时，你已经完成了动画的0％。 0％关键帧将被触发。当你的动画执行一半了，50％的关键帧得到触发。在动画的最后，100％的关键帧将被触发。&lt;/p&gt;
&lt;h6&gt;About the &lt;code&gt;from&lt;/code&gt; / &lt;code&gt;to&lt;/code&gt; Selector&lt;/h6&gt;
&lt;p&gt;在选择器中，你可以使用等效的关键字&lt;code&gt;from&lt;/code&gt;，来代替0％；使用&lt;code&gt;to&lt;/code&gt;关键字代替100％。我不知道为什么有人想到会用它，但它确实存在，在实际编码中最好将它抛开。&lt;/p&gt;
&lt;p&gt;在此章节中，我不太愿意使用&lt;code&gt;from&lt;/code&gt;/&lt;code&gt;to&lt;/code&gt;关键字。使用该关键字，就被固定死了，对以后的扩展更不通用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt;上的属性持续时间是描述整个动画的时间，除非你设置动画运行的总时间， 该值用来标识随时间进行的精确百分比（关键帧）。那么，动画就正常结束。&lt;/p&gt;
&lt;p&gt;下图的百分比是映射2秒动画时间单位上的具体时间值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;这部分对我来说是复杂。一旦你理解&lt;code&gt;duration&lt;/code&gt;是怎样映射的划分的关键帧，你将在理解动画这块儿跨越的一个重要障碍。&lt;/p&gt;
&lt;p&gt;无论如何，我想我们已经看到一个简单动画原理的足够细节。你学会了怎样使用&lt;code&gt;animation&lt;/code&gt;声明一个动画，和添加&lt;code&gt;@keyframes&lt;/code&gt;规则。 我们也花了一些时间来了解它们组合 一起的产生效果。&lt;/p&gt;
&lt;p&gt;不过，还没有做完。还有涉及更多更详细，休息一下，然后看看这个&lt;a href="http://theoatmeal.com/quiz/facebook_addict"&gt;How Addicted To Facebook You Are quiz&lt;/a&gt;。在看到你的结果后轻轻地抽泣了几分钟，你会在一个的完美状态，以了解更多关于CSS animation！&lt;/p&gt;
&lt;h2&gt;Detailed Look at the CSS Animation Property&lt;/h2&gt;
&lt;p&gt;刚才我们看到，&lt;code&gt;animation&lt;/code&gt;属性包含了更多的属性。现在，你涉足创建一个动画，让我们做一些令人乏味事，学习animation所有的属性。为了更好的学习它，首先扩展它的简写，看看它具体的形式。我们简写形式看起来像下面一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它的全名称是下面这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;bobble&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;2s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面简写的形式扩展为三个属性&lt;code&gt;animation-name&lt;/code&gt;， &lt;code&gt;animation-duration&lt;/code&gt;和&lt;code&gt;animation-iteration-count&lt;/code&gt;。这些属性现在深印到你的脑海中了吧，让我们继续看一下我们没有用过的属性比如：&lt;code&gt;animation-play-state&lt;/code&gt;, &lt;code&gt;animation-delay&lt;/code&gt;, &lt;code&gt;animation-direction&lt;/code&gt;, &lt;code&gt;animation-fill-mode&lt;/code&gt;, 和 &lt;code&gt;animation-timing-function&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h4&gt;Pausing and Resuming an Animation&lt;/h4&gt;
&lt;p&gt;默认，你的动画开始第一次时，&lt;code&gt;animation&lt;/code&gt;属性就被激活。在我们简单的例子中，意味着页面被加载时激活。首先，我们简单想象它被设置成2秒无限循环的动画：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;每个黄色矩形表示动画的一次迭代。如果你把动画并排的每次迭代中，你就会得到看起来像我上面所示的那样。&lt;/p&gt;
&lt;p&gt;一旦动画开始，在它结束之前永远不会停止。如果你的动画设置为循环，终止状态完成后，它会从起止状态继续执行。它是每次迭代表示为一个单独黄色矩形的循环。我们目前bobble动画是就是这样的。&lt;/p&gt;
&lt;p&gt;有时候，你可能 不想要上面那种行为。如果你希望你的动画暂停，不让动画初始状态属性被激活，你可以用动画&lt;code&gt;animation-play-state&lt;/code&gt;属性。这个属性允许你在播放运行时的&lt;strong&gt;暂停&lt;/strong&gt;或&lt;strong&gt;播放&lt;/strong&gt;的切换。&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;animation-play-state&lt;/code&gt;属性设置为&lt;strong&gt;running&lt;/strong&gt;。你可以将该值设置为&lt;strong&gt;paused&lt;/strong&gt;，停止在运行的过程中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-play-state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;paused&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当动画暂停时，它保留动画运行最后时刻的计算值：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;它停在那儿几乎不动，你可以通过设置它的&lt;code&gt;animation-play-state&lt;/code&gt;属性值为&lt;strong&gt;running&lt;/strong&gt;.来恢复运行。在恢复运行之前，它不会突然从起止状态重新运行：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;就像你预期的一样，动画从当前状态平滑的运行，就像媒体播放器的播放和暂停功能一样。&lt;/p&gt;
&lt;h4&gt;Delaying and Offsetting the Animation&lt;/h4&gt;
&lt;p&gt;如果你希望你的动画不是立即播放，而是经过一段时间后播放，你应当使用&lt;code&gt;animation-delay&lt;/code&gt;属性。此属性允许你经过指定的时间秒数后，动画才开始运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;5s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;延迟不是等5秒之后0%关键帧被触发。它是第一次迭代的0%关键帧被触发：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;一旦你的动画开始运行时，延迟值就没有用武之地了。以后每一次迭代的动画（如果有的话）一个接一个无间隔的运行。&lt;/p&gt;
&lt;p&gt;现在你可以给这个属性赋其他的值，你可以给&lt;code&gt;animation-delay&lt;/code&gt;设置负值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;animation-delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="nc"&gt;.25s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你设置了一个负值，你的动画会在超前执行你设置的那个值。设置&lt;code&gt;animation-delay&lt;/code&gt;-.25秒就是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;负值作为一个标识，告诉浏览器这是一个偏移而不是延时。是的，这有点奇怪，因为它给的属性名是&lt;code&gt;animation-delay&lt;/code&gt;，我只是个传教者。还有更奇怪的呢，一旦你设置这个负值大于每一次动画迭代的时延，这是没问题的。只要保证有足够的迭代数，无论落在哪次迭代点动画就开始。如果你没有足够的迭代数来抵消那个负值，你的动画根本无法运行。&lt;/p&gt;
&lt;h4&gt;Hold My Keyframe Properties, Please!&lt;/h4&gt;
&lt;p&gt;如果你不设置动画循环，你会发现，一旦动画结束后，关键帧设置任何属性将被清除，元素返回到一个动画起止状态。这是因为&lt;strong&gt;关键帧应用于的属性是瞬时的&lt;/strong&gt;。当关键帧是激活状态时，它们才存在，在以外任何时间，这些属性值都不能存在。如果你不想要这种行为，当它运行完毕，你的动画看起来像突然跳到开始位置或突然复位，让我们来看看这两种情况的区别，然后看看如何更改默认行为。&lt;/p&gt;
&lt;h6&gt;Waiting to Start&lt;/h6&gt;
&lt;p&gt;第一个用例是当你设置了&lt;code&gt;animation-delay&lt;/code&gt;属性。例如，设置了5s：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画需等待5秒才开始执行，此时关键帧没有被执行。在等待时间中，第一个关键帧的所有属性都不会生效。&lt;/p&gt;
&lt;h6&gt;Animation is Done&lt;/h6&gt;
&lt;p&gt;第二个例子，当你的动画完成后。该例子是你设置循环3次的那个示例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-9.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;3次迭代完成后，最后关键帧的所有属性都会消失。动画回到原始状态就像什么也没有发生过一样。&lt;/p&gt;
&lt;h6&gt;Meet animation-fill-mode&lt;/h6&gt;
&lt;p&gt;如果你想在等待延时过程中，想让第一侦生效，或当动画完成后，保留最后一侦，你可以设置&lt;code&gt;animation-fill-mode&lt;/code&gt;属性。属性值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;none
There is no faking the property values here. If you want the a keyframe's property values to apply, your keyframe must be active.默认值，不设置动画之外的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;forwards
After your animation has run to completion, any property values the animation had at the end will be maintained.当你的动画完成后，保持动画结束时的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;backwards
The animation will apply the property values from the starting keyframe even if that keyframe is not active yet.动画将保持开始关键帧的属性值，虽然它未处于激活状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;both
This is the ultimate solution. Your animation will apply the property values of the first keyframe at the beginning and maintain the property values of the last keyframe at the end.最后的一个值。你的动画在停在起止状态时，第一帧被应用，终止状态最后一帧被激活。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚才我创建的是无限迭代和开始时没有延时的动画。我创建的许多动画的属性在开始帧、结束帧、无动画状态的动画元素之间没有太多的不同。正因为如此，我从不会熬夜担忧，也不会因为不想用&lt;code&gt;animation-fill-mode&lt;/code&gt;的属性而感到担忧。&lt;/p&gt;
&lt;p&gt;译者注：实例参见&lt;a href="http://ued.ctrip.com/blog/wp-content/webkitcss/demo/animation-fill-mode.html"&gt;携程UED的demo&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Reversing an Animation (or Alternating Directions)&lt;/h4&gt;
&lt;p&gt;现在，让我们看一下这个略微奇幻的属性，动画默认从0%到100%循序播放。你可以通过给&lt;code&gt;animation-direction&lt;/code&gt;&lt;strong&gt;设置normal&lt;/strong&gt;, &lt;strong&gt;reverse&lt;/strong&gt;, &lt;strong&gt;alternate&lt;/strong&gt;,  &lt;strong&gt;alternate-reverse&lt;/strong&gt;来 改变这个行为，  &lt;strong&gt;normal&lt;/strong&gt; 和 &lt;strong&gt;reverse能够直接指出他们做什么&lt;/strong&gt;，让我们来看一些比较有意思的属性值：&lt;strong&gt;alternate&lt;/strong&gt; 和 &lt;strong&gt;alternate-reverse&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;当设置&lt;code&gt;animation-direction&lt;/code&gt; 属性值为&lt;strong&gt;alternate-reverse&lt;/strong&gt;，动画正常开始。在第二次迭代时，它反向运行，以后会正向，反向交替着运行：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-10.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;animation-direction&lt;/code&gt;属性值为 &lt;strong&gt;alternate&lt;/strong&gt; 与上面十分相似，但有点细微的不同：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-11.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画开始于反向运行，然后正向，反向交替 运行。&lt;/p&gt;
&lt;h4&gt;At Easing, Soldier!&lt;/h4&gt;
&lt;p&gt;涉及到的最后一个有关联的动画属性是&lt;code&gt;animation-timing-function&lt;/code&gt;. 它的功能是在开始和结束之间指定如何改变属性值。在 [Easing Functions in CSS3][]（未译） 的教程中有更多缓动函数的细节， 所以去那边详细学习吧。&lt;/p&gt;
&lt;h4&gt;The Animation Shorthand&lt;/h4&gt;
&lt;p&gt;我们看下已经学过的animation属性的简写方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;somethingSomethingDarkSide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deathstar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有些人可能更喜欢使用所有的属性简写到&lt;code&gt;animation&lt;/code&gt;属性中。事实上，正如你看到的，bobble动画就是使用的简写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你上面看到的所有的全称属性都可表示为简单写的形式---只是好记而已。如果你对此疑惑，下面是他们的映射顺序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;尖括号中的部分来代替全称属性名。注意，简写属性中没法表示&lt;code&gt;animation-play-state&lt;/code&gt;。你必须使用全称属性名及值也表示它。&lt;/p&gt;
&lt;p&gt;无论怎么写，将一般写法写成简写形式，都会像下面一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#somethingSomethingDarkSide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deathstar&lt;/span&gt; &lt;span class="m"&gt;25s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt; &lt;span class="k"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简写的形式比全称写法紧凑吧？对的！它更容易理解吗？这是一个很难回答的一个问题，完全基于你(或你的团队)的偏好。&lt;/p&gt;
&lt;p&gt;我一般比较喜欢使用&lt;code&gt;animation-name&lt;/code&gt;, &lt;code&gt;animation-duration&lt;/code&gt;和&lt;code&gt;animation-timing-function&lt;/code&gt; 的简写版本，是因为很容易记住它。一旦超过这三个属性后，我就不得不去查阅文档添加哪一个了。&lt;/p&gt;
&lt;p&gt;你们的分歧可能是在全称与简单属性上，所以不管卡怎样选择一个适合你的。呃...以你的聪明头脑，是时候告别&lt;code&gt;animation&lt;/code&gt; 属性的内容了，来关注动画世界中其它的美妙的旅程吧。&lt;/p&gt;
&lt;h2&gt;Looking at the Keyframes&lt;/h2&gt;
&lt;p&gt;迄今为止,大部分时间花在动画&lt;code&gt;animation&lt;/code&gt;和它怎样影响你的整体部分…动画。一个CSS动画真正的角色是关键帧，所以让我们更多的关注在这一节。&lt;/p&gt;
&lt;p&gt;再次看一下bobble关键帧们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;早先提到的一个关键帧十分像一个属性样式。把CSS属性放进去，当这些关键帧被触发时，这些属性被执行。注意的是，并不是所有的属性都可应用于关键帧中，只有&lt;strong&gt;可动画的CSS 属性&lt;/strong&gt;和&lt;strong&gt;animation-timing-function&lt;/strong&gt;才能被指定。&lt;/p&gt;
&lt;p&gt;这不一定是个坏消息，我完全确定你所有放到关键帧中属性列表中的属性都是可进行动画化的。你访问&lt;a href="http://www.w3.org/TR/2009/WD-css3-transitions-20091201/#animatable-properties-"&gt;这里&lt;/a&gt;就能看到所的可动画的属性完整列表，以及[这里][8]是一些额外的属性。&lt;/p&gt;
&lt;p&gt;最后，看一下可以指定到关键帧中的 &lt;code&gt;animation-timing-function&lt;/code&gt; 属性，这个属性影响着从当前帧怎样过滤到下一关键帧。拿我们例子说，在0%关键帧，我们设置&lt;code&gt;animation-timing-function&lt;/code&gt; 属性值为ease-in：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你的动画从0%关键帧到50%关键帧滚动时缓动函数被激活。同样的，动画从50%关键帧到100%关键帧滚动时50%处的关键帧被激活。从当前帧到下一帧过程中给定的缓动函数被激活，在100%关键帧声明一个调速函数没有太多意义。&lt;/p&gt;
&lt;h2&gt;Reusing Keyframes&lt;/h2&gt;
&lt;p&gt;最后要讲的，是另一个动画声明复用同一个关键帧定义。我有点担忧过早将&lt;code&gt;animation&lt;/code&gt;属性和&lt;code&gt;@keyframes&lt;/code&gt;规则分离开，这样做起来有点小笨重。即使再笨重的东西，如果你付出更多努力，这儿会有一些漂亮的事情做。&lt;/p&gt;
&lt;p&gt;一个是声明另一个&lt;code&gt;animation&lt;/code&gt;属性时可以使用同一个关键帧定义。也许很难明白我的意思，让我们扩展当前的例子来强调我在说什么。&lt;/p&gt;
&lt;p&gt;在当前的HTML文档中包括一个弹跳云朵，继续添加下面的高亮行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Bouncing Clouds&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/js/prefixfree.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nf"&gt;#mainContent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#A2BFCE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.cloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#smallcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;65px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;bobble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainContent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bigcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;154&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/bigCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;238&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;smallcloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloud&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;103&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.kirupa.com/images/smallCloud.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;158&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你添加高亮&lt;code&gt;#smallCloud&lt;/code&gt;样式和第二个&lt;code&gt;img&lt;/code&gt;元素后，重新预览一下页面。如果没其它错误的话，你将看到两块云朵愉快的跳动...就是本文最开始的那个例子一样。&lt;/p&gt;
&lt;p&gt;现在你的例子能运行了，看一下是如何做到的。窍门就是&lt;code&gt;#smallCloud&lt;/code&gt;样式的中&lt;code&gt;animation&lt;/code&gt;声明行。
    #smallcloud {
        animation: bobble 4s infinite;
        margin-top: 65px;
        margin-left: 200px;
    }&lt;/p&gt;
&lt;p&gt;注意这里引用同一个&lt;code&gt;@keyframes&lt;/code&gt;规则名称为bobble。和&lt;code&gt;#bigClound&lt;/code&gt;样式唯一不同的是&lt;code&gt;animation&lt;/code&gt;声明中的时延。小的云朵中&lt;code&gt;animation&lt;/code&gt;时延设置成4秒---比大的云朵设置时延长两倍:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#bigcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bobble&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两个云朵中定义的bobble关键帧有什么意思呢。唯一不同是一个动画在2秒中执行完那些关键帧，另一个是4秒：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131201-12.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;animation&lt;/code&gt;和&lt;code&gt;keyframes&lt;/code&gt;声明分离开来，可以做这上面的事。&lt;code&gt;animation&lt;/code&gt;中的任何属性的改变都会影响到关键帧这一水平--就像这儿你看到的时延。刚才我解释的每个&lt;code&gt;animation&lt;/code&gt;属性的设置，不用直接涉及关键帧部分，就会改变关键帧的行为。&lt;/p&gt;
&lt;p&gt;You have to admit, that is pretty cool.&lt;/p&gt;
&lt;h2&gt;Declaring Multiple Animations&lt;/h2&gt;
&lt;p&gt;最后要讲的（好吧，真的最后一次），快速看一下怎样在同一个&lt;code&gt;animation&lt;/code&gt; 属性中声明多个动画。简写形式，用逗号隔开每个动画定义，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#oppaGangnamStyle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sexy&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lady&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意上面每一个动画定义指向不同的&lt;code&gt;@keyframes&lt;/code&gt;。不管怎样，如果在同一个&lt;code&gt;animation&lt;/code&gt;属性声明中指向同一个&lt;code&gt;@keyframes&lt;/code&gt;关键帧，根据CSS优先顺序，最后一个将被生效。&lt;/p&gt;
&lt;p&gt;属性名全称形式，看起来如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#oppaGangnamStyle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sexy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lady&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次，应该是比较简单的。都是使用逗号隔开的，如果在为一个属性使用多个值有疑惑时，仅仅使用逗号就可解决。&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;我们已经了解到CSS中&lt;code&gt;animation&lt;/code&gt;属性很多的内容---特别是想让你的内容更加活泼。你已经学习了动画的基本内容，继续学习下面教程吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[All About CSS Transitions][] （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animations-vs-transitions/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/getting_jittery_on_hover_using_only_css.htm"&gt;Getting Jittery on Hover&lt;/a&gt; （未译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/slide_bounce_image_on_hover.htm"&gt;Slide and Bounce an Image on Hover&lt;/a&gt; （未译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sun, 01 Dec 2013 15:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-12-01:posts/2013/all-about-css-animations/</guid><category>animation</category></item><item><title>Introduction to Animation in HTML（译）</title><link>http://stormhouse.github.io/posts/2013/introduction-to-animation-in-html/</link><description>&lt;p&gt;thanks &lt;a href="http://www.kirupa.com/html5/introduction_to_animation_html.htm"&gt;kirupa&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;也许你们认为动画是电影和计算机中的近代产物，实际上人类在很久很久以前就开始鼓捣它并作为沟通的方式了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;[ a sequence of pictures from 3000 BC (wikipedia) ]&lt;/p&gt;
&lt;p&gt;这些动画方式追溯到古代的洞穴壁画，直到现代的精密的机械，正如你现在看到的电视、电脑和手机。今天，生活中几乎在所有的设备屏幕上单击、摇一摇(tap)或按键就可以让它动起来：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;动画已不仅仅是壁画中的事物了，而主要在游戏、intros、卡通，横幅广告领域。 它已经根深蒂固于我们用户体验中，它可让你的应用操作简单；可以使你的内容更加漂亮；可以使你的作品更加生动有趣。谁不希望这样啊？&lt;/p&gt;
&lt;p&gt;至此你有足够的背景认识。不用去关心它的历史或被信服动画为什么这么有用。可能你已经认识到动画的重要性。如果你想知道如何来实现这些动画，那么你来对地方了。本篇入门教程以及后面的文章，你将学习html中的动画。短期内，你将成为动画的高手， 或至少在屏幕上完成一个动画。&lt;/p&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;h2&gt;What Is An Animation?&lt;/h2&gt;
&lt;p&gt;在我们继续进行之前，确定从哪开始学以及怎样创建动画，退一步讲，就是弄清动画是什么。我开始于一个大致轮廓。在最基础层面上，&lt;strong&gt;动画是一个视觉的变动&lt;/strong&gt;---即经过一段时间后的变化。&lt;/p&gt;
&lt;p&gt;让我们看下更详细内容。&lt;/p&gt;
&lt;h4&gt;The Start and End States&lt;/h4&gt;
&lt;p&gt;如果说视觉变动是动画很重要的一部分，那么我们需要创建其它参考 因素来对比发生了什么变化。让我们暂称这些参考因素为起始状态和终止状态。为了更好的解释是怎么回事，让我们举出一个简单的例子来。&lt;/p&gt;
&lt;p&gt;起始状态如下这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;开始是一个灰色的沉默的具有讽刺意义的笑脸。最终，你的笑脸是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;基于我们在起始和终止状态的笑脸信息，你能说出有什么不同吗？&lt;/p&gt;
&lt;p&gt;一个变化是它的位置。笑脸开始从屏幕的左边，结束时移到了右边。另一个变化是它的颜色。从开始的灰色变成了愉悦的黄色。最后一个变化是它的角度。它从起始到终止状态顺时针转动了90度。&lt;/p&gt;
&lt;p&gt;怎样使它动起来呢？如果我们仅仅是重复起始和终止的状态，那么看起来它是不停的从左到右的跳动。这是非常糟糕的，太糟糕了。 我们需要的是可观的一系列中间的&lt;strong&gt;插值&lt;/strong&gt;（中间状态），来实现从起始到终止状态的平滑转变。&lt;/p&gt;
&lt;h4&gt;Interpolation&lt;/h4&gt;
&lt;p&gt;现在，我们所看到的是两个分离的状态。开始时，处于起始状态，结束时，处于终止状态。如果你要这样重复玩个来回，这不是一个动画。为了制作这个动画，需要创建中间（每一个即时状态）状态来完成一个平稳的过渡。创建这些中间状态称之为&lt;strong&gt;插量法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这些插值，发生在&lt;strong&gt;一段指定的时间内&lt;/strong&gt;，看起来就像下图这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-5.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;你可能想知道谁来规定这些插值状态。答案是：你的浏览器或HTML渲染引擎为你处理这些复杂的细节，这个看起来是个不错的消息，你所做的就是定义起始状态、终止状态和两个状态切换发生的的时间。一旦你有了这三个货，你就有了一个动画。&lt;/p&gt;
&lt;p&gt;You will later see how adding some other ingredients into the pot such as timing functions (easing functions) can alter how the interpolation works, but we'll get there later. For now, just revel in this simplified generalization of what makes up an animation, put on your best party clothes, and get ready to meet the three flavors of animation that you will end up using.&lt;/p&gt;
&lt;h2&gt;Animations in HTML&lt;/h2&gt;
&lt;p&gt;在HTML中不仅用单一的方式实现。实际上你有三种实现方式供来选择，每一种来完成特定的任务。让我们快速浏览一下，看它如何与上一节定义的动画相联系。&lt;/p&gt;
&lt;h4&gt;1. CSS Animations (aka Keyframe Animations)&lt;/h4&gt;
&lt;p&gt;CSS Animations是比较传统的动画实现，它可在某些性能方式让人刮目相看。这类动画，你不仅可定义起始终止状态，还能定义中间状态的关键帧：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-6.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;如果你使用这些中间状态关键帧，你可以获取更大的动画控制权。在上面的例子里，蓝色圆形不是简单的从左侧滑动到右侧，并慢慢变大。如果你是简单的插入起始状态和终止状态，那么你是无法看到关键帧在动画过程中是如何调整圆形大小和水平位置的。&lt;/p&gt;
&lt;p&gt;注意，你指定中间状态的关键帧，浏览器会在关键帧之间插入中间状态的。想象一下，由许多小的动画连接起来的动画链。&lt;/p&gt;
&lt;h4&gt;2. CSS Transitions&lt;/h4&gt;
&lt;p&gt;Transitions只定义的起始状态，终止状态和时延。浏览器会自处理其余的中间状态：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-7.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;虽然transitions是简单帧动画，就像下落的水滴，不要被这小伎俩欺骗。他们是非常强大的并且在我做的项目是我最喜欢用到的动画技术。很快你就看到它更强大的功能了。&lt;/p&gt;
&lt;h4&gt;3. Scripted / JavaScript Animations&lt;/h4&gt;
&lt;p&gt;如果你想完全控制起始到终止状态的动画，你可以使用JavaScript：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animation Img" class="align-center" src="/img/131129-8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;当你不用浏览器为你插补那些中间状态，那么会有很多酷的事要做。更详细的请看JavaScript动画教程。&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;好吧，在本篇中，我大致讲到大部分动画的内容。如果你感觉头大，不用怕--一旦我们展开基本概念时，就易于理解了。那么，休息一下，你可以点击下面教程链接进一步学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animations/"&gt;Creating a Simple CSS Animation&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitions/"&gt;Looking at CSS3 Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animations-vs-transitions/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/animating_with_requestAnimationFrame.htm"&gt;Animating with requestAnimationFrame&lt;/a&gt; （未翻译）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;翻译水平有限，敬请各位同学批评指正。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 29 Nov 2013 22:06:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-29:posts/2013/introduction-to-animation-in-html/</guid><category>animation</category></item><item><title>Animation（转）</title><link>http://stormhouse.github.io/posts/2013/animation/</link><description>&lt;hr /&gt;
&lt;p&gt;Animation翻译系列文章&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Tutorials, videos, and &lt;a href="http://www.kirupa.com/book/animation_in_html_css_and_javascript.htm"&gt;even a book&lt;/a&gt; to help you learn how to create great animations in HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/introduction-to-animation-in-html/"&gt;Introduction to Animation in HTML&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=9dwGgUe578k"&gt;Dealing with Vendor Prefixes in CSS and JavaScript&lt;/a&gt;&lt;a href="http://pan.baidu.com/s/1eQqVXoY"&gt; （墙内云盘分享）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CSS Animations and Transitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-animations/"&gt;All About CSS Animations&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/all-about-css-transitions/"&gt;All About CSS Transitions&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animations-vs-transitions/"&gt;CSS3: Animations vs. Transitions&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/easing-functions-in-css3/"&gt;Easing Functions in CSS3&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/animating-movement-smoothly-using-css/"&gt;Animating Movement Smoothly Using CSS&lt;/a&gt; （译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/the-css-animation-events/"&gt;The CSS Animation Events&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/the-transitionend-event/"&gt;The transitionEnd Event&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/get-the-value-of-animating-css-properties/"&gt;Get the Value of CSS Properties As They Are Animating&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2013/looping-a-css-transition/"&gt;Looping a CSS Transition&lt;/a&gt;（译）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Examples Using CSS Animations and Transition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2014/slide-image-on-hover-using-css3/"&gt;Slide Image on Hover using CSS3&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2014/sliding-background-effect-on-link-hover/"&gt;Sliding Background Effect on Link Hover&lt;/a&gt;（译）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stormhouse.github.io/posts/2014/animating-many-elements-using-transitions/"&gt;Animating Many Elements Using a Transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/creating_a_sweet_content_slider.htm"&gt;Creating a Sweet Content Slider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/move_element_to_click_position.htm"&gt;Move Element to Click Position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/simple_text_fade_and_scale_animation.htm"&gt;Simple Text Fade and Scale Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/getting_jittery_on_hover_using_only_css.htm"&gt;Getting Jittery on Hover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/the_blink_tag_shall_live_on.htm"&gt;The &lt;blink&gt; Tag Shall Live On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/rounded_image_links_with_a_sweet_hover_effect.htm"&gt;Rounded Image Links with a Sweet Hover Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/snippets/slide_bounce_image_on_hover.htm"&gt;Slide and Bounce an Image on Hover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/creating_the_ios_icon_jiggle_wobble_effect_in_css.htm"&gt;Creating the iOS Icon Jiggle / Wobble Effect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Animating in Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Animating in Code Using JavaScript&lt;/li&gt;
&lt;li&gt;Animating with requestAnimationFrame&lt;/li&gt;
&lt;li&gt;Animation Loops using requestAnimationFrame&lt;/li&gt;
&lt;li&gt;Creating a Simple HTML5 Canvas Animation&lt;/li&gt;
&lt;li&gt;DOM vs. Canvas&lt;/li&gt;
&lt;li&gt;Introduction to Easing in JavaScript&lt;/li&gt;
&lt;li&gt;Animating with Robert Penner's Easing Functions&lt;/li&gt;
&lt;li&gt;Animating Many Things on a Canvas&lt;/li&gt;
&lt;li&gt;Frame Rates and HTML/JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Examples Involving Animations Created in Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Animated Scroll to Top with Easing&lt;/li&gt;
&lt;li&gt;Smooth Parallax Scrolling&lt;/li&gt;
&lt;li&gt;Creating a Strobe Light Generator&lt;/li&gt;
&lt;li&gt;Amorphous Circles&lt;/li&gt;
&lt;li&gt;The Falling Snow Effect&lt;/li&gt;
&lt;li&gt;Deconstruction: Irritated Bubbles&lt;/li&gt;
&lt;li&gt;Creating a Basic Particle System&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 29 Nov 2013 21:30:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-29:posts/2013/animation/</guid><category>animation</category></item><item><title>Base64编码</title><link>http://stormhouse.github.io/posts/2013/base64/</link><description>&lt;p&gt;Base64编码是将任意二进制数据转换为可打印的ASCII字符。&lt;/p&gt;
&lt;h2&gt;从8位到6位&lt;/h2&gt;
&lt;p&gt;它是将一个8位字节序列拆散为6位，并为每个6位片段分配一个字符（2^6=64，推之Base64字符集为64个以内，实际65个字符）。Base64的码表为：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-base64-table.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;来个实例，下图以中文&lt;code&gt;编码&lt;/code&gt;两个字符（utf-8格式）为例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-base64-1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;可以在&lt;a href="http://www.base64encode.org/"&gt;Base64 Decode and Encode - Online&lt;/a&gt;上验证一下结果。&lt;/p&gt;
&lt;h2&gt;补码&lt;/h2&gt;
&lt;p&gt;Base64编码是将二进制截成每6位一个单位，会有二进制序列不能正好平均分成6位块的情况，这时要在序列末尾填充零位，补够总位数是6*8的最小公倍数，任何完全填充的6位组由特殊的第65个符号&lt;code&gt;=&lt;/code&gt;表示。比如ASCII码的字符&lt;code&gt;a&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-base64-2.png" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;用途&lt;/h2&gt;
&lt;p&gt;Base64编码是对二进制序列为操作对象，那对于任意的二进制序列都可以编码，如文件。
在网上搜集了一些Base64编码应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhangxinxu.com/wordpress/2012/04/base64-url-image-%E5%9B%BE%E7%89%87-%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"&gt;CSS中url属性&lt;/a&gt;：适用于小图片，减少HTTP请求数。&lt;/li&gt;
&lt;li&gt;早期电子邮件中&lt;/li&gt;
&lt;li&gt;简单加密：防君子不防小人的加密方式&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4070693/what-is-the-purpose-of-base-64-encoding-and-why-it-used-in-http-basic-authentica"&gt;HTTP基本认证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文件入库：将文件的二进制流转换成文本存入数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实现&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stormhouse.github.com/demo/js/base64.html"&gt;JavaScript实现&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;在线工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.base64encode.org/"&gt;Base64 Decode and Encode - Online &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webcodertools.com/imagetobase64converter"&gt;Convert any image into a base64 string&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 25 Nov 2013 21:11:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-25:posts/2013/base64/</guid><category>encoding</category><category>base64</category></item><item><title>URL编码</title><link>http://stormhouse.github.io/posts/2013/url-encoding/</link><description>&lt;hr /&gt;
&lt;p&gt;URL(统一资源定位符, Uniform Resource Location)是URI(统一资源标识符, Uniform Resource Identifier)的一种，一般来讲，URL是Internet上用来描述信息资源的字符串，用于客户端访问www服务器或其它服务器的方式。来几个URL：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* ftp://host/filepath/
* http:// 
* ftp://表示通过文件传输协议FTP访问FTP服务器。  
* telnet://表示通过远程登录协议Telnet进行远程登录。  
* gopher://表示通过gopher协议访问Gopher服务器。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然协议也可以自己扩展。&lt;/p&gt;
&lt;p&gt;这个不扯太多，今天只讨论编码。&lt;/p&gt;
&lt;h2&gt;URL中包括中文&lt;/h2&gt;
&lt;p&gt;看代码，文件名&lt;code&gt;编码-test.html&lt;/code&gt;放到tomcat（全局web.xml配置listings设置成true）下webapp目录下中的encoding目录下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meat&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;编码test&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;浏览器（chrome,IE）访问该文件&lt;code&gt;http://localhost:8080/encoding/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-url1.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;点击该文件：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-url2.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;得出结论：在浏览器中输入带中文的URL，自动按utf-8编码转换（多了个%）；404，说明服务器端没有正确的编码方式来处理该URL，导致找不到该文件。即浏览器与服务器端（tomcat）不是同一种编码格式来处理URL。幸好以前研究过部分tomcat的源代码，啥也不说，上图：（tomcat-7.0.42版本，CoyoteAdapter.java文件814行）&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-url3.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;可以看到，tomcat默认是按US-ASCII编码方式来处理url，显然无法正确处理带中文的文件名。看其注释可知它是可配的，即在&lt;code&gt;${tomcat_home}/conf/server.xml&lt;/code&gt;中Connector节点添加 &lt;code&gt;URIEncoding="UTF-8"&lt;/code&gt;，重起tomcat，再次访问，一切如我所愿。&lt;/p&gt;
&lt;h2&gt;form表单提交中的中文&lt;/h2&gt;
&lt;p&gt;点击&lt;code&gt;编码-test.html&lt;/code&gt;页面中的&lt;code&gt;submit&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-url4.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;对于表单生成（GET）的URL查询字符中有中文，默认按操作系统的编码方式，试想这不乱套了吗，不同语言国家的浏览器访问同一页面，那么提交的数据会变的千奇百怪了吧。还好给表单加个配置&lt;code&gt;accept-charset&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;accept-charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;编码test&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新页面，再次点击，一切都美好&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-url5.png" title="" /&gt;&lt;/p&gt;
&lt;h2&gt;Ajax的中文参数&lt;/h2&gt;
&lt;p&gt;首先不去实验一些浏览器的差异性了，因为你不可能不用ajax库，而自己包装XHR对象来实现。细节都被jQuery处理了，如果想了解细节，看jQuery的ajax部分代码。这里就给出一个参数配置&lt;code&gt;contentType&lt;/code&gt;消息主体的内容类型后，添加该内容的字符集：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;jQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nc"&gt;.ajaxSubmit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/x-www-form-urlencoded; charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;successFun&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;枯燥的定义&lt;/h2&gt;
&lt;p&gt;不想看又不可不看的部分&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;URL只允许使用US-ASCII字符集中的可打印字符（0x20-0x7e范围内的字符）。并且，由于其在URL方案或HTTP协议内具有特殊含义的字符(= %等)，也不能使用，如：&lt;/p&gt;
&lt;h4&gt;保留字符&lt;/h4&gt;
&lt;p&gt;URL可以划分成若干个组件，协议、主机、路径等。有一些字符（:/?#[]@）是用作分隔不同组件的。例如：冒号用于分隔协议和主机，/用于分隔主机和路径，?用于分隔路径和查询参数，等等。还有一些字符（!$&amp;amp;'()*+,;=）用于在每个组件中起到分隔作用的，如=用于表示查询参数中的键值对，&amp;amp;符号用于分隔查询多个键值对。当组件中的普通数据包含这些特殊字符时，需要对其进行编码。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ietf.org/rfc/rfc3986.txt"&gt;RFC3986&lt;/a&gt;中指定了以下字符为保留字符(如URL包括这些字符必须对其编码)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;! * &amp;#39; ( ) ; : @ &amp;amp; = + $ , / ? # [ ]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;受限字符&lt;/h4&gt;
&lt;p&gt;还有一些字符，当他们直接放在Url中的时候，可能会引起解析程序的歧义。这些字符被视为不安全字符，原因有很多：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* 空格：URL在传输的过程，或者用户在排版的过程，或者文本处理程序在处理URL的过程，都有可能引入无关紧要的空格，或者将那些有意义的空格给去掉。
* 引号以及&amp;lt;&amp;gt;：引号和尖括号通常用于在普通文本中起到分隔Url的作用
* #：通常用于表示书签或者锚点
* %：百分号本身用作对不安全字符进行编码时使用的特殊字符，因此本身需要编码
* {}|\^[]`~：某一些网关或者传输代理会篡改这些字符
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;非ASCII字符集&lt;/h4&gt;
&lt;p&gt;中文、韩文......，统一utf-8编码格式。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;网络上传输的是二进制，URL编码，其实就是把字符映射成二进制的过程。RFC定义合法URL只能是可打印ASCII字符来表示，也包括一些表示特殊含义的保留字符和保留字符（文件名或路径中含有，则需转换成。如，=表示查询参数键值，需转换成%3D），这样才能保证服务端正确编码的解析。
一些常见的URL编码字符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;= 转换为 %3d
% 转换为 %25
空格 转换为 %20
新行 转换为 %0a
空字符 转换为 %00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详细参见&lt;a href="http://www.w3schools.com/tags/ref_urlencode.asp"&gt;HTML URL Encoding Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;最后的js中的三个方法&lt;/h2&gt;
&lt;p&gt;escape(unescape)，encodeURI(decodeURI)，encodeURIComponent(decodeURIComponent)---都是用于将不安全不合法的URL字符转换为合法的URL字符表示，不同点如下：&lt;/p&gt;
&lt;h4&gt;安全字符不同&lt;/h4&gt;
&lt;p&gt;不会对以下字符进行编码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* escape（69个）：*/@+-._0-9a-zA-Z
* encodeURI（82个）：!#$&amp;amp;&amp;#39;()*+,/:;=?@-._~0-9a-zA-Z
* encodeURIComponent（71个）：!&amp;#39;()*-._~0-9a-zA-Z
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;兼容性不同&lt;/h4&gt;
&lt;p&gt;escape函数是从Javascript 1.0的时候就存在了，它返回的是unicode，其他两个函数是在Javascript 1.5才引入的。但是由于Javascript 1.5已经非常普及了，所以实际上使用encodeURI和encodeURIComponent并不会有什么兼容性问题。 &lt;/p&gt;
&lt;h4&gt;对Unicode字符的编码方式不同&lt;/h4&gt;
&lt;p&gt;这三个函数对于ASCII字符的编码方式相同，均是使用百分号+两位十六进制字符来表示。但是对于Unicode字符，escape的编码方式是%uxxxx，其中的xxxx是用来表示unicode字符的4位十六进制字符。这种方式已经被W3C废弃了。但是在ECMA-262标准中仍然保留着escape的这种编码语法。encodeURI和encodeURIComponent则使用UTF-8对非ASCII字符进行编码，然后再进行百分号编码。这是RFC推荐的。&lt;/p&gt;
&lt;p&gt;因此建议尽可能的使用encodeURI和encodeURIComponent这两个函数替代escape进行编码。&lt;/p&gt;
&lt;h4&gt;适用场合不同&lt;/h4&gt;
&lt;p&gt;encodeURI被用作对一个完整的URI进行编码，而encodeURIComponent被用作对URI的一个组件进行编码。从上面提到的安全字符范围表格来看，我们会发现，encodeURIComponent编码的字符范围要比encodeURI的大。我们上面提到过，保留字符一般是用来分隔URI组件（一个URI可以被切割成多个组件，参考预备知识一节）或者子组件（如URI中查询参数的分隔符），如：号用于分隔scheme和主机，?号用于分隔主机和路径。由于encodeURI操纵的对象是一个完整的的URI，这些字符在URI中本来就有特殊用途，因此这些保留字符不会被encodeURI编码，否则意义就变了。
组件内部有自己的数据表示格式，但是这些数据内部不能包含有分隔组件的保留字符，否则就会导致整个URI中组件的分隔混乱。因此对于单个组件使用encodeURIComponent，需要编码的字符就更多了。&lt;/p&gt;
&lt;h4&gt;保留及受限字符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;% 保留作为编码字符的转义标志&lt;/li&gt;
&lt;li&gt;/ 保留作为路径组件中分隔路径段的定界符&lt;/li&gt;
&lt;li&gt;. 保留在路径组件中使用&lt;/li&gt;
&lt;li&gt;.. 保留在路径组件中使用&lt;/li&gt;
&lt;li&gt;
&lt;h1&gt;保留作为分段定界符使用&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;? 保留作为查询字符串定界符使用&lt;/li&gt;
&lt;li&gt;; 保留作为参数定界符使用&lt;/li&gt;
&lt;li&gt;: 保留作为方案、用户/口令，以及主机/端口组件的定界符使用&lt;/li&gt;
&lt;li&gt;$ , + 保留&lt;/li&gt;
&lt;li&gt;@ &amp;amp; = 在某些方案的上下文中有特殊的含义，保留&lt;/li&gt;
&lt;li&gt;{ } | \ ^ ~ [ ] ` 由于各种Agent代理，比如各种网关的不安全处理，受限&lt;/li&gt;
&lt;li&gt;&amp;lt; &amp;gt; " 不安全；这些字符在URL范围外通常有意义的，如在文档中对URL自身进行定界&lt;/li&gt;
&lt;li&gt;0x00–0x1F, 0x7F 受限，这些十六进制范围内控字符都在US-ASCII字符集中不可打印区&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;0x7F 受限，十六进制范围内控字符都在US-ASCII字符集中不在7比特范围内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参拷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html"&gt;关于URL编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kb.cnblogs.com/page/133765/"&gt;URL编码与解码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://product.china-pub.com/3683063"&gt;HTTP权威指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Sat, 23 Nov 2013 20:53:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-23:posts/2013/url-encoding/</guid><category>encoding</category><category>python</category><category>http</category><category>url</category><category>tomcat</category></item><item><title>http中的字符编码</title><link>http://stormhouse.github.io/posts/2013/character-encoding-http/</link><description>&lt;p&gt;&lt;a href="http://stormhouse.github.io/posts/2013/character-encoding/"&gt;字符编码&lt;/a&gt;和&lt;a href="http://stormhouse.github.io/posts/2013/character-encoding-python/"&gt;python中的字符编码&lt;/a&gt;两文对字符编码简单的介绍。现在开始讨论http中的编码问题，当完成&lt;code&gt;编码&lt;/code&gt;系列的文章后，开始完成一系统http的文章，本文还是需要一些http基本的知识。&lt;/p&gt;
&lt;p&gt;做为java出身的coder，今天还是用python语言来实现http的实例，java实现个东西太麻烦，Simple is better than complex.&lt;/p&gt;
&lt;h2&gt;响应头中的&lt;code&gt;Content-Type&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;我们知道http响应报文，包括两部分实体首部（&lt;code&gt;响应头&lt;/code&gt;）和实体主体（&lt;code&gt;响应主体&lt;/code&gt;），响应头是对主体内容的描述，告知浏览器怎么处理主体内容（文本，图片等等）。上代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BaseHTTPServer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello web&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不了解上面代码没关系，你只需要知道它是一个简单的web服务（只支持GET），只返回一个文本。运行后，打开浏览器访问&lt;code&gt;http://localhost:9000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-ascii.png" title="http ascii" /&gt;&lt;/p&gt;
&lt;p&gt;看到上面我们预料之中的结果，如加入中文后，会出现什么情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#将self.wfile.write(&amp;#39;hello web&amp;#39;)替换为下行内容
self.wfile.write(&amp;#39;hello web 编码&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次运行，访问浏览器&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-http-zh.png" title="http ascii" /&gt;&lt;/p&gt;
&lt;p&gt;乱码出现了。返回浏览器的主体是&lt;code&gt;hello web 编码&lt;/code&gt;，响应头是&lt;code&gt;Content-Type:text/plain&lt;/code&gt;。只说明返回的是文本，而没具体说明该用哪个字符集来解析该文本(浏览器默认操作系统字符集处理gbk)。若改&lt;code&gt;Content-Type:text/plain;charset=utf-8&lt;/code&gt;，再次查看结果，乱码消失了。&lt;code&gt;charset参数是告知浏览器如何把主体内容中的二进制转换为字符&lt;/code&gt;，同理可以推断出该程序会将文本按utf-8编码处理成二进制，在网络上传输。&lt;/p&gt;
&lt;h2&gt;响应头中的&lt;code&gt;Content-Encoding&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Content-Encoding常见的取值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gzip        实体采用GNU zip编码
compress    采用Unix的文件压缩程序
deflate     用zlib格式压缩
identity    没有进行任何编码
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上三种都是无损压缩算法，用于减少传输报文的大小写，不会导致信息损失。其中gzip效率是最高的。&lt;br /&gt;
与之请求对应的&lt;code&gt;Accept-Encoding&lt;/code&gt;相对应。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;http-encode-gzip.py 简单httpserver&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BaseHTTPServer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="c"&gt;# 添加gzip压缩&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compressBuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;zbuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;zfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GzipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;fileobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zbuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compresslevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;zfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;zfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;zbuf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gzip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;#若注释该行，客户端就会出错&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;            &amp;lt;title&amp;gt;最简单的httpserver&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;            &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;body&amp;gt;就提供这一个页面&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="c"&gt;# 对返回客户端内容压缩&lt;/span&gt;
        &lt;span class="n"&gt;zbuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compressBuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 与self.send_header(&amp;#39;Content-Encoding&amp;#39;,&amp;#39;gzip&amp;#39;)对应&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;zbuf&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zbuf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码是将内容进行gzip压缩，返回到浏览器端，必须在响应头上加上&lt;code&gt;self.send_header('Content-Encoding','gzip')&lt;/code&gt;，若不加，浏览器按未压缩方式处理主体内容，就会出现乱码。&lt;/p&gt;
&lt;p&gt;上面的是服务端的gzip压缩，一个真正的web服务器必须根据浏览器请求的头是否包含类似&lt;code&gt;Accept-Encoding:gzip,deflate,sdch&lt;/code&gt;，来确定是否进行gzip压缩。&lt;/p&gt;
&lt;p&gt;下面代码是模拟浏览器对服务器端字节gzip解压:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;http-encode-gzip-client.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://127.0.0.1:9000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# 对服务器端发来的字节流 gzip解压&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_WBITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 编码处理==通过chardet模块，自动提取网页的编码&lt;/span&gt;
&lt;span class="c"&gt;# http://www.cnblogs.com/CoolRandy/p/3251733.html&lt;/span&gt;
&lt;span class="c"&gt;#infoencode = chardet.detect(text).get(&amp;#39;encoding&amp;#39;,&amp;#39;utf-8&amp;#39;)&lt;/span&gt;
&lt;span class="c"&gt;#print text.decode(infoencode,&amp;#39;ignore&amp;#39;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;这块仅是简单的介绍几个http消息头，详细介绍会单独在将来的http系列的文章里&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 22 Nov 2013 21:10:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-22:posts/2013/character-encoding-http/</guid><category>encoding</category><category>python</category><category>http</category></item><item><title>python中的字符编码</title><link>http://stormhouse.github.io/posts/2013/character-encoding-python/</link><description>&lt;p&gt;上篇&lt;a href="http://stormhouse.github.io/posts/2013/character-encoding/"&gt;字符编码&lt;/a&gt;对字符编码做了简单的介绍，除了演示几个简单的例子外，没有将&lt;code&gt;字符编码&lt;/code&gt;与&lt;code&gt;编程语言&lt;/code&gt;，看本文的标题相信就明白，这是与伟大的python结合一些实例（python版本为2.7.5）。&lt;/p&gt;
&lt;p&gt;准备工作，去码表（&lt;a href="http://ash.jp/code/cn/gb2312tbl.htm"&gt;GB2312&lt;/a&gt;, &lt;a href="http://www.tamasoft.co.jp/en/general-info/unicode.html"&gt;Unicode&lt;/a&gt;, &lt;a href="http://www.moransoft.com/chinesecode.html"&gt;UTF-8&lt;/a&gt;）查取&lt;code&gt;编码&lt;/code&gt;的GB2312和Unicode字符集编码及按gb2312和utf-8编码方式保存的二进制。注意，要亲自查一下 哦～～&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;编码                  对应十六进制
GB2312字符集：        b1e0 c2eb
GB2312编码(同上):     b1e0 c2eb
Unicode字符集：       7f16 7801
UTF-16编码(同上):     7f16 7801
UTF-8编码:            e7bc96 e7a081
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;字符串操作&lt;/h2&gt;
&lt;p&gt;话不多说，打开python解释器，输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;编码&amp;#39;
&amp;gt;&amp;gt;&amp;gt; s
&amp;#39;\xb1\xe0\xc2\xeb&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将结果与码表查得的结果，对应着GB2312字符集。为什么呢？继续：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#返回当前系统所使用的默认字符编码&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除一些IDE外，python是按操作系统默认字符编码来处理的。这里是ascii。&lt;/p&gt;
&lt;p&gt;python支持unicode：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; u = u&amp;#39;编码&amp;#39; #unicode编码
&amp;gt;&amp;gt;&amp;gt; u
u&amp;#39;\u7f16\u7801&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;utf-8：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; u = u&amp;#39;编码&amp;#39;
&amp;gt;&amp;gt;&amp;gt; u
u&amp;#39;\u7f16\u7801&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(u)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; s = u.encode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; s
&amp;#39;\xe7\xbc\x96\xe7\xa0\x81&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(s)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; u1 = s.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; u1
u&amp;#39;\u7f16\u7801&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;综上，可与查得的结果相同。&lt;/p&gt;
&lt;p&gt;python中的str，unicode对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;str: str对象其实就是"8-bit string" ，字节字符串，本质上类似java中的byte[]。decode&lt;/li&gt;
&lt;li&gt;unicode: unicode对象应该才是等同于java中的String对象，或本质上是java的char[]。encode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;unicode才是真正意义上的字符串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;编码&amp;#39;
&amp;gt;&amp;gt;&amp;gt; len(s)
4
&amp;gt;&amp;gt;&amp;gt; u = u&amp;#39;编码&amp;#39;
&amp;gt;&amp;gt;&amp;gt; len(u)
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详细请参见&lt;a href="http://www.cnblogs.com/huxi/archive/2010/12/05/1897271.html"&gt;python的str，unicode对象的encode和decode方法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文件操作&lt;/h2&gt;
&lt;h4&gt;读文件&lt;/h4&gt;
&lt;p&gt;内置的open()方法打开文件时，read()读取的是str，读取后需要使用正确的编码格式进行decode()。&lt;/p&gt;
&lt;p&gt;如保存为ascii格式的文本文件encoding-ascii.txt，内容为'编码'。对该文本读取：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#coding=utf-8

f = open(&amp;#39;encoding-ascii.txt&amp;#39;)
s = f.read()
f.close()

print type(s) #&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;
print(s)      #编码

u = s.decode(&amp;#39;gb2312&amp;#39;)
print type(u) #&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;
print u       #编码
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面是正确的编码处理方式。假如读取保存为utf-8格式的文件encoding-utf8.txt会出现什么情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#coding=utf-8

f = open(&amp;#39;encoding-utf8.txt&amp;#39;)
s = f.read()
f.close()

print type(s) #&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;
print(s)      #锘跨紪鐮     (乱码)


u = s.decode(&amp;#39;gb2312&amp;#39;) #报错。正确方式：s.decode(&amp;#39;utf-8&amp;#39;)
# UnicodeDecodeError: &amp;#39;gb2312&amp;#39; codec can&amp;#39;t decode bytes in position 4-5: llegal multibyte sequence
print type(u) 
print u
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;故正确处理方式为：&lt;br /&gt;
使用codecs模块中的open方法，可指定编码方式打开文件，该方法返回的是unicode（注意：内置open返回的是str）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;encoding-utf8.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#u&amp;#39;\u7f16\u7801&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gb2312&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;       &lt;span class="c"&gt;#编码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;写文件&lt;/h4&gt;
&lt;p&gt;内置的write()写入时，如果参数是unicode，则需要使用你希望写入的编码进行encode()，如果是其他编码格式的str，则需要先用该str的编码进行decode()，转成unicode后再使用写入的编码进行encode()。如果直接将unicode作为参数传入write()方法，Python将先使用源代码文件声明的字符编码进行编码然后写入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#coding=utf-8

u = u&amp;#39;编码&amp;#39;
f = open(&amp;#39;test.txt&amp;#39;, &amp;#39;w&amp;#39;)
# 编码成UTF-8编码的str
s = u.encode(&amp;#39;gb2312&amp;#39;)
f.write(s)
f.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看test.txt文件，可得保存的格式为ascii。&lt;/p&gt;
&lt;p&gt;codecs模块写入时，如果参数是unicode，则使用open()时指定的编码进行编码后写入；如果是str，则先根据源代码文件声明的字符编码，解码成unicode后再进行前述操作。相对内置的open()来说，这个方法比较不容易在编码上出现问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#coding=utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;编码&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test1.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gb2312&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#utf-8&lt;/span&gt;
&lt;span class="c"&gt;# 写入unicode&lt;/span&gt;
&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 写入str，自动进行解码编码操作(貌似没法自动转化TODO)&lt;/span&gt;
&lt;span class="c"&gt;# GBK编码的str&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;汉&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# &amp;#39;\xba\xba&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# 这里会先将GBK编码的str解码为unicode再编码为UTF-8写入&lt;/span&gt;
&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;网络(HTTP)操作&lt;/h2&gt;
&lt;p&gt;[传送门][]&lt;/p&gt;
&lt;h2&gt;sys/locale模块关于编码相关的方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(): &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c"&gt;# 返回当前系统所使用的默认字符编码&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 返回用于转换Unicode文件名至系统文件名所使用的编码&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfilesystemencoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 获取默认的区域设置并返回元祖(语言, 编码)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultlocale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 返回用户设定的文本数据编码&lt;/span&gt;
&lt;span class="c"&gt;# 文档提到this function only returns a guess&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpreferredencoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# \xba\xba是&amp;#39;汉&amp;#39;的GBK编码&lt;/span&gt;
&lt;span class="c"&gt;# mbcs是不推荐使用的编码，这里仅作测试表明为什么不应该用&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;&amp;#39;\xba\xba&amp;#39;.decode(&amp;#39;mbcs&amp;#39;):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xba\xba&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mbcs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;#在笔者的Windows上的结果(区域设置为中文(简体, 中国))&lt;/span&gt;
&lt;span class="c"&gt;#sys.getdefaultencoding(): ascii&lt;/span&gt;
&lt;span class="c"&gt;#sys.getfilesystemencoding(): mbcs&lt;/span&gt;
&lt;span class="c"&gt;#locale.getdefaultlocale(): (&amp;#39;zh_CN&amp;#39;, &amp;#39;cp936&amp;#39;)&lt;/span&gt;
&lt;span class="c"&gt;#locale.getpreferredencoding(): cp936&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39;\xba\xba&amp;#39;.decode(&amp;#39;mbcs&amp;#39;): u&amp;#39;\u6c49&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用字符编码声明，并且同一工程中的所有源代码文件使用相同的字符编码声明。&lt;/li&gt;
&lt;li&gt;抛弃str，全部使用unicode。&lt;code&gt;u = u'编码'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用codecs.open()替代内置的open()。&lt;/li&gt;
&lt;li&gt;绝对需要&lt;code&gt;避免&lt;/code&gt;使用的字符编码：MBCS/DBCS和UTF-16。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说的MBCS不是指GBK什么的都不能用，而是不要使用Python里名为'MBCS'的编码，除非程序完全不移植。&lt;br /&gt;
Python中编码'MBCS'与'DBCS'是同义词，指当前Windows环境中MBCS指代的编码。Linux的Python实现中没有这种编码，所以一旦移植到Linux一定会出现异常！另外，只要设定的Windows系统区域不同，MBCS指代的编码也是不一样的。&lt;/p&gt;
&lt;h4&gt;MBCS&lt;/h4&gt;
&lt;p&gt;计算机世界里很快就有了其他语言，单字节的ASCII已无法满足需求。后来每个语言就制定了一套自己的编码，由于单字节能表示的字符太少，而且同时也需要与ASCII编码保持兼容，所以这些编码纷纷使用了多字节来表示字符，如GBxxx、BIGxxx等等，他们的规则是，如果第一个字节是\x80以下，则仍然表示ASCII字符；而如果是\x80以上，则跟下一个字节一起（共两个字节）表示一个字符，然后跳过下一个字节，继续往下判断。&lt;/p&gt;
&lt;p&gt;这里，IBM发明了一个叫Code Page的概念，将这些编码都收入囊中并分配页码，GBK是第936页，也就是CP936。所以，也可以使用CP936表示GBK。&lt;/p&gt;
&lt;p&gt;MBCS(Multi-Byte Character Set)是这些编码的统称。目前为止大家都是用了双字节，所以有时候也叫做DBCS(Double-Byte Character Set)。必须明确的是，MBCS并不是某一种特定的编码，Windows里根据你设定的区域不同，MBCS指代不同的编码，而Linux里无法使用MBCS作为编码。在Windows中你看不到MBCS这几个字符，因为微软为了更加洋气，使用了ANSI来吓唬人，记事本的另存为对话框里编码ANSI就是MBCS。同时，在简体中文Windows默认的区域设定里，指代GBK。&lt;/p&gt;
&lt;h2&gt;参拷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/huxi/archive/2010/12/05/1897271.html"&gt;Python字符编码详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appofis.iteye.com/blog/443206"&gt;python的str，unicode对象的encode和decode方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/library/codecs.html#standard-encodings"&gt;Standard Encodings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Thu, 21 Nov 2013 22:38:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-21:posts/2013/character-encoding-python/</guid><category>encoding</category><category>python</category></item><item><title>字符编码</title><link>http://stormhouse.github.io/posts/2013/character-encoding/</link><description>&lt;hr /&gt;
&lt;p&gt;每个软件开发人员应该无条件掌握的知识！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;字符编码是一个基础话题，不管你从事哪种语言的开发，还是前端、后端或网络开发，乱码问题一直困扰着像我这样的低水平的生手。接下来的内容是我参考了好多的文章，并整理的便于自己理解的脉络。&lt;br /&gt;
就像别人一样的开场：计算机比较傻，在它的世界里只有 &lt;code&gt;1&lt;/code&gt; &lt;code&gt;0&lt;/code&gt;，如何才让人类可理解的&lt;strong&gt;字符&lt;/strong&gt;(Character,如字母、数字，一些符号，汉字...)打印到显示屏幕上呢。这需要有一个从由&lt;code&gt;1&lt;/code&gt; &lt;code&gt;0&lt;/code&gt;组合成的序列到可打印字符的一个&lt;strong&gt;映射&lt;/strong&gt; (编码Encoding)，可打印的字符是一个&lt;strong&gt;集合&lt;/strong&gt;(字符集Charset)。在这里就引出了几个概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符(Character)：是文字与符号的总称，包括文字、图形符号、数学符号等。&lt;/li&gt;
&lt;li&gt;字符集(Charset)：即字符的集合，规定了在这些集合里面有哪些字符。&lt;/li&gt;
&lt;li&gt;字符编码(Encoding)：就是规定用一个字节还是多个字节来存储一个字符，用固定的二进制码值表示某个字符。&lt;/li&gt;
&lt;li&gt;字节(byte)：计算机中存储数据的单元，一个8位的二进制数，是一个很具体的存储空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一看到这样定义我就头大，还是来具体的例子，故事开始了&lt;/p&gt;
&lt;h3&gt;美国人发明了计算机&lt;/h3&gt;
&lt;p&gt;很久很久以前，计算机世界只有美国人。英语语言里字符很少，大小写字母共26*2个，阿拉伯数字10个，其它的一些符号(如 ! " # $ % &amp;amp;等)，这些可打印字符一共95个。计算机的的回车键，删除键等控制符33个。总和只有128个。于是，对于他们来说，很自然，那么计算机中用8位就可以表示他们的所有字符了吧。于是他们将8位称作一个字节，计算机的8位表示的每个数字对应了一个英文字符，画了一张表（&lt;a href="http://www.asciitable.com/"&gt;ASCII码表&lt;/a&gt;），这就是ASCII编码(American Standard Code for Information Interchange，美国信息互换标准代码)。  &lt;br /&gt;
这里的128个字符集合，就叫&lt;code&gt;字符集&lt;/code&gt;,对应的二进制，就是&lt;code&gt;字符编码&lt;/code&gt;。你可以做个 &lt;strong&gt;测试&lt;/strong&gt; ，新一个文本文件，内容为&lt;code&gt;abcdabcd&lt;/code&gt;,保存为ASCII编码格式，用十六进制编辑器打开，看是否与&lt;a href="http://www.ascii-code.com/"&gt;ASCII码表&lt;/a&gt;中的值对应。
win7系统中&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-win.png" title="ascii encoding in windows" /&gt;&lt;/p&gt;
&lt;p&gt;linux系统中&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-linux-hex.png" title="ascii encoding in linux" /&gt;&lt;/p&gt;
&lt;p&gt;上面除了对应的&lt;code&gt;61 62 63 64&lt;/code&gt;，还有&lt;code&gt;0D 0A&lt;/code&gt;，这是windows系统中断行的标志，linux中是&lt;code&gt;0A&lt;/code&gt;，默认最后一行有添加该标志。详细请参见&lt;a href="http://codingstandards.iteye.com/blog/810900"&gt;将DOS格式文本文件转换成UNIX格式&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;计算机传到了欧洲&lt;/h3&gt;
&lt;p&gt;欧洲是有好多个国家的，他们的每个国家也都有自己的文字，比如拉丁文，希腊文等。怎么办呢？于是想到，你美国人指定的ASCII码表里面不是只有127个字符吗，后面128-255的字符不是说待定吗，好吧，我们就不客气了。于是欧洲人就将各种奇怪的语言塞入127后面的字符中，形成了一系列的ISO 8859字符集。比如希腊文塞入ASCII，就形成了ISO/IEC 8859-7，西欧语种塞入ASCII就形成了ISO/IEC 8859-1，ISO/IEC 8859-1也叫做latin-1。（对，就是mysql里面经常见到的编码）&lt;/p&gt;
&lt;p&gt;下面是&lt;a href="http://zh.wikipedia.org/wiki/ISO/IEC_8859"&gt;ISO 8859&lt;/a&gt;现有的15个字符集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISO/IEC 8859-1 (Latin-1) - 西欧语言 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-2 (Latin-2) - 中欧语言 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-3 (Latin-3) - 南欧语言。世界语也可用此字符集显示。 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-4 (Latin-4) - 北欧语言 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-5 (Cyrillic) - 斯拉夫语言 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-6 (Arabic) - 阿拉伯语 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-7 (Greek) - 希腊语 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-8 (Hebrew) - 希伯来语（视觉顺序） &lt;/li&gt;
&lt;li&gt;ISO 8859-8-I - 希伯来语（逻辑顺序） &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-9（Latin-5 或 Turkish）- 它把Latin-1的冰岛语字母换走，加入土耳其语字母。 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-10（Latin-6 或 Nordic）- 北日耳曼语支，用来代替Latin-4。 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-11 (Thai) - 泰语，从泰国的 TIS620 标准字集演化而来。 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-13（Latin-7 或 Baltic Rim）- 波罗的语族 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-14（Latin-8 或 Celtic）- 凯尔特语族 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-15 (Latin-9) - 西欧语言，加入Latin-1欠缺的芬兰语字母和大写法语重音字母，以及欧元（€）符号。 &lt;/li&gt;
&lt;li&gt;ISO/IEC 8859-16 (Latin-10) - 东南欧语言。主要供罗马尼亚语使用，并加入欧元符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该部分内容我们不用太关注，接下来&lt;/p&gt;
&lt;h3&gt;伟大的中国人终于用上了电脑&lt;/h3&gt;
&lt;p&gt;中文可不得了，文字博大精深，字符远远超过了256个。所以我们无法使用ASCII的扩展了。怎么办呢？ 1981年的时候，国家派一批人来做了这个事情，他们统计出所有的中文大概有6000多个字符（后来证明这些人的水品也是有限，好多字符都没有搜出来，于是就有了多种的中文编码），用两个字节（16bit）来表示，16bit能表示的是65536个字符，太够了。我们将16bit分为前8bit和后8bit&lt;br /&gt;
如果前8bit小于127（英文ASCII），那么这个8bit就是表示英文&lt;br /&gt;
如果前8bit大于127，那么这8bit和后面的8bit合起来表示一个中文 
这就是&lt;a href="http://ash.jp/code/cn/gb2312tbl.htm"&gt;GB2312&lt;/a&gt;，GB2312 是对 ASCII 的中文扩展&lt;/p&gt;
&lt;p&gt;好了，后来某些领导发现，他的名字没法编码了，这个问题出来了。6000个汉字还不足以囊括所有中文，国家在1995年又组织了一批人，继续搜罗一些生僻字，一共搜集出了21886个汉字和字符，形成了GBK编码，GBK编码向下兼容GB2312。&lt;/p&gt;
&lt;p&gt;再后来发现了，一些满文，蒙古文啥的少数名族的语言没有编辑到GBK中，继续编辑收录，形成了GB18030编码。&lt;/p&gt;
&lt;p&gt;从ASCII、GB2312、GBK到GB18030，这些编码方法是向下兼容的，即同一个字符在这些方案中总是有相同的编码，后面的标准支持更多的字符。在这些编码中，英文和中文可以统一地处理。区分中文编码的方法是高字节的最高位不为0。按照程序员的称呼，GB2312、GBK到GB18030都属于双字节字符集 (DBCS,Double Byte Charecter Set)。&lt;br /&gt;
在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处 理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了&lt;/p&gt;
&lt;h3&gt;自由的台湾人民&lt;/h3&gt;
&lt;p&gt;台湾是汉字是繁体字，当然不能使用大陆编辑使用的GBXX系列编码了，于是他们自己搞了一套&lt;a href="http://ash.jp/code/cn/big5tbl.htm"&gt;BIG5&lt;/a&gt;中文编码，收录了13060个汉字和字符。但是这里要注意，BIG5的编码映射表和GBXX系列的就完全不一样了，比如同一个“中”字，在BIG5和GB2312中就是两个完全不同的字节。这里就会有乱码出现了，比如（"陶喆"和"陶吉吉"），各种简体中文和繁体文的转码工具就出现了。&lt;br /&gt;
五种中文套装软体：文书处理，资料库，试算表，通讯，绘图。大致的意思是这套编码主要使用于这5个领域&lt;/p&gt;
&lt;h3&gt;各国人民的的UNICODE&lt;/h3&gt;
&lt;p&gt;由于每种语言都制定了自己的字符集，导致最后存在的各种字符集实在太多，在国际交流中要经常转换字符集非常不便。因此，产生了Unicode字符集，它固定使用16 bits（两个字节）来表示一个字符，共可以表示65536个字符 &lt;/p&gt;
&lt;p&gt;对于ascii里的那些“半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于"半角"英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。Unicode使用的通用的字符集叫做UCS。这个字符集就是一个大的字符空间，每个语种都在这个字符空间内划分一段领域。现在应用的UCS是UCS-2，意思就是不管是英文中文，统一使用两个字节（16bit）来进行字符分配。UCS-2字符集可以表示216（即65536）个字符。已经基本满足世界上所有语言了。如果不够怎么办？已经有预定方案UCS-4（用4个字节表示一个字符）。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicode只是一个字符集，全纳了世界所有的符号，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。&lt;/li&gt;
&lt;li&gt;UTF-xx是Unicode的具体实现方式。&lt;/li&gt;
&lt;li&gt;UTF-16是Unicode最基本的实现。Unicode使用16bit表示一个字符，UTF-16就是直接将字符集的映射搬过来而已。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UTF-8&lt;/h3&gt;
&lt;p&gt;本来这样就已经很美好了，但是美国人又不干了，毕竟互联网70％以上的信息仍然是英。凭什么每个英语字符要占用2个字节？凭什么占用了我们的带宽和CPU？于是一帮英语体系的外国人讨论出了UTF-8这种字符编码。UTF-8就是这样一个为了提高英文存取效率的字符集转换格式(Unicode Transformation Form 8-bit form)&lt;br /&gt;
UTF-8这种编码是怎么回事呢？ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英文字符，和ASCII码一样，占用一个字节。因此对于英语字母，UTF-8编码和ASCII码是相同的。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于n字节的符号（n&amp;gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。&lt;/p&gt;
&lt;p&gt;Unicode符号范围       UTF-8编码方式&lt;br /&gt;
(十六进制)            （二进制）&lt;br /&gt;
0000 0000-0000 007F | 0xxxxxxx&lt;br /&gt;
0000 0080-0000 07FF | 110xxxxx 10xxxxxx&lt;br /&gt;
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx&lt;br /&gt;
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里演示一个中文字“汉”，&lt;a href="http://www.chi2ko.com/tool/CJK.htm"&gt;查得&lt;/a&gt;unicode 表式为&lt;code&gt;0x6C49&lt;/code&gt;，二进制为&lt;code&gt;0110 1100 0100 1001&lt;/code&gt;
根据上表，可以发现&lt;code&gt;0x6C49&lt;/code&gt;处在第三行的范围内（&lt;code&gt;0000 0800-0000 FFFF&lt;/code&gt;），因此"严"的UTF-8编码需要三个字节，即格式是"1110xxxx 10xxxxxx 10xxxxxx"。然后，从"严"的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，"汉"的UTF-8编码是"&lt;code&gt;11100110 10110001 10001001&lt;/code&gt;"，转换成十六进制就是&lt;code&gt;0xE6B189&lt;/code&gt;。示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-win-unicode.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;图中十六进制内容是&lt;code&gt;FF FE 49 6C&lt;/code&gt;，肿么回事？这是保存的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little endian: 第二个字节在前&lt;/li&gt;
&lt;li&gt;Big endian： 第一个字节在前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如保存为Big endian方式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-win-unicode-big.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;保存为UTF-8方式&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-win-utf8.png" title="" /&gt;&lt;/p&gt;
&lt;p&gt;上图中的十六进制为&lt;code&gt;EF BB BF E6 B1 89&lt;/code&gt;，肿么会多出来&lt;code&gt;EF BB BF&lt;/code&gt;呢，参见&lt;a href="http://www.zhihu.com/question/20167122"&gt;带BOM的UTF-8&lt;/a&gt;&lt;br /&gt;
如不想带bom，使用editplus编辑器另存为无BOM&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encoding Img" class="align-center" src="/img/encoding-win-utf8-nobom.png" title="utf8 encoding without bom" /&gt;&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;主要搞清两个重要概念&lt;code&gt;字符集&lt;/code&gt;和&lt;code&gt;字符编码&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集：即字符的集合，规定了在这些集合里面有哪些字符，也规定了二进制表示。Ascii是一个集合，gb2312兼容Ascii。&lt;/li&gt;
&lt;li&gt;字符编码：简单讲就是规定用一个字节还是多个字节来存储一个字符。编码方式决定了实际存储的二进制。如GB2312中，字母数字一个字节存储，汉字两个字节存储。Unicode中，UTF-16是按Unicode字符集表示的二进制存储，UTF-8是按字符所在Unicode范围进行一个转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下编码系列的内容可能会包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL Encode&lt;/li&gt;
&lt;li&gt;web方面乱码的处理&lt;/li&gt;
&lt;li&gt;java python中的编码处理&lt;/li&gt;
&lt;li&gt;base64编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;码表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ascii-code.com/"&gt;Ascii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ash.jp/code/cn/gb2312tbl.htm"&gt;GB2312&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.khngai.com/chinese/charmap/tblgbk.php"&gt;GBK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unicode-table.com/en/"&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.moransoft.com/chinesecode.html"&gt;UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参拷&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smartzxy.iteye.com/blog/692602"&gt;研究了一下字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/yjf512/archive/2012/04/21/2461084.html"&gt;编码史记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20167122"&gt;「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.oasisfeng.com/2006/10/19/full-cjk-unicode-range/"&gt;完整的CJK Unicode范围（5.0版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chi2ko.com/tool/CJK.htm"&gt;字体编辑用中日韩汉字Unicode编码表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(完)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Wed, 20 Nov 2013 21:31:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-20:posts/2013/character-encoding/</guid><category>encoding</category></item><item><title>How JavaScript timers work（转）</title><link>http://stormhouse.github.io/posts/2013/how-javascript-timers-work/</link><description>&lt;p&gt;&lt;a href="http://ejohn.org/blog/how-javascript-timers-work/"&gt;原文地址&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://ejohn.org/blog/how-javascript-timers-work/"&gt;翻译原地址&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;了解javascript定时器底层的工作原理是十分重要的。一般它们表现的不那么直观，是因为它在单独的一个线程中，所以它的行为表现的不很直观，甚至有些怪异。 以下三种方式可以让我们去创建并操作定时器:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var id = setTimeout(fn, delay);&lt;/code&gt; 用于起动一个定时器，经过给定的时间后调用特定的函数。该函数返回一个id，来取消这个定时器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var id = setInterval(fn, delay);&lt;/code&gt; 和setTimeout类似，间隔给定的时间来调用函数，直到被取消&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearInterval(id);, clearTimeout(id);&lt;/code&gt; 接收一个参数定时器函数id，用于取消定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为理解定时器内部如果工作，需要声明一个很重要的概念：定时器延时，并不可靠的。这是因为js在浏览器执行是单线程的，异步事件（如鼠标事件和定时器）只在当执行过程中有机会执行时（CPU空闲时）才执行。下图给了很好的解释。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Alt Timers" class="align-center" src="/img/Timers.png" title="timers" /&gt;&lt;/p&gt;
&lt;p&gt;（左侧为正常时序，右侧为定时器注册和发生顺序）。该图提供很多信息，帮助你完全理解javascript异步执行工作方式。这是一个一维图，垂直方向为时间轴，单位是毫秒。中间蓝色部分的表示一个个javascript代码执行块。例如，第一个js块执行了大约19毫秒...。  &lt;/p&gt;
&lt;p&gt;由于javascript在同一时间只能执行一段代码（原于它是单线程）所以这些代码块会阻塞其它异步事件的执行。意味着一个异步事件（如鼠标事件，定时器触发或ajax回调），它会被插入事件队列中排队等待执行（有一点很重要，在不同的浏览器中，这个队列模型是不同的，所以队列中的事件是如何触发的是不同的）  &lt;/p&gt;
&lt;p&gt;首先，在第一段js代码块中，两个定时器被初始化，一个10ms的setTimeout 和 一个10ms的setInterval。这个定时器启动实际上实在我们第一个js代码块完成之前，不过请注意，定时器所挂载的处理逻辑并没有立即被执行（由于线程模型是不能这样做的），而实际上，延时调用程序将会被插入队列，等待可调用时序时，被顺序执行。  &lt;/p&gt;
&lt;p&gt;其次，我们在第一个代码块中，我们触发了一次点击操作。这个异步事件相关的回调函数，和定时器一样，也不会立即被执行，同样进入队列等待执行。  &lt;/p&gt;
&lt;p&gt;当第一个Javascript代码块执行完成后，浏览器就会去问队列：接下来要执行什么？然而此时此刻，鼠标事件的句柄函数和定时器的延时调用函数都在等待。浏览器会在二者中选择一个（鼠标事件）立即执行。定时器的回调会等待下个时机，被按顺序调用。  &lt;/p&gt;
&lt;p&gt;注意图中，在鼠标事件的回掉执行时，interval延时回掉被执行了。但是需要注意的时，当interval再次被出发时（当一个定时器的延时处理在执行的时候），这时候程序的处理将会被丢弃。假设当有大块的代码正在执行时，你又有一堆的interval延时调用在排队，你希望结果很可能就是这个大块的js代码执行完毕后，interval的延时调用会一个接一个的被触发，而且在执行时没有延时时间，也就是会被连续的调用。可是相反，浏览器往往只是等待，直到没有更多的interval处理程序进行排队。  &lt;/p&gt;
&lt;p&gt;事实上，我们也可以看到，第三个interval回掉触发的时候，这个interval本身也在执行中。这就像我们展示了一个很重要的现象就是：interval 并不在乎当前谁正在执行，他们不分青红皂白地将排队，即使这意味着回调之间的时间将被牺牲。  &lt;/p&gt;
&lt;p&gt;最后，当第二个interval回掉执行完成后，我们能看到，对于js引擎来说，没有需要去执行的东东了。这就意味着，浏览器在等待新的异步事件发生了。到第50秒时，这个interval被再次触发，这时候没有东西在阻塞执行，因此他会被立即调用。  &lt;/p&gt;
&lt;p&gt;我们来用几行代码来更好的去分辨setInterval和setTimeout之间的区别:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="cm"&gt;/* Some long block of code... */&lt;/span&gt; 
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="cm"&gt;/* Some long block of code... */&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这两段代码乍一看似乎差不多，但事实上相差很多。有一点值得注意的是，在这里面的setTimeout，两个回掉执行的时间间隔至少会是10毫秒；而setInterval将尝试每10秒去执行一次，&lt;strong&gt;不去考虑上一次回掉是否已经完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot that we’ve learned here, let’s recap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Javascript是一个单线程执行的东东，迫使异步事件排队等待执行。&lt;/li&gt;
&lt;li&gt;setTimeout 与 setInterval执行代码的原理是完全不同的。&lt;/li&gt;
&lt;li&gt;当一个定时器执行被阻塞时，他会等待下一个可能执行的时机去执行，所以这个延时可能会比预先设定的时间要长。&lt;/li&gt;
&lt;li&gt;如果回调函数执行时间过长（长于定时器的延迟时间），“间隔定时器”有可能会一个接一个无间隔的执行&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;补充的例子&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;die&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;die&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;die&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你认为在100毫秒后，会打针done，说明你没有看懂此篇文章。你一定会觉得在100毫秒后，die的值变成true，然后console会被执行，如果你这样想那你就错了。记住setTimeout的准则是&lt;strong&gt;尽快执行&lt;/strong&gt;，而&lt;strong&gt;不是立即执行&lt;/strong&gt;。只有当主事件循环结束是，有时间片供setTimeout去执行时，定时器才会被执行。&lt;br /&gt;
&lt;a href="http://ejohn.org/blog/how-javascript-timers-work/"&gt;翻译原地址&lt;/a&gt;&lt;br /&gt;
（完）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Fri, 15 Nov 2013 17:41:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-15:posts/2013/how-javascript-timers-work/</guid><category>javascript</category><category>event</category></item><item><title>SimpleHTTPServer添加post方法</title><link>http://stormhouse.github.io/posts/2013/simple-http-server-add-post/</link><description>&lt;p&gt;开发前端demo时需要有后台数据交互，chrome浏览器默认不支持读取本地json数据，也配置启动参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;--allow-file-access-from-files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;firefox又用的不太习惯。以前是下载一个tomcat，还要修改tomcat中conf目录下的&lt;code&gt;server.xml&lt;/code&gt;文件&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;一直以来都学着python，学到网络这块发现很方便的SimpleHTTPServer类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer 9000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;非常欣喜，不过该方法不支持jquery的post请求（我安装的是版本是64位2.7.5），解决方法：
将&lt;code&gt;SimpleHTTPServer.py&lt;/code&gt;复制一份，如&lt;code&gt;StormHTTPServer.py&lt;/code&gt;。找到do_GET方法，在下面添加do_POST方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def do_POST(self):
    self.do_GET()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将该文件复制到${py_home}\Lib目录下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m StormHTTPServer 9000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以支持POST请求了，比起用tomcat方便多啦。&lt;/p&gt;
&lt;p&gt;(完)
&lt;Context path="/${content_name}" docBase="${dir}" workDir="${dir}" debug="0" reloadbale="true"/&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Wed, 13 Nov 2013 17:41:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-13:posts/2013/simple-http-server-add-post/</guid><category>python</category><category>http</category></item><item><title>pelican创建静态博客</title><link>http://stormhouse.github.io/posts/2013/pelican-blog/</link><description>&lt;h2&gt;1 安装&lt;/h2&gt;
&lt;h4&gt;1.1 安装pelican&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://stormhouse.github.io/posts/2013/win7-install-python/"&gt;参见&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2 写博客&lt;/h2&gt;
&lt;h4&gt;2.1 快速入门&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir myblog
cd myblog
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在content创建一个2013-11-04-test.md文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Super&lt;/span&gt; &lt;span class="n"&gt;Beginning&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;beginning&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Writing&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成页面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;预览页面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd output
python -m SimpleHTTPServer 9000
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.2 设置&lt;/h4&gt;
&lt;p&gt;设置article生成目录，参见&lt;a href="http://docs.getpelican.com/en/3.3.0/settings.html#url-settings"&gt;文档&lt;/a&gt;，在pelicanconf.py中最后一行添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ARTICLE_URL = &amp;#39;posts/{date:%Y}/{slug}/&amp;#39;
ARTICLE_SAVE_AS = &amp;#39;posts/{date:%Y}/{slug}/index.html&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.3 更改主题&lt;/h4&gt;
&lt;p&gt;下载安装主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:getpelican/pelican-themes.git
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-themes -i bootstrap2
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-themes --list --verbose
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.4 添加评论功能&lt;/h4&gt;
&lt;p&gt;Pelican 使用Disqus评论, 可以在Disqus上申请一个站点, 然后在pelicanconf.py里添加或修改"DISQUS_SITENAME"项的内容为你的Disqus ID :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DISQUS_SITENAME = u&amp;quot;frantic1048&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.5 一些插件&lt;/h4&gt;
&lt;p&gt;待补充&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 04 Nov 2013 15:22:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-04:posts/2013/pelican-blog/</guid><category>python</category></item><item><title>win7x64下python安装配置</title><link>http://stormhouse.github.io/posts/2013/win7-install-python/</link><description>&lt;h2&gt;安装1 python&lt;/h2&gt;
&lt;h4&gt;安装1.1 &lt;a href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi"&gt;python2.7.5&lt;/a&gt;，添加环境变量${PY_HOME}\Scripts&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python --version
Python 2.7.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;#1.2 安装easy_install&lt;/h4&gt;
&lt;p&gt;安装&lt;a href="https://pypi.python.org/pypi/setuptools#windows"&gt;setuptools&lt;/a&gt;下载&lt;a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py"&gt;ez_setup.py&lt;/a&gt;，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python ez_setup.py
&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install --version
setuptools 1.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.3 安装pip&lt;/h4&gt;
&lt;p&gt;安装&lt;a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py"&gt;pip&lt;/a&gt;，&lt;a href="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz"&gt;下载&lt;/a&gt;解压后，到根目录下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py install
&lt;span class="nv"&gt;$ &lt;/span&gt;pip --version
pip 1.4.1 from ... ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 其它模块安装&lt;/h2&gt;
&lt;h4&gt;2.1 安装pyquery&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/dxy_1110/article/details/8568340"&gt;参考这里&lt;/a&gt;的easy_install安装方式：下载&lt;a href="https://pypi.python.org/packages/2.7/l/lxml/lxml-2.3.win-amd64-py2.7.exe#md5=3db458d2127e68c49d6694d409322d96"&gt;lxml-2.3.win-amd64-py2.7.exe&lt;/a&gt;，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install lxml-2.3.win-amd64-py2.7.exe
&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install pyquery
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.2 安装Markdown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.3 安装pelican&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.4 安装gevent&lt;/h4&gt;
&lt;p&gt;下载&lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#greenlet"&gt;greenlet-0.4.1.win-amd64-py2.7.exe&lt;/a&gt;&lt;br /&gt;
下载&lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#gevent"&gt;gevent-0.13.8.win-amd64-py2.7.exe&lt;/a&gt;
安装&lt;/p&gt;
&lt;h4&gt;2.5 安装chardet&lt;/h4&gt;
&lt;p&gt;编码嗅探&lt;/p&gt;
&lt;p&gt;下载&lt;a href="https://pypi.python.org/packages/source/c/chardet/chardet-2.2.1.tar.gz#md5=4a758402eaefd0331bdedc7ecb6f452c"&gt;chardet-2.2.1.tar.gz&lt;/a&gt;， 解压放到&lt;code&gt;Lib\site-packages&lt;/code&gt;目录，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setup.py install
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 04 Nov 2013 11:12:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-11-04:posts/2013/win7-install-python/</guid><category>python</category></item><item><title>win7x64下git安装配置</title><link>http://stormhouse.github.io/posts/2013/win7-install-git/</link><description>&lt;h2&gt;1. 安装&lt;/h2&gt;
&lt;h4&gt;1.1 cygwin安装&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.cygwin.com/install.html"&gt;cygwin下载&lt;/a&gt;
&lt;br&gt;注意：添加make命令，在Select Packages一步，将Devel@Default改为Devel@Install&lt;/p&gt;
&lt;h4&gt;1.2 git for windows下载安装&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git"&gt;下载&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2. github配置&lt;/h2&gt;
&lt;h4&gt;2.1 github.com上注册用户&lt;/h4&gt;
&lt;p&gt;用户名:stormhouse; 邮箱:stormhouse@yeah.net&lt;/p&gt;
&lt;h4&gt;2.2 初始配置&lt;/h4&gt;
&lt;p&gt;打开Git Bash，执行以下命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global user.name &amp;quot;stormhouse&amp;quot;
git config --global user.email stormhouse@yeah.net
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config -l
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.3 创建SSH密匙&lt;/h4&gt;
&lt;p&gt;按提示输入文件名及密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -C &amp;#39;stormhouse@yeah.net&amp;#39; -t rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.4 提交密匙&lt;/h4&gt;
&lt;p&gt;登录github.com，点击Account settings -&amp;gt; SSH Keys -&amp;gt; Add SSH Key,
把c:\user\${username}.ssh\id_rsa.pub中内容保存到Key中&lt;br /&gt;
打开命令行，测试连接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -v git@github.com   --测试连接
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会提示你输入创建密匙时的密码&lt;/p&gt;
&lt;h2&gt;3. 创建项目，上传&lt;/h2&gt;
&lt;h4&gt;3.1 创建本地仓库&lt;/h4&gt;
&lt;p&gt;Git Bash下，切到项目的根目录下，如test-demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加一个文件index.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交到仓库(-m是提交的注释)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &amp;#39;add index.html&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.2 提交代码到github&lt;/h4&gt;
&lt;p&gt;登录github，单击Create a new repo，名称为test-demo&lt;br /&gt;
添加远程url，打开Git Bash，注意要换为你的用户名和项目名&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add origin git@github.com:stormhouse/test-demo.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刷新你的github.com主页，就可以看到提交的index.html文件了&lt;/p&gt;
&lt;p&gt;（完）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stormhouse</dc:creator><pubDate>Mon, 14 Oct 2013 14:20:00 +0800</pubDate><guid>tag:stormhouse.github.io,2013-10-14:posts/2013/win7-install-git/</guid><category>git</category></item></channel></rss>